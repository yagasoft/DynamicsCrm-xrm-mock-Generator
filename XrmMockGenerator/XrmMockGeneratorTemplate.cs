// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Yagasoft.XrmMockGenerator
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System.CodeDom;
    using System.CodeDom.Compiler;
    using System.IO;
    using Yagasoft.XrmMockGenerator.Model;
    using Yagasoft.XrmMockGenerator.Model.Control;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class XrmMockGeneratorTemplate : XrmMockGeneratorTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("import { UserSettingsMock, EntityMock, ContextMock, IContextComponents, ClientCon" +
                    "textMock, IXrmGeneratorComponents, XrmMockGenerator, IEntityComponents, ItemColl" +
                    "ectionMock, UiMock, FormSelectorMock, FormItemMock, ControlMock, OptionSetValueM" +
                    "ock, IUiComponents, IOptionSetAttributeComponents, OptionSetAttributeMock, IDate" +
                    "AttributeComponents, INumberAttributeComponents, NumberAttributeMock, ILookupAtt" +
                    "ributeComponents, LookupAttributeMock, StringAttributeMock, IStringAttributeComp" +
                    "onents, DateAttributeMock, IBooleanAttributeComponents, BooleanAttributeMock } f" +
                    "rom \"xrm-mock\";\r\nimport { CrmService, CrmConnectionConfig } from \"node-dcrm-serv" +
                    "ice\";\r\nimport * as sinon from \"sinon\";\r\n\r\nvar jsdom = require(\"jsdom\");\r\nconst {" +
                    " JSDOM } = jsdom;\r\nconst { window } = new JSDOM();\r\nconst { document } = (new JS" +
                    "DOM(\'\')).window;\r\nglobal[\"document\"] = document;\r\nglobal[\"$\"] = global[\"jQuery\"]" +
                    " = require(\"jquery\")(window);\r\n\r\n\r\n/**\r\n * Model generated by the \"xrm-mock Gene" +
                    "rator\" tool available in the XrmToolBox or as the NuGet package \"xrm-mock-Genera" +
                    "tor\"\r\n */\r\nexport namespace XrmModel\r\n{\r\n\tabstract class CrmEntityModel<TFormNam" +
                    "es>\r\n\t{\r\n\t\tabstract entityName: string;\r\n\t\tabstract context: Context;\r\n\t\tabstrac" +
                    "t crmAttributes: CrmAttribute[];\r\n\t\tabstract forms: Form[];\r\n\t\tactiveForm: TForm" +
                    "Names;\r\n\t}\r\n\r\n\tinterface IHasId { id: string; }\r\n\tinterface IHasLabels { labels:" +
                    " Map<number, string>; }\r\n\tinterface ICanVisible { isVisible: boolean; }\r\n\tinterf" +
                    "ace ICanDisabled { isDisabled: boolean; }\r\n\r\n\tclass Form implements IHasId\r\n\t{\r\n" +
                    "\t\tid: string;\r\n\t\tname: string;\r\n\t\ttabs: Tab[];\r\n\r\n\t\tconstructor(obj: Form)\r\n\t\t{\r" +
                    "\n\t\t\tObject.assign<Form, Form>(this, obj);\r\n\t\t}\r\n\t}\r\n\r\n\tclass Tab implements IHas" +
                    "Id, IHasLabels, ICanVisible\r\n\t{\r\n\t\tid: string;\r\n\t\tlabels: Map<number, string>;\r\n" +
                    "\t\tisVisible: boolean;\r\n\t\tsections: Section[];\r\n\r\n\t\tconstructor(obj: Tab)\r\n\t\t{\r\n\t" +
                    "\t\tObject.assign<Tab, Tab>(this, obj);\r\n\t\t}\r\n\t}\r\n\r\n\tclass Section implements IHas" +
                    "Id, IHasLabels, ICanVisible\r\n\t{\r\n\t\tid: string;\r\n\t\tlabels: Map<number, string>;\r\n" +
                    "\t\tisVisible: boolean;\r\n\t\tcontrols: Control[];\r\n\r\n\t\tconstructor(obj: Section)\r\n\t\t" +
                    "{\r\n\t\t\tObject.assign<Section, Section>(this, obj);\r\n\t\t}\r\n\t}\r\n\r\n\tclass CrmAttribut" +
                    "e\r\n\t{\r\n\t\tattributeType: string;\r\n\t\tname: string;\r\n\t\trequiredLevel: string;\r\n\t\tfo" +
                    "rmat: string;\r\n\t\toptions: Map<number, Map<number, string>>;\r\n\t\tmin: number;\r\n\t\tm" +
                    "ax: number;\r\n\t\tprecision: number;\r\n\t\tmaxLength: number;\r\n\t\tdefaultBoolValue: boo" +
                    "lean;\r\n\t\tinitialValue: number;\r\n        \r\n\t\tconstructor(obj: CrmAttribute)\r\n\t\t{\r" +
                    "\n\t\t\tObject.assign<CrmAttribute, CrmAttribute>(this, obj);\r\n\t\t}\r\n\t}\r\n\r\n\tabstract " +
                    "class Control implements IHasLabels, ICanVisible\r\n\t{\r\n\t\tname: string;\r\n\t\tlabels:" +
                    " Map<number, string>;\r\n\t\tisVisible: boolean;\r\n\r\n\t\tconstructor(obj: Control)\r\n\t\t{" +
                    "\r\n\t\t\tObject.assign<Control, Control>(this, obj);\r\n\t\t}\r\n\t}\r\n\r\n\tclass FieldControl" +
                    " extends Control implements ICanDisabled\r\n\t{\r\n\t\tisDisabled: boolean;\r\n\r\n\t\tconstr" +
                    "uctor(obj: FieldControl)\r\n\t\t{\r\n\t\t\tsuper(obj);\r\n\t\t\tObject.assign<FieldControl, Fi" +
                    "eldControl>(this, obj);\r\n\t\t}\r\n\t}\r\n\r\n\tclass GridControl extends Control\r\n\t{\r\n\t\tco" +
                    "nstructor(obj: GridControl)\r\n\t\t{\r\n\t\t\tsuper(obj);\r\n\t\t\tObject.assign<GridControl, " +
                    "GridControl>(this, obj);\r\n\t\t}\r\n\t}\r\n\r\n\tclass Context\r\n\t{ \r\n\t\tuserId: string;\r\n\t\tu" +
                    "sername: string;\r\n\t\tuserFullName: string;\r\n\t\tisGuidedHelpEnabled: boolean;\r\n\t\tus" +
                    "erLanguageCode: number;\r\n\t\ttimeZoneBias: number;\r\n\t\tuserRoles: string[];\r\n\t\torga" +
                    "nisationUrl: string;\r\n\t\tisAutoSaveEnabled: boolean;\r\n\t\torgLanguageCode: number;\r" +
                    "\n\t\torganisationName: string;\r\n\t\tthemeName: string;\r\n\t\tcrmVersion: string;\r\n\r\n\t\tc" +
                    "onstructor(obj: Context)\r\n\t\t{\r\n\t\t\tObject.assign<Context, Context>(this, obj);\r\n\t" +
                    "\t}\r\n\t}\r\n\r\n\texport class ContextParams\r\n\t{\r\n\t\tclient: Xrm.Client;\r\n\t\tclientState:" +
                    " Xrm.ClientState;\r\n\t\tuserSettings: UserSettingsMock;\r\n\t}\r\n\r\n\texport class ModelB" +
                    "uilder<TEntity extends CrmEntityModel<TEntity[\"activeForm\"]>>\r\n\t{\r\n\t\tprivate rec" +
                    "ordId: string;\r\n\t\tprivate entity: EntityMock;\r\n\t\tprivate context: ContextMock;\r\n" +
                    "\t\tprivate ui: UiMock;\r\n\t\tprivate attributes: Xrm.Attributes.Attribute[] = [];\r\n\t" +
                    "\tprivate form: Form;\r\n\r\n\t\tprivate formType: XrmEnum.FormType\r\n\t\tprivate isBuilt:" +
                    " boolean;\r\n\r\n\t\tprivate crmService: CrmService\r\n    \r\n\t\tconstructor(private rawMo" +
                    "del: TEntity, recordId: string = \"00000000-0000-0000-0000-000000000000\")\r\n\t\t{\r\n\t" +
                    "\t\tthis.recordId = recordId;\r\n\t\t\tthis.form = this.rawModel.forms.find(form => tru" +
                    "e);\r\n\t\t}\r\n\r\n\t\tselectForm(formName: TEntity[\"activeForm\"])\r\n\t\t{\r\n\t\t\tif (this.isBu" +
                    "ilt)\r\n\t\t\t{\r\n\t\t\t\tthrow new Error(\"Model already built.\");\r\n\t\t\t}\r\n\r\n\t\t\tthis.form =" +
                    " this.rawModel.forms.find(form => form.name === formName);\r\n\t\t}\r\n\r\n\t\tbuildContex" +
                    "t(parameters_url?: ContextMock | ContextParams | string, url?: string)\r\n\t\t{\r\n\t\t\t" +
                    "if (this.isBuilt)\r\n\t\t\t{\r\n\t\t\t\tthrow new Error(\"Model already built.\");\r\n\t\t\t}\r\n\r\n\t" +
                    "\t\tconst rawContext = this.rawModel.context;\r\n\r\n\t\t\tif (parameters_url == null || " +
                    "typeof(parameters_url) === \"string\")\r\n\t\t\t{\r\n\t\t\t\tthis.context = new ContextMock(<" +
                    "IContextComponents>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tclientContext: new ClientContextMock(\"Web\", \"" +
                    "Online\"),\r\n\t\t\t\t\t\tuserSettings: new UserSettingsMock(\r\n\t\t\t\t\t\t\t<UserSettingsMock>\r" +
                    "\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tisGuidedHelpEnabled: rawContext.isGuidedHelpEnabled,\r\n\t\t\t\t\t\t\t" +
                    "\tisHighContrastEnabled: false,\r\n\t\t\t\t\t\t\t\tisRTL: false,\r\n\t\t\t\t\t\t\t\tuserId: rawContex" +
                    "t.userId,\r\n\t\t\t\t\t\t\t\tuserName: rawContext.username,\r\n\t\t\t\t\t\t\t\tlanguageId: rawContex" +
                    "t.userLanguageCode,\r\n\t\t\t\t\t\t\t\tsecurityRoles: rawContext.userRoles\r\n\t\t\t\t\t\t\t}),\r\n\t\t" +
                    "\t\t\t\tclientUrl: rawContext.organisationUrl || parameters_url,\r\n\t\t\t\t\t\tcurrentTheme" +
                    ": rawContext.themeName,\r\n\t\t\t\t\t\tisAutoSaveEnabled: rawContext.isAutoSaveEnabled,\r" +
                    "\n\t\t\t\t\t\torgLcid: rawContext.orgLanguageCode,\r\n\t\t\t\t\t\torgUniqueName: rawContext.org" +
                    "anisationName,\r\n\t\t\t\t\t\ttimeZoneOffset: rawContext.timeZoneBias,\r\n\t\t\t\t\t\tuserId: ra" +
                    "wContext.userId,\r\n\t\t\t\t\t\tuserLcid: rawContext.userLanguageCode,\r\n\t\t\t\t\t\tuserName: " +
                    "rawContext.userFullName,\r\n\t\t\t\t\t\tuserRoles: rawContext.userRoles,\r\n\t\t\t\t\t\tversion:" +
                    " rawContext.crmVersion\r\n\t\t\t\t\t});\r\n\t\t\t}\r\n\t\t\telse if (parameters_url instanceof Co" +
                    "ntextMock)\r\n\t\t\t{\r\n\t\t\t\tthis.context = parameters_url;\r\n\t\t\t}\r\n\t\t\telse if (paramete" +
                    "rs_url instanceof ContextParams)\r\n\t\t\t{\r\n\t\t\t\tconst parameters = <ContextParams>pa" +
                    "rameters_url;\r\n\r\n\t\t\t\tthis.context = new ContextMock(<IContextComponents>\r\n\t\t\t\t\t{" +
                    "\r\n\t\t\t\t\t\tclientContext: new ClientContextMock(parameters.client, parameters.clien" +
                    "tState),\r\n\t\t\t\t\t\tuserSettings: parameters.userSettings,\r\n\t\t\t\t\t\tclientUrl: rawCont" +
                    "ext.organisationUrl || url,\r\n\t\t\t\t\t\tcurrentTheme: rawContext.themeName,\r\n\t\t\t\t\t\tis" +
                    "AutoSaveEnabled: rawContext.isAutoSaveEnabled,\r\n\t\t\t\t\t\torgLcid: rawContext.orgLan" +
                    "guageCode,\r\n\t\t\t\t\t\torgUniqueName: rawContext.organisationName,\r\n\t\t\t\t\t\ttimeZoneOff" +
                    "set: rawContext.timeZoneBias,\r\n\t\t\t\t\t\tuserId: parameters.userSettings.userId,\r\n\t\t" +
                    "\t\t\t\tuserLcid: parameters.userSettings.languageId,\r\n\t\t\t\t\t\tuserName: parameters.us" +
                    "erSettings.userName,\r\n\t\t\t\t\t\tuserRoles: parameters.userSettings.securityRoles,\r\n\t" +
                    "\t\t\t\t\tversion: rawContext.crmVersion\r\n\t\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tbuildModel(): void" +
                    "\r\n\t\t{\r\n\t\t\tif (this.isBuilt)\r\n\t\t\t{\r\n\t\t\t\tthrow new Error(\"Model already built.\");\r" +
                    "\n\t\t\t}\r\n\r\n\t\t\tif (this.context == null)\r\n\t\t\t{\r\n\t\t\t\tthis.buildContext();\r\n\t\t\t}\r\n\r\n\t" +
                    "\t\tthis.buildAttributes();\r\n\t\t\tthis.buildEntity();\r\n\t\t\tthis.buildUi();\r\n\r\n\t\t\tXrmM" +
                    "ockGenerator.initialise(<IXrmGeneratorComponents>\r\n\t\t\t\t{\r\n\t\t\t\t\tentity: this.enti" +
                    "ty,\r\n\t\t\t\t\tui: this.ui,\r\n\t\t\t\t\tcontext: this.context,\r\n\t\t\t\t\tprocess: null\r\n\t\t\t\t});" +
                    "\r\n\r\n\t\t\tthis.buildTabs();\r\n\r\n\t\t\tthis.isBuilt = true;\r\n\t\t}\r\n\r\n\t\tenableOnlineWebApi" +
                    "(config: CrmConnectionConfig): Promise<CrmService>\r\n\t\t{\r\n\t\t\tif (!this.isBuilt)\r\n" +
                    "\t\t\t{\r\n\t\t\t\tthrow new Error(\"Model must be built first before enabling online conn" +
                    "ection.\");\r\n\t\t\t}\r\n\r\n\t\t\tthis.crmService = new CrmService(config);\r\n\r\n\t\t\tthis.setu" +
                    "pXrmWebApiMocks();\r\n\t\t\tthis.setupJqueryMocks(config);\r\n\r\n\t\t\treturn this.crmServi" +
                    "ce.initialise().then(e => this.crmService);\r\n\t\t}\r\n    \r\n\t\tprivate buildAttribute" +
                    "s(): void\r\n\t\t{\r\n\t\t\tfor (const attribute of this.rawModel.crmAttributes)\r\n\t\t\t{\r\n\t" +
                    "\t\t\tconst attributeType = attribute.attributeType;\r\n\t\t\t\tconst params =\r\n\t\t\t\t{\r\n\t\t" +
                    "\t\t\tname: attribute.name,\r\n\t\t\t\t\tattributeType: attribute.attributeType,\r\n\t\t\t\t\treq" +
                    "uiredLevel: attribute.requiredLevel,\r\n\t\t\t\t\tformat: attribute.format\r\n\t\t\t\t};\r\n\t\t\t" +
                    "\tlet attributeMock;\r\n\r\n\t\t\t\tswitch (attributeType)\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"optionset\":" +
                    "\r\n\t\t\t\t\t\tconst optionsMock: OptionSetValueMock[] = []\r\n\t\t\t\t\t\tattribute.options.fo" +
                    "rEach((value, key) => { optionsMock.push(new OptionSetValueMock(value.get(this.c" +
                    "ontext.userLcid), key)) });\r\n\t\t\t\t\t\tconst optionSetParams = <IOptionSetAttributeC" +
                    "omponents>params;\r\n\t\t\t\t\t\toptionSetParams.options = optionsMock;\r\n\t\t\t\t\t\toptionSet" +
                    "Params.initialValue = attribute.initialValue;\r\n\t\t\t\t\t\tattributeMock = new OptionS" +
                    "etAttributeMock(optionSetParams);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"datetime\":\r\n\t\t\t\t\t\tat" +
                    "tributeMock = new DateAttributeMock(<IDateAttributeComponents>params);\r\n\t\t\t\t\tcas" +
                    "e \"integer\":\r\n\t\t\t\t\tcase \"double\":\r\n\t\t\t\t\tcase \"decimal\":\r\n\t\t\t\t\tcase \"money\":\r\n\t\t\t" +
                    "\t\t\tconst numberParams = <INumberAttributeComponents>params;\r\n\t\t\t\t\t\tnumberParams." +
                    "min = attribute.min;\r\n\t\t\t\t\t\tnumberParams.max = attribute.max;\r\n\t\t\t\t\t\tnumberParam" +
                    "s.precision = attribute.precision;\r\n\t\t\t\t\t\tattributeMock = new NumberAttributeMoc" +
                    "k(numberParams);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"lookup\":\r\n\t\t\t\t\t\tconst lookupParams = " +
                    "<ILookupAttributeComponents>params;\r\n\t\t\t\t\t\tlookupParams.isPartyList = null;\r\n\t\t\t" +
                    "\t\t\tattributeMock = new LookupAttributeMock(lookupParams);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tca" +
                    "se \"string\":\r\n\t\t\t\t\tcase \"memo\":\r\n\t\t\t\t\t\tconst stringParams = <IStringAttributeCom" +
                    "ponents>params;\r\n\t\t\t\t\t\tstringParams.maxLength = attribute.maxLength;\r\n\t\t\t\t\t\tattr" +
                    "ibuteMock = new StringAttributeMock(stringParams);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"boo" +
                    "lean\":\r\n\t\t\t\t\t\tconst booleanParams = <IBooleanAttributeComponents>params;\r\n\t\t\t\t\t\t" +
                    "booleanParams.initialValue = attribute.defaultBoolValue;\r\n\t\t\t\t\t\tattributeMock = " +
                    "new BooleanAttributeMock(booleanParams);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tcon" +
                    "sole.log(`WARNING: Adding attribute \'${attribute.name}\' as String attribute due " +
                    "to unsupported \'${attributeType}\' type.`);\r\n\t\t\t\t\t\tconst defaultParams = <IString" +
                    "AttributeComponents>params;\r\n\t\t\t\t\t\tattributeMock = new StringAttributeMock(defau" +
                    "ltParams);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.attributes.push(attributeMock);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tpr" +
                    "ivate buildEntity(): void\r\n\t\t{\r\n\t\t\tthis.entity = new EntityMock(<IEntityComponen" +
                    "ts>\r\n\t\t\t\t{\r\n\t\t\t\t\tentityName: `${this.rawModel.entityName}`,\r\n\t\t\t\t\tid: `{${this.r" +
                    "ecordId}}`,\r\n\t\t\t\t\tattributes: new ItemCollectionMock<Xrm.Attributes.Attribute>(t" +
                    "his.attributes)\r\n\t\t\t\t});\r\n\t\t}\r\n\r\n\t\tprivate buildUi(): void\r\n\t\t{\r\n\t\t\tthis.ui = ne" +
                    "w UiMock(<IUiComponents>\r\n\t\t\t\t{\r\n\t\t\t\t\tformSelector: new FormSelectorMock(new Ite" +
                    "mCollectionMock<FormItemMock>(\r\n\t\t\t\t\t\tthis.rawModel.forms.map(form =>\r\n\t\t\t\t\t\t\tne" +
                    "w FormItemMock(\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tcurrentItem: form.id === this.form.id,\r\n\t\t\t" +
                    "\t\t\t\t\t\tformType: this.formType,\r\n\t\t\t\t\t\t\t\t\tid: form.id,\r\n\t\t\t\t\t\t\t\t\tlabel: form.name" +
                    ",\r\n\t\t\t\t\t\t\t\t}))))\r\n\t\t\t\t});\r\n\t\t}\r\n\r\n\t\tprivate buildTabs(): void\r\n\t\t{\r\n\t\t\tfor (cons" +
                    "t tab of this.form.tabs) \r\n\t\t\t{\r\n\t\t\t\tXrmMockGenerator.Tab.createTab(tab.id, tab." +
                    "labels.get(this.context.userLcid), tab.isVisible, \"collapsed\", null,\r\n\t\t\t\t\tnew I" +
                    "temCollectionMock<Xrm.Controls.Section>(this.buildSections(tab)));\r\n\t\t\t}\r\n\t\t}\r\n\r" +
                    "\n\t\tprivate buildSections(tab: Tab): Xrm.Controls.Section[]\r\n\t\t{\r\n\t\t\tconst sectio" +
                    "ns: Xrm.Controls.Section[] = [];\r\n\r\n\t\t\tfor (const section of tab.sections)\r\n\t\t\t{" +
                    "\r\n\t\t\t\tsections.push(\r\n\t\t\t\t\tXrmMockGenerator.Section.createSection(section.id, se" +
                    "ction.labels.get(this.context.userLcid), section.isVisible, null,\r\n\t\t\t\t\t\tnew Ite" +
                    "mCollectionMock<Xrm.Controls.Control>(this.buildControls(section))));\r\n\t\t\t}\r\n\r\n\t" +
                    "\t\treturn sections;\r\n\t\t}\r\n\r\n\t\tprivate buildControls(section: Section): Xrm.Contro" +
                    "ls.Control[]\r\n\t\t{\r\n\t\t\tconst controls: Xrm.Controls.Control[] = [];\r\n\r\n\t\t\tfor (co" +
                    "nst control of section.controls)\r\n\t\t\t{\r\n\t\t\t\tconst controlParams: any = { name: c" +
                    "ontrol.name, label: control.labels.get(this.context.userLcid), visible: control." +
                    "isVisible };\r\n\t\t\t\tlet controlMock: ControlMock;\r\n\r\n\t\t\t\tif (control instanceof Gr" +
                    "idControl)\r\n\t\t\t\t{\r\n\t\t\t\t\tcontrolParams.entityName = this.entity;\r\n\t\t\t\t\tcontrolMoc" +
                    "k = XrmMockGenerator.Control.createGrid(controlParams);\r\n\t\t\t\t}\r\n\t\t\t\telse if (con" +
                    "trol instanceof FieldControl)\r\n\t\t\t\t{\r\n\t\t\t\t\tconst attribute = this.attributes.fin" +
                    "d(attribute => attribute.getName() === control.name);\r\n\r\n\t\t\t\t\tconst missingAttri" +
                    "buteMessage = `WARNING: Skipped adding control \'${control.name}\' due to missing " +
                    "attribute.`;\r\n\r\n\t\t\t\t\tif (!attribute)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconsole.log(missingAttribute" +
                    "Message);\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tcontrolParams.attribute = attribute;\r" +
                    "\n\r\n\t\t\t\t\tconst fieldcontrol = <FieldControl>control;\r\n\t\t\t\t\tcontrolParams.disabled" +
                    " = fieldcontrol.isDisabled\r\n\r\n\t\t\t\t\tconst rawAttribute = this.rawModel.crmAttribu" +
                    "tes.find(attribute => attribute.name === control.name);\r\n\r\n\t\t\t\t\tif (!rawAttribut" +
                    "e)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconsole.log(missingAttributeMessage);\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}" +
                    "\r\n\r\n\t\t\t\t\tconst attributeType = rawAttribute.attributeType;\r\n\r\n\t\t\t\t\tswitch (attri" +
                    "buteType)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcase \"optionset\":\r\n\t\t\t\t\t\t\tconst optionsMock: OptionSetV" +
                    "alueMock[] = []\r\n\t\t\t\t\t\t\trawAttribute.options.forEach((value, key) => { optionsMo" +
                    "ck.push(new OptionSetValueMock(value.get(this.context.userLcid), key)) });\r\n\t\t\t\t" +
                    "\t\t\tcontrolParams.options = optionsMock;\r\n\t\t\t\t\t\t\tcontrolMock = XrmMockGenerator.C" +
                    "ontrol.createOptionSet(controlParams);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"datetime\":\r\n\t" +
                    "\t\t\t\t\t\tcontrolParams.showTime = attribute.getFormat() === \"datetime\";\r\n\t\t\t\t\t\t\tcon" +
                    "trolMock = XrmMockGenerator.Control.createDate(controlParams);\r\n\t\t\t\t\t\t\tbreak;\r\n\t" +
                    "\t\t\t\t\tcase \"integer\":\r\n\t\t\t\t\t\tcase \"double\":\r\n\t\t\t\t\t\tcase \"decimal\":\r\n\t\t\t\t\t\tcase \"m" +
                    "oney\":\r\n\t\t\t\t\t\t\tcontrolMock = XrmMockGenerator.Control.createNumber(controlParams" +
                    ");\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"lookup\":\r\n\t\t\t\t\t\t\tcontrolMock = XrmMockGenerator.C" +
                    "ontrol.createLookup(controlParams);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"string\":\r\n\t\t\t\t\t\t" +
                    "case \"memo\":\r\n\t\t\t\t\t\t\tcontrolMock = XrmMockGenerator.Control.createString(control" +
                    "Params);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"boolean\":\r\n\t\t\t\t\t\t\tcontrolMock = XrmMockGene" +
                    "rator.Control.createBoolean(controlParams);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t" +
                    "\t\t\tconsole.log(`WARNING: Adding control \'${control.name}\' as String control due " +
                    "to unsupported \'${attributeType}\' type.`);\r\n\t\t\t\t\t\t\tcontrolMock = XrmMockGenerato" +
                    "r.Control.createString(controlParams);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcontrols.push(contr" +
                    "olMock);\r\n\t\t\t}\r\n\r\n\t\t\treturn controls;\r\n\t\t}\r\n\r\n\t\tprivate retrieveEntityWebApiName" +
                    " =\r\n\t\t\t(logicalName: string): Promise<string> =>\r\n\t\t\t\tthis.crmService.get(`/api/" +
                    "data/v8.2/EntityDefinitions(LogicalName=\'${logicalName}\')?$select=LogicalCollect" +
                    "ionName`)\r\n\t\t\t\t\t.then(e => e.body.LogicalCollectionName);\r\n\r\n\t\tprivate setupXrmW" +
                    "ebApiMocks()\r\n\t\t{\r\n\t\t\tsinon.stub(Xrm.WebApi, \"createRecord\").callsFake((entityLo" +
                    "gicalName: string, data: any) => this.retrieveEntityWebApiName(entityLogicalName" +
                    ")\r\n\t\t\t\t.then(webApiName => this.crmService.post(`/api/data/v8.2/${webApiName}`, " +
                    "data)\r\n\t\t\t\t\t.then(e => new RegExp(`${webApiName}\\\\((.*?)\\\\)`).exec(e.headers[\"od" +
                    "ata-entityid\"])[1])));\r\n\t\t\tsinon.stub(Xrm.WebApi, \"updateRecord\").callsFake((ent" +
                    "ityLogicalName: string, id: string, data: any) => this.retrieveEntityWebApiName(" +
                    "entityLogicalName)\r\n\t\t\t\t.then(webApiName => this.crmService.patch(`/api/data/v8." +
                    "2/${webApiName}(${id})`, data)\r\n\t\t\t\t\t.then(e => new RegExp(`${webApiName}\\\\((.*?" +
                    ")\\\\)`).exec(e.headers[\"odata-entityid\"])[1])));\r\n\t\t\tsinon.stub(Xrm.WebApi, \"dele" +
                    "teRecord\").callsFake((entityLogicalName: string, id: string) => this.retrieveEnt" +
                    "ityWebApiName(entityLogicalName)\r\n\t\t\t\t.then(webApiName => this.crmService.delete" +
                    "(`/api/data/v8.2/${webApiName}(${id})`)\r\n\t\t\t\t\t.then(e => id)));\r\n\t\t\tsinon.stub(X" +
                    "rm.WebApi, \"retrieveRecord\").callsFake((entityLogicalName: string, id: string, o" +
                    "ptions?: string) => this.retrieveEntityWebApiName(entityLogicalName)\r\n\t\t\t\t.then(" +
                    "webApiName => this.crmService.get(`/api/data/v8.2/${webApiName}(${id})${options}" +
                    "`)\r\n\t\t\t\t\t.then(e => e.body)));\r\n\t\t\tsinon.stub(Xrm.WebApi, \"retrieveMultipleRecor" +
                    "ds\").callsFake((entityLogicalName: string, options?: string, maxPageSize?: numbe" +
                    "r) => this.retrieveEntityWebApiName(entityLogicalName)\r\n\t\t\t\t.then(webApiName => " +
                    "this.crmService.get(`/api/data/v8.2/${webApiName}${options}`, new Map<string, st" +
                    "ring>([[\"Prefer\", `odata.maxpagesize=${maxPageSize ? maxPageSize : 5000}`]]))\r\n\t" +
                    "\t\t\t\t.then(e => <Xrm.RetrieveMultipleResult>{ entities: e.body.value, nextLink: e" +
                    ".body[\"@odata.nextLink\"] })));\r\n\t\t}\r\n\r\n\t\tprivate setupJqueryMocks(config: CrmCon" +
                    "nectionConfig)\r\n\t\t{\r\n\t\t\tconst createJqueryStubPromise =\r\n\t\t\t\t(method, url, data?" +
                    ", successCallback?, errorCallback?): any =>\r\n\t\t\t\t{\r\n\t\t\t\t\tconst deferred = $.Defe" +
                    "rred();\r\n\r\n\t\t\t\t\tlet dataProcessed;\r\n\r\n\t\t\t\t\tif (data)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdataProcesse" +
                    "d = (data as string) ? JSON.parse(<string>data) : data;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.crm" +
                    "Service[method](url.replace(config.baseUrl, \'\'), dataProcessed)\r\n\t\t\t\t\t\t.then(e =" +
                    ">\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tconst xhr =\r\n\t\t\t\t\t\t\t\t<JQuery.jqXHR>\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tstat" +
                    "us: e.statusCode, statusText: e.statusCodeMessage,\r\n\t\t\t\t\t\t\t\t\tgetResponseHeader: " +
                    "name => e.headers[name.toLowerCase()]\r\n\t\t\t\t\t\t\t\t};\r\n\r\n\t\t\t\t\t\t\tif (successCallback)" +
                    "\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t(<any>successCallback)(e.body, \"success\", xhr);\r\n\t\t\t\t\t\t\t}\r\n\r" +
                    "\n\t\t\t\t\t\t\tdeferred.resolve(e.body, \"success\", xhr);\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t.catch(e =>\r\n" +
                    "\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tconst xhr =\r\n\t\t\t\t\t\t\t\t<JQuery.jqXHR>\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tstatus:" +
                    " e.statusCode, statusText: e.statusCodeMessage,\r\n\t\t\t\t\t\t\t\t\tgetResponseHeader: nam" +
                    "e => e.headers[name.toLowerCase()]\r\n\t\t\t\t\t\t\t\t};\r\n\r\n\t\t\t\t\t\t\tif (errorCallback)\r\n\t\t\t" +
                    "\t\t\t\t{\r\n\t\t\t\t\t\t\t\t(<any>errorCallback)(xhr, \"error\", e.statusCodeMessage);\r\n\t\t\t\t\t\t\t" +
                    "}\r\n\r\n\t\t\t\t\t\t\tdeferred.reject(xhr, \"error\", e.statusCodeMessage);\r\n\t\t\t\t\t\t});\r\n\r\n\r\n" +
                    "\t\t\t\t\treturn deferred.promise();\r\n\t\t\t\t};\r\n\r\n\t\t\tsinon.stub($, \"ajax\").callsFake(\r\n" +
                    "\t\t\t\t(ajaxSettings_url: string | JQuery.AjaxSettings, ajaxSettings: JQuery.AjaxSe" +
                    "ttings) =>\r\n\t\t\t\t{\r\n\t\t\t\t\tif (typeof (ajaxSettings_url) === \"string\")\r\n\t\t\t\t\t{\r\n\t\t\t" +
                    "\t\t\tajaxSettings.url = ajaxSettings_url;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tajaxSe" +
                    "ttings = ajaxSettings_url;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn createJqueryStubPromise((ajaxS" +
                    "ettings.method || ajaxSettings.type).toLowerCase(),\r\n\t\t\t\t\t\tajaxSettings.url, aja" +
                    "xSettings.data, ajaxSettings.success, ajaxSettings.error)\r\n\t\t\t\t});\r\n\r\n\t\t\tsinon.s" +
                    "tub($, \"getJSON\").callsFake((url: string,\r\n\t\t\t\tsuccess_data: JQuery.jqXHR.DoneCa" +
                    "llback | JQuery.PlainObject | string,\r\n\t\t\t\tsuccess: JQuery.jqXHR.DoneCallback) =" +
                    ">\r\n\t\t\t\tcreateJqueryStubPromise(\"get\", url,\r\n\t\t\t\t\ttypeof (success_data) === \"func" +
                    "tion\" ? null : success_data,\r\n\t\t\t\t\ttypeof (success_data) === \"function\" ? succes" +
                    "s_data : success));\r\n\r\n\t\t\tconst getPostMock =\r\n\t\t\t\t(url_settings: string | JQuer" +
                    "y.UrlAjaxSettings,\r\n\t\t\t\t\tsuccess_data: JQuery.jqXHR.DoneCallback | JQuery.PlainO" +
                    "bject | string,\r\n\t\t\t\t\tdataType_success?: string | JQuery.jqXHR.DoneCallback,\r\n\t\t" +
                    "\t\t\tsuccess?: JQuery.jqXHR.DoneCallback, method?: string) =>\r\n\t\t\t\t{\r\n\t\t\t\t\tconst s" +
                    "ettings =\r\n\t\t\t\t\t\ttypeof (url_settings) === \"string\"\r\n\t\t\t\t\t\t\t? <JQuery.UrlAjaxSet" +
                    "tings>\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tmethod: method || \"get\",\r\n\t\t\t\t\t\t\t\turl: url_settings as" +
                    " string\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t: url_settings;\r\n\r\n\t\t\t\t\treturn createJqueryStubPromise" +
                    "((settings.method || settings.type).toLowerCase(),\r\n\t\t\t\t\t\tsettings.url,\r\n\t\t\t\t\t\tt" +
                    "ypeof (success_data) === \"function\" ? (typeof (dataType_success) === \"string\" ? " +
                    "dataType_success : null) : success_data,\r\n\t\t\t\t\t\ttypeof (success_data) === \"funct" +
                    "ion\" ? success_data : typeof (dataType_success) === \"string\" ? success : dataTyp" +
                    "e_success,\r\n\t\t\t\t\t\tsettings.error)\r\n\t\t\t\t};\r\n\r\n\t\t\tsinon.stub($, \"get\").callsFake((" +
                    "url_settings, success_data, dataType_success, success) =>\r\n\t\t\t\tgetPostMock(url_s" +
                    "ettings, success_data, dataType_success, success, \"get\"));\r\n\t\t\tsinon.stub($, \"po" +
                    "st\").callsFake((url_settings, success_data, dataType_success, success) =>\r\n\t\t\t\tg" +
                    "etPostMock(url_settings, success_data, dataType_success, success, \"post\"));\r\n\t\t}" +
                    "\r\n\t}\r\n\t");
            
            #line 619 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
 
		foreach (var model in models)
		{
	
            
            #line default
            #line hidden
            this.Write(" \r\n\ttype ");
            
            #line 623 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(model.EntityName)));
            
            #line default
            #line hidden
            this.Write("_Forms =\r\n\t\t");
            
            #line 624 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
 foreach (var form in model.Forms) { 
            
            #line default
            #line hidden
            this.Write("\"");
            
            #line 624 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(form.Name)));
            
            #line default
            #line hidden
            this.Write("\" |  ");
            
            #line 624 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("null;\r\n\r\n\texport class ");
            
            #line 626 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(model.EntityName)));
            
            #line default
            #line hidden
            this.Write(" extends CrmEntityModel<");
            
            #line 626 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(model.EntityName)));
            
            #line default
            #line hidden
            this.Write("_Forms>\r\n\t{\r\n\t\tentityName = \"");
            
            #line 628 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(model.EntityName)));
            
            #line default
            #line hidden
            this.Write("\";\r\n\t\tcontext = new Context(<Context>\r\n\t\t\t{\r\n\t\t\t\tuserId: \"");
            
            #line 631 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(model.Context.UserId.ToString())));
            
            #line default
            #line hidden
            this.Write("\",\r\n\t\t\t\tusername: ");
            
            #line 632 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ToLiteral(CheckString(model.Context.Username))));
            
            #line default
            #line hidden
            this.Write(",\r\n\t\t\t\tuserFullName: ");
            
            #line 633 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ToLiteral(CheckString(model.Context.UserFullName))));
            
            #line default
            #line hidden
            this.Write(",\r\n\t\t\t\tisGuidedHelpEnabled: ");
            
            #line 634 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(model.Context.IsGuidedHelpEnabled.ToString().ToLower())));
            
            #line default
            #line hidden
            this.Write(",\r\n\t\t\t\tuserLanguageCode: ");
            
            #line 635 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(model.Context.UserLanguageCode.ToString())));
            
            #line default
            #line hidden
            this.Write(",\r\n\t\t\t\ttimeZoneBias: ");
            
            #line 636 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(model.Context.TimeZoneBias.ToString())));
            
            #line default
            #line hidden
            this.Write(",\r\n\t\t\t\tuserRoles:\r\n\t\t\t\t\t[\r\n\t\t\t");
            
            #line 639 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"

				foreach (var role in model.Context.UserRoles)
				{
			
            
            #line default
            #line hidden
            this.Write("\t\t\t\"");
            
            #line 642 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(role.ToString())));
            
            #line default
            #line hidden
            this.Write("\",\r\n\t\t\t");
            
            #line 643 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"

				}
			
            
            #line default
            #line hidden
            this.Write("\t\t],\r\n\t\t\t\torganisationUrl: \"");
            
            #line 646 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(model.Context.OrganisationUrl)));
            
            #line default
            #line hidden
            this.Write("\",\r\n\t\t\t\tisAutoSaveEnabled: ");
            
            #line 647 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(model.Context.IsAutoSaveEnabled.ToString().ToLower())));
            
            #line default
            #line hidden
            this.Write(",\r\n\t\t\t\torgLanguageCode: ");
            
            #line 648 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(model.Context.OrgLanguageCode.ToString())));
            
            #line default
            #line hidden
            this.Write(",\r\n\t\t\t\torganisationName: \"");
            
            #line 649 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(model.Context.OrganisationName)));
            
            #line default
            #line hidden
            this.Write("\",\r\n\t\t\t\tthemeName: ");
            
            #line 650 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ToLiteral(CheckString(model.Context.ThemeName))));
            
            #line default
            #line hidden
            this.Write(",\r\n\t\t\t\tcrmVersion: \"");
            
            #line 651 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(model.Context.CrmVersion)));
            
            #line default
            #line hidden
            this.Write("\"\r\n\t\t\t});\r\n\t\tcrmAttributes =\r\n\t\t\t[\r\n\t\t\t");
            
            #line 655 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"

				foreach (var attribute in model.CrmAttributes)
				{
			
            
            #line default
            #line hidden
            this.Write("\tnew CrmAttribute(<CrmAttribute>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tattributeType: \"");
            
            #line 660 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(attribute.AttributeType)));
            
            #line default
            #line hidden
            this.Write("\", name: \"");
            
            #line 660 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(attribute.Name)));
            
            #line default
            #line hidden
            this.Write("\", requiredLevel: \"");
            
            #line 660 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(attribute.RequiredLevel, "none")));
            
            #line default
            #line hidden
            this.Write("\", format: \"");
            
            #line 660 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(attribute.Format)));
            
            #line default
            #line hidden
            this.Write("\",\r\n\t\t\t\t\t\tmin: ");
            
            #line 661 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(attribute.Min?.ToString() ?? "null")));
            
            #line default
            #line hidden
            this.Write(", max: ");
            
            #line 661 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(attribute.Max?.ToString() ?? "null")));
            
            #line default
            #line hidden
            this.Write(", precision: ");
            
            #line 661 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(attribute.Precision?.ToString() ?? "null")));
            
            #line default
            #line hidden
            this.Write(",\r\n\t\t\t\t\t\tmaxLength: ");
            
            #line 662 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(attribute.MaxLength?.ToString() ?? "null")));
            
            #line default
            #line hidden
            this.Write(",\r\n\t\t\t\t\t\tdefaultBoolValue: ");
            
            #line 663 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(attribute.DefaultBoolValue?.ToString().ToLower() ?? "null")));
            
            #line default
            #line hidden
            this.Write(", initialValue: ");
            
            #line 663 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(attribute.InitialValue?.ToString() ?? "null")));
            
            #line default
            #line hidden
            this.Write(",\r\n\t\t\t\t\t\toptions: new Map(\r\n\t\t\t\t\t\t\t[\r\n\t\t\t\t");
            
            #line 666 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"

					if (attribute.Options != null) {
					foreach (var option in attribute.Options)
					{
				
            
            #line default
            #line hidden
            this.Write("\t\t\t\t[");
            
            #line 670 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(option.Key.ToString())));
            
            #line default
            #line hidden
            this.Write(",\r\n\t\t\t\t\t\t\t\t\tnew Map(\r\n\t\t\t\t\t\t\t\t\t\t[\r\n\t\t\t\t\t");
            
            #line 673 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"

						foreach (var label in option.Value)
						{
					
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t[");
            
            #line 676 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(label.Key.ToString())));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 676 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ToLiteral(CheckString(label.Value))));
            
            #line default
            #line hidden
            this.Write("]\r\n\t\t\t\t\t");
            
            #line 677 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"

						}
					
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t])\r\n\t\t\t\t\t\t\t\t],\r\n\t\t\t\t");
            
            #line 681 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"

					}
					}
				
            
            #line default
            #line hidden
            this.Write("\t\t\t])\r\n\t\t\t\t\t}),\r\n\t\t\t");
            
            #line 686 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"

				}
			
            
            #line default
            #line hidden
            this.Write("];\r\n\t\tforms =\r\n\t\t\t[\r\n\t\t\t");
            
            #line 691 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"

				foreach (var form in model.Forms)
				{
			
            
            #line default
            #line hidden
            this.Write("\tnew Form(<Form>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tid: \"");
            
            #line 696 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(form.Id)));
            
            #line default
            #line hidden
            this.Write("\", name: \"");
            
            #line 696 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(form.Name)));
            
            #line default
            #line hidden
            this.Write("\",\r\n\t\t\t\t\t\ttabs:\r\n\t\t\t\t\t\t\t[\r\n\t\t\t\t");
            
            #line 699 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"

					foreach (var tab in form.Tabs)
					{
				
            
            #line default
            #line hidden
            this.Write("\t\t\t\tnew Tab(<Tab>\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tid: \"");
            
            #line 704 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(tab.Id)));
            
            #line default
            #line hidden
            this.Write("\", isVisible: ");
            
            #line 704 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(tab.IsVisible.ToString().ToLower())));
            
            #line default
            #line hidden
            this.Write(",\r\n\t\t\t\t\t\t\t\t\t\tlabels: new Map(\r\n\t\t\t\t\t\t\t\t\t\t\t[\r\n\t\t\t\t\t");
            
            #line 707 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"

						foreach (var label in tab.Labels)
						{
					
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t[");
            
            #line 710 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(label.Key));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 710 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ToLiteral(CheckString(label.Value))));
            
            #line default
            #line hidden
            this.Write("],\r\n\t\t\t\t\t");
            
            #line 711 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"

						}
					
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t]),\r\n\t\t\t\t\t\t\t\t\t\tsections:\r\n\t\t\t\t\t\t\t\t\t\t\t[\r\n\t\t\t\t\t\t");
            
            #line 716 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"

							foreach (var section in tab.Sections)
							{
						
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\tnew Section(<Section>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tid: \"");
            
            #line 721 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(section.Id)));
            
            #line default
            #line hidden
            this.Write("\", isVisible: ");
            
            #line 721 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(section.IsVisible.ToString().ToLower())));
            
            #line default
            #line hidden
            this.Write(",\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tlabels: new Map(\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\r\n\t\t\t\t\t\t\t");
            
            #line 724 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"

								foreach (var label in section.Labels)
								{
							
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\t\t[");
            
            #line 727 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(label.Key));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 727 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ToLiteral(CheckString(label.Value))));
            
            #line default
            #line hidden
            this.Write("],\r\n\t\t\t\t\t\t\t");
            
            #line 728 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"

								}
							
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\t]),\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcontrols:\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\r\n\t\t\t\t\t\t\t\t");
            
            #line 733 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"

									foreach (var control in section.Controls.OfType<FieldControl>())
									{
								
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\tnew FieldControl(<FieldControl>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tna" +
                    "me: \"");
            
            #line 738 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(control.Name)));
            
            #line default
            #line hidden
            this.Write("\", isVisible: ");
            
            #line 738 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(control.IsVisible.ToString().ToLower())));
            
            #line default
            #line hidden
            this.Write(", isDisabled: ");
            
            #line 738 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(control.IsDisabled.ToString().ToLower())));
            
            #line default
            #line hidden
            this.Write(",\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlabels: new Map(\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\r\n\t\t\t\t\t\t\t\t\t");
            
            #line 741 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"

										foreach (var label in control.Labels)
										{
									
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\t\t\t\t[");
            
            #line 744 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(label.Key));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 744 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ToLiteral(CheckString(label.Value))));
            
            #line default
            #line hidden
            this.Write("],\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t])\r\n\t\t\t\t\t\t\t\t\t");
            
            #line 746 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"

										}
									
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\t}),\r\n\t\t\t\t\t\t\t\t");
            
            #line 749 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"

									}
								
            
            #line default
            #line hidden
            
            #line 751 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"

									foreach (var control in section.Controls.OfType<GridControl>())
									{
								
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\tnew GridControl(<GridControl>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tname" +
                    ": \"");
            
            #line 756 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(control.Name)));
            
            #line default
            #line hidden
            this.Write("\", isVisible: ");
            
            #line 756 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(control.IsVisible.ToString().ToLower())));
            
            #line default
            #line hidden
            this.Write(",\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlabels: new Map(\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\r\n\t\t\t\t\t\t\t\t\t");
            
            #line 759 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"

										foreach (var label in control.Labels)
										{
									
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\t\t\t\t[");
            
            #line 762 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(label.Key));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 762 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ToLiteral(CheckString(label.Value))));
            
            #line default
            #line hidden
            this.Write("],\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t])\r\n\t\t\t\t\t\t\t\t\t");
            
            #line 764 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"

										}
									
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\t}),\r\n\t\t\t\t\t\t\t\t");
            
            #line 767 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"

									}
								
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t}),\r\n\t\t\t\t\t\t");
            
            #line 771 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"

							}
						
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t]\r\n\t\t\t\t\t\t\t\t\t}),\r\n\t\t\t\t");
            
            #line 775 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"

					}
				
            
            #line default
            #line hidden
            this.Write("\t\t\t]\r\n\t\t\t\t\t}),\r\n\t\t\t");
            
            #line 779 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"

				}
			
            
            #line default
            #line hidden
            this.Write("];\r\n\t}\r\n");
            
            #line 783 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"

		}

            
            #line default
            #line hidden
            this.Write("}\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 786 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"

    // Credit :http://stackoverflow.com/questions/323640/can-i-convert-a-c-sharp-string-value-to-an-escaped-string-literal
    private static string ToLiteral(string input)
    {
        using (var writer = new StringWriter())
        {
            using (var provider = CodeDomProvider.CreateProvider("CSharp"))
            {
                provider.GenerateCodeFromExpression(new CodePrimitiveExpression(input), writer, null);
                return writer.ToString();
            }
        }
    }

	public string CheckString(string value, string defaultValue = "null")
	{
		return value ?? defaultValue;
	}

        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public class XrmMockGeneratorTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
