// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Yagasoft.XrmMockGenerator
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System.CodeDom;
    using System.CodeDom.Compiler;
    using System.IO;
    using Yagasoft.XrmMockGenerator.Model;
    using Yagasoft.XrmMockGenerator.Model.Control;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class XrmMockGeneratorTemplate : XrmMockGeneratorTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write(@"import { UserSettingsMock, EntityMock, ContextMock, IContextComponents, ClientContextMock, IXrmGeneratorComponents, XrmMockGenerator, IEntityComponents, ItemCollectionMock, UiMock, FormSelectorMock, FormItemMock, ControlMock, OptionSetValueMock, IUiComponents, IOptionSetAttributeComponents, OptionSetAttributeMock, IDateAttributeComponents, INumberAttributeComponents, NumberAttributeMock, ILookupAttributeComponents, LookupAttributeMock, StringAttributeMock, IStringAttributeComponents, DateAttributeMock, IBooleanAttributeComponents, BooleanAttributeMock } from ""xrm-mock"";

");
            
            #line 13 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
 if(templateModel.IsGenerateOnlineCode == true) { 
            
            #line default
            #line hidden
            this.Write(@"import { CrmService, CrmConnectionConfig } from ""node-dcrm-service"";
import * as sinon from ""sinon"";

var jsdom = require(""jsdom"");
const { JSDOM } = jsdom;
const { window } = new JSDOM();
const { document } = (new JSDOM('')).window;
global[""document""] = document;
global[""$""] = global[""jQuery""] = require(""jquery"")(window);
");
            
            #line 23 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n\r\n/**\r\n * Model generated by the \"xrm-mock Generator\" tool available in the Xrm" +
                    "ToolBox or as the NuGet package \"xrm-mock-Generator\"\r\n */\r\nexport namespace XrmM" +
                    "odel\r\n{\r\n\tabstract class CrmEntityModel<TFormNames>\r\n\t{\r\n\t\tabstract entityName: " +
                    "string;\r\n\t\tabstract context: Context;\r\n\t\tabstract crmAttributes: CrmAttribute[];" +
                    "\r\n\t\tabstract forms: Form[];\r\n\t\tactiveForm: TFormNames;\r\n\t}\r\n\r\n\tinterface IHasId " +
                    "{ id: string; }\r\n\tinterface IHasLabels { labels: Map<number, string>; }\r\n\tinterf" +
                    "ace ICanVisible { isVisible: boolean; }\r\n\tinterface ICanDisabled { isDisabled: b" +
                    "oolean; }\r\n\r\n\tclass Form implements IHasId\r\n\t{\r\n\t\tid: string;\r\n\t\tname: string;\r\n" +
                    "\t\ttabs: Tab[];\r\n\r\n\t\tconstructor(obj: Form)\r\n\t\t{\r\n\t\t\tObject.assign<Form, Form>(th" +
                    "is, obj);\r\n\t\t}\r\n\t}\r\n\r\n\tclass Tab implements IHasId, IHasLabels, ICanVisible\r\n\t{\r" +
                    "\n\t\tid: string;\r\n\t\tlabels: Map<number, string>;\r\n\t\tisVisible: boolean;\r\n\t\tsection" +
                    "s: Section[];\r\n\r\n\t\tconstructor(obj: Tab)\r\n\t\t{\r\n\t\t\tObject.assign<Tab, Tab>(this, " +
                    "obj);\r\n\t\t}\r\n\t}\r\n\r\n\tclass Section implements IHasId, IHasLabels, ICanVisible\r\n\t{\r" +
                    "\n\t\tid: string;\r\n\t\tlabels: Map<number, string>;\r\n\t\tisVisible: boolean;\r\n\t\tcontrol" +
                    "s: Control[];\r\n\r\n\t\tconstructor(obj: Section)\r\n\t\t{\r\n\t\t\tObject.assign<Section, Sec" +
                    "tion>(this, obj);\r\n\t\t}\r\n\t}\r\n\r\n\tclass CrmAttribute\r\n\t{\r\n\t\tattributeType: string;\r" +
                    "\n\t\tname: string;\r\n\t\trequiredLevel: string;\r\n\t\tformat: string;\r\n\t\toptions: Map<nu" +
                    "mber, Map<number, string>>;\r\n\t\tmin: number;\r\n\t\tmax: number;\r\n\t\tprecision: number" +
                    ";\r\n\t\tmaxLength: number;\r\n\t\tdefaultBoolValue: boolean;\r\n\t\tinitialValue: number;\r\n" +
                    "        \r\n\t\tconstructor(obj: CrmAttribute)\r\n\t\t{\r\n\t\t\tObject.assign<CrmAttribute, " +
                    "CrmAttribute>(this, obj);\r\n\t\t}\r\n\t}\r\n\r\n\tabstract class Control implements IHasLab" +
                    "els, ICanVisible\r\n\t{\r\n\t\tname: string;\r\n\t\tlabels: Map<number, string>;\r\n\t\tisVisib" +
                    "le: boolean;\r\n\r\n\t\tconstructor(obj: Control)\r\n\t\t{\r\n\t\t\tObject.assign<Control, Cont" +
                    "rol>(this, obj);\r\n\t\t}\r\n\t}\r\n\r\n\tclass FieldControl extends Control implements ICan" +
                    "Disabled\r\n\t{\r\n\t\tisDisabled: boolean;\r\n\r\n\t\tconstructor(obj: FieldControl)\r\n\t\t{\r\n\t" +
                    "\t\tsuper(obj);\r\n\t\t\tObject.assign<FieldControl, FieldControl>(this, obj);\r\n\t\t}\r\n\t}" +
                    "\r\n\r\n\tclass GridControl extends Control\r\n\t{\r\n\t\tconstructor(obj: GridControl)\r\n\t\t{" +
                    "\r\n\t\t\tsuper(obj);\r\n\t\t\tObject.assign<GridControl, GridControl>(this, obj);\r\n\t\t}\r\n\t" +
                    "}\r\n\r\n\tclass Context\r\n\t{ \r\n\t\tuserId: string;\r\n\t\tusername: string;\r\n\t\tuserFullName" +
                    ": string;\r\n\t\tisGuidedHelpEnabled: boolean;\r\n\t\tuserLanguageCode: number;\r\n\t\ttimeZ" +
                    "oneBias: number;\r\n\t\tuserRoles: string[];\r\n\t\torganisationUrl: string;\r\n\t\tisAutoSa" +
                    "veEnabled: boolean;\r\n\t\torgLanguageCode: number;\r\n\t\torganisationName: string;\r\n\t\t" +
                    "themeName: string;\r\n\t\tcrmVersion: string;\r\n\r\n\t\tconstructor(obj: Context)\r\n\t\t{\r\n\t" +
                    "\t\tObject.assign<Context, Context>(this, obj);\r\n\t\t}\r\n\t}\r\n\r\n\texport class ContextP" +
                    "arams\r\n\t{\r\n\t\tclient: Xrm.Client;\r\n\t\tclientState: Xrm.ClientState;\r\n\t\tuserSetting" +
                    "s: UserSettingsMock;\r\n\t}\r\n\r\n\texport class ModelBuilder<TEntity extends CrmEntity" +
                    "Model<string>>\r\n\t{\r\n\t\tprivate recordId: string;\r\n\t\tprivate entity: EntityMock;\r\n" +
                    "\t\tprivate context: ContextMock;\r\n\t\tprivate ui: UiMock;\r\n\t\tprivate attributes: Xr" +
                    "m.Attributes.Attribute[] = [];\r\n\t\tprivate form: Form;\r\n\r\n\t\tprivate formType: Xrm" +
                    "Enum.FormType\r\n\t\tprivate isBuilt: boolean;\r\n\r\n");
            
            #line 176 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
 if(templateModel.IsGenerateOnlineCode == true) { 
            
            #line default
            #line hidden
            this.Write("\t\tprivate crmService: CrmService\r\n");
            
            #line 178 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("    \r\n\t\tconstructor(private rawModel: TEntity, recordId: string = \"00000000-0000-" +
                    "0000-0000-000000000000\")\r\n\t\t{\r\n\t\t\tthis.recordId = recordId;\r\n\t\t\tthis.form = this" +
                    ".rawModel.forms.find(form => true);\r\n\t\t}\r\n\r\n\t\tselectForm(formName: TEntity[\"acti" +
                    "veForm\"])\r\n\t\t{\r\n\t\t\tif (this.isBuilt)\r\n\t\t\t{\r\n\t\t\t\tthrow new Error(\"Model already b" +
                    "uilt.\");\r\n\t\t\t}\r\n\r\n\t\t\tthis.form = this.rawModel.forms.find(form => form.name === " +
                    "formName);\r\n\t\t}\r\n\r\n\t\tbuildContext(parameters_url?: ContextMock | ContextParams |" +
                    " string, url?: string)\r\n\t\t{\r\n\t\t\tif (this.isBuilt)\r\n\t\t\t{\r\n\t\t\t\tthrow new Error(\"Mo" +
                    "del already built.\");\r\n\t\t\t}\r\n\r\n\t\t\tconst rawContext = this.rawModel.context;\r\n\r\n\t" +
                    "\t\tif (parameters_url == null || typeof(parameters_url) === \"string\")\r\n\t\t\t{\r\n\t\t\t\t" +
                    "this.context = new ContextMock(<IContextComponents>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tclientContext" +
                    ": new ClientContextMock(\"Web\", \"Online\"),\r\n\t\t\t\t\t\tuserSettings: new UserSettingsM" +
                    "ock(\r\n\t\t\t\t\t\t\t<UserSettingsMock>\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tisGuidedHelpEnabled: rawConte" +
                    "xt.isGuidedHelpEnabled,\r\n\t\t\t\t\t\t\t\tisHighContrastEnabled: false,\r\n\t\t\t\t\t\t\t\tisRTL: f" +
                    "alse,\r\n\t\t\t\t\t\t\t\tuserId: rawContext.userId,\r\n\t\t\t\t\t\t\t\tuserName: rawContext.username" +
                    ",\r\n\t\t\t\t\t\t\t\tlanguageId: rawContext.userLanguageCode,\r\n\t\t\t\t\t\t\t\tsecurityRoles: rawC" +
                    "ontext.userRoles\r\n\t\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tclientUrl: rawContext.organisationUrl || par" +
                    "ameters_url,\r\n\t\t\t\t\t\tcurrentTheme: rawContext.themeName,\r\n\t\t\t\t\t\tisAutoSaveEnabled" +
                    ": rawContext.isAutoSaveEnabled,\r\n\t\t\t\t\t\torgLcid: rawContext.orgLanguageCode,\r\n\t\t\t" +
                    "\t\t\torgUniqueName: rawContext.organisationName,\r\n\t\t\t\t\t\ttimeZoneOffset: rawContext" +
                    ".timeZoneBias,\r\n\t\t\t\t\t\tuserId: rawContext.userId,\r\n\t\t\t\t\t\tuserLcid: rawContext.use" +
                    "rLanguageCode,\r\n\t\t\t\t\t\tuserName: rawContext.userFullName,\r\n\t\t\t\t\t\tuserRoles: rawCo" +
                    "ntext.userRoles,\r\n\t\t\t\t\t\tversion: rawContext.crmVersion\r\n\t\t\t\t\t});\r\n\t\t\t}\r\n\t\t\telse " +
                    "if (parameters_url instanceof ContextMock)\r\n\t\t\t{\r\n\t\t\t\tthis.context = parameters_" +
                    "url;\r\n\t\t\t}\r\n\t\t\telse if (parameters_url instanceof ContextParams)\r\n\t\t\t{\r\n\t\t\t\tcons" +
                    "t parameters = <ContextParams>parameters_url;\r\n\r\n\t\t\t\tthis.context = new ContextM" +
                    "ock(<IContextComponents>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tclientContext: new ClientContextMock(par" +
                    "ameters.client, parameters.clientState),\r\n\t\t\t\t\t\tuserSettings: parameters.userSet" +
                    "tings,\r\n\t\t\t\t\t\tclientUrl: rawContext.organisationUrl || url,\r\n\t\t\t\t\t\tcurrentTheme:" +
                    " rawContext.themeName,\r\n\t\t\t\t\t\tisAutoSaveEnabled: rawContext.isAutoSaveEnabled,\r\n" +
                    "\t\t\t\t\t\torgLcid: rawContext.orgLanguageCode,\r\n\t\t\t\t\t\torgUniqueName: rawContext.orga" +
                    "nisationName,\r\n\t\t\t\t\t\ttimeZoneOffset: rawContext.timeZoneBias,\r\n\t\t\t\t\t\tuserId: par" +
                    "ameters.userSettings.userId,\r\n\t\t\t\t\t\tuserLcid: parameters.userSettings.languageId" +
                    ",\r\n\t\t\t\t\t\tuserName: parameters.userSettings.userName,\r\n\t\t\t\t\t\tuserRoles: parameter" +
                    "s.userSettings.securityRoles,\r\n\t\t\t\t\t\tversion: rawContext.crmVersion\r\n\t\t\t\t\t});\r\n\t" +
                    "\t\t}\r\n\t\t}\r\n\r\n\t\tbuildModel(): void\r\n\t\t{\r\n\t\t\tif (this.isBuilt)\r\n\t\t\t{\r\n\t\t\t\tthrow new" +
                    " Error(\"Model already built.\");\r\n\t\t\t}\r\n\r\n\t\t\tif (this.context == null)\r\n\t\t\t{\r\n\t\t\t" +
                    "\tthis.buildContext();\r\n\t\t\t}\r\n\r\n\t\t\tthis.buildAttributes();\r\n\t\t\tthis.buildEntity()" +
                    ";\r\n\t\t\tthis.buildUi();\r\n\r\n\t\t\tXrmMockGenerator.initialise(<IXrmGeneratorComponents" +
                    ">\r\n\t\t\t\t{\r\n\t\t\t\t\tentity: this.entity,\r\n\t\t\t\t\tui: this.ui,\r\n\t\t\t\t\tcontext: this.conte" +
                    "xt,\r\n\t\t\t\t\tprocess: null\r\n\t\t\t\t});\r\n\r\n\t\t\tthis.buildTabs();\r\n\r\n\t\t\tthis.isBuilt = tr" +
                    "ue;\r\n\t\t}\r\n\r\n");
            
            #line 290 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
 if(templateModel.IsGenerateOnlineCode == true) { 
            
            #line default
            #line hidden
            this.Write(@"		enableOnlineWebApi(config: CrmConnectionConfig): Promise<CrmService>
		{
			if (!this.isBuilt)
			{
				throw new Error(""Model must be built first before enabling online connection."");
			}

			this.crmService = new CrmService(config);

			this.setupXrmWebApiMocks();
			this.setupJqueryMocks(config);

			return this.crmService.initialise().then(e => this.crmService);
		}
 ");
            
            #line 305 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("   \r\n\t\tprivate buildAttributes(): void\r\n\t\t{\r\n\t\t\tfor (const attribute of this.rawM" +
                    "odel.crmAttributes)\r\n\t\t\t{\r\n\t\t\t\tconst attributeType = attribute.attributeType;\r\n\t" +
                    "\t\t\tconst params =\r\n\t\t\t\t{\r\n\t\t\t\t\tname: attribute.name,\r\n\t\t\t\t\tattributeType: attrib" +
                    "ute.attributeType,\r\n\t\t\t\t\trequiredLevel: attribute.requiredLevel,\r\n\t\t\t\t\tformat: a" +
                    "ttribute.format\r\n\t\t\t\t};\r\n\t\t\t\tlet attributeMock;\r\n\r\n\t\t\t\tswitch (attributeType)\r\n\t" +
                    "\t\t\t{\r\n\t\t\t\t\tcase \"optionset\":\r\n\t\t\t\t\t\tconst optionsMock: OptionSetValueMock[] = []" +
                    "\r\n\t\t\t\t\t\tattribute.options.forEach((value, key) => { optionsMock.push(new OptionS" +
                    "etValueMock(value.get(this.context.userLcid), key)) });\r\n\t\t\t\t\t\tconst optionSetPa" +
                    "rams = <IOptionSetAttributeComponents>params;\r\n\t\t\t\t\t\toptionSetParams.options = o" +
                    "ptionsMock;\r\n\t\t\t\t\t\toptionSetParams.initialValue = attribute.initialValue;\r\n\t\t\t\t\t" +
                    "\tattributeMock = new OptionSetAttributeMock(optionSetParams);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t" +
                    "\t\tcase \"datetime\":\r\n\t\t\t\t\t\tattributeMock = new DateAttributeMock(<IDateAttributeC" +
                    "omponents>params);\r\n\t\t\t\t\tcase \"integer\":\r\n\t\t\t\t\tcase \"double\":\r\n\t\t\t\t\tcase \"decima" +
                    "l\":\r\n\t\t\t\t\tcase \"money\":\r\n\t\t\t\t\t\tconst numberParams = <INumberAttributeComponents>" +
                    "params;\r\n\t\t\t\t\t\tnumberParams.min = attribute.min;\r\n\t\t\t\t\t\tnumberParams.max = attri" +
                    "bute.max;\r\n\t\t\t\t\t\tnumberParams.precision = attribute.precision;\r\n\t\t\t\t\t\tattributeM" +
                    "ock = new NumberAttributeMock(numberParams);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"lookup\":\r" +
                    "\n\t\t\t\t\t\tconst lookupParams = <ILookupAttributeComponents>params;\r\n\t\t\t\t\t\tlookupPar" +
                    "ams.isPartyList = null;\r\n\t\t\t\t\t\tattributeMock = new LookupAttributeMock(lookupPar" +
                    "ams);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"string\":\r\n\t\t\t\t\tcase \"memo\":\r\n\t\t\t\t\t\tconst stringP" +
                    "arams = <IStringAttributeComponents>params;\r\n\t\t\t\t\t\tstringParams.maxLength = attr" +
                    "ibute.maxLength;\r\n\t\t\t\t\t\tattributeMock = new StringAttributeMock(stringParams);\r\n" +
                    "\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"boolean\":\r\n\t\t\t\t\t\tconst booleanParams = <IBooleanAttribu" +
                    "teComponents>params;\r\n\t\t\t\t\t\tbooleanParams.initialValue = attribute.defaultBoolVa" +
                    "lue;\r\n\t\t\t\t\t\tattributeMock = new BooleanAttributeMock(booleanParams);\r\n\t\t\t\t\t\tbrea" +
                    "k;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tconsole.log(`WARNING: Adding attribute \'${attribute.nam" +
                    "e}\' as String attribute due to unsupported \'${attributeType}\' type.`);\r\n\t\t\t\t\t\tco" +
                    "nst defaultParams = <IStringAttributeComponents>params;\r\n\t\t\t\t\t\tattributeMock = n" +
                    "ew StringAttributeMock(defaultParams);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.attributes.push(attrib" +
                    "uteMock);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tprivate buildEntity(): void\r\n\t\t{\r\n\t\t\tthis.entity = new" +
                    " EntityMock(<IEntityComponents>\r\n\t\t\t\t{\r\n\t\t\t\t\tentityName: `${this.rawModel.entity" +
                    "Name}`,\r\n\t\t\t\t\tid: `{${this.recordId}}`,\r\n\t\t\t\t\tattributes: new ItemCollectionMock" +
                    "<Xrm.Attributes.Attribute>(this.attributes)\r\n\t\t\t\t});\r\n\t\t}\r\n\r\n\t\tprivate buildUi()" +
                    ": void\r\n\t\t{\r\n\t\t\tthis.ui = new UiMock(<IUiComponents>\r\n\t\t\t\t{\r\n\t\t\t\t\tformSelector: " +
                    "new FormSelectorMock(new ItemCollectionMock<FormItemMock>(\r\n\t\t\t\t\t\tthis.rawModel." +
                    "forms.map(form =>\r\n\t\t\t\t\t\t\tnew FormItemMock(\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tcurrentItem: fo" +
                    "rm.id === this.form.id,\r\n\t\t\t\t\t\t\t\t\tformType: this.formType,\r\n\t\t\t\t\t\t\t\t\tid: form.id" +
                    ",\r\n\t\t\t\t\t\t\t\t\tlabel: form.name,\r\n\t\t\t\t\t\t\t\t}))))\r\n\t\t\t\t});\r\n\t\t}\r\n\r\n\t\tprivate buildTab" +
                    "s(): void\r\n\t\t{\r\n\t\t\tfor (const tab of this.form.tabs) \r\n\t\t\t{\r\n\t\t\t\tXrmMockGenerato" +
                    "r.Tab.createTab(tab.id, tab.labels.get(this.context.userLcid), tab.isVisible, \"c" +
                    "ollapsed\", null,\r\n\t\t\t\t\tnew ItemCollectionMock<Xrm.Controls.Section>(this.buildSe" +
                    "ctions(tab)));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tprivate buildSections(tab: Tab): Xrm.Controls.Sec" +
                    "tion[]\r\n\t\t{\r\n\t\t\tconst sections: Xrm.Controls.Section[] = [];\r\n\r\n\t\t\tfor (const se" +
                    "ction of tab.sections)\r\n\t\t\t{\r\n\t\t\t\tsections.push(\r\n\t\t\t\t\tXrmMockGenerator.Section." +
                    "createSection(section.id, section.labels.get(this.context.userLcid), section.isV" +
                    "isible, null,\r\n\t\t\t\t\t\tnew ItemCollectionMock<Xrm.Controls.Control>(this.buildCont" +
                    "rols(section))));\r\n\t\t\t}\r\n\r\n\t\t\treturn sections;\r\n\t\t}\r\n\r\n\t\tprivate buildControls(s" +
                    "ection: Section): Xrm.Controls.Control[]\r\n\t\t{\r\n\t\t\tconst controls: Xrm.Controls.C" +
                    "ontrol[] = [];\r\n\r\n\t\t\tfor (const control of section.controls)\r\n\t\t\t{\r\n\t\t\t\tconst co" +
                    "ntrolParams: any = { name: control.name, label: control.labels.get(this.context." +
                    "userLcid), visible: control.isVisible };\r\n\t\t\t\tlet controlMock: ControlMock;\r\n\r\n\t" +
                    "\t\t\tif (control instanceof GridControl)\r\n\t\t\t\t{\r\n\t\t\t\t\tcontrolParams.entityName = t" +
                    "his.entity;\r\n\t\t\t\t\tcontrolMock = XrmMockGenerator.Control.createGrid(controlParam" +
                    "s);\r\n\t\t\t\t}\r\n\t\t\t\telse if (control instanceof FieldControl)\r\n\t\t\t\t{\r\n\t\t\t\t\tconst att" +
                    "ribute = this.attributes.find(attribute => attribute.getName() === control.name)" +
                    ";\r\n\r\n\t\t\t\t\tconst missingAttributeMessage = `WARNING: Skipped adding control \'${co" +
                    "ntrol.name}\' due to missing attribute.`;\r\n\r\n\t\t\t\t\tif (!attribute)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t" +
                    "console.log(missingAttributeMessage);\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tcontrolPa" +
                    "rams.attribute = attribute;\r\n\r\n\t\t\t\t\tconst fieldcontrol = <FieldControl>control;\r" +
                    "\n\t\t\t\t\tcontrolParams.disabled = fieldcontrol.isDisabled\r\n\r\n\t\t\t\t\tconst rawAttribut" +
                    "e = this.rawModel.crmAttributes.find(attribute => attribute.name === control.nam" +
                    "e);\r\n\r\n\t\t\t\t\tif (!rawAttribute)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconsole.log(missingAttributeMessag" +
                    "e);\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tconst attributeType = rawAttribute.attribut" +
                    "eType;\r\n\r\n\t\t\t\t\tswitch (attributeType)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcase \"optionset\":\r\n\t\t\t\t\t\t\tc" +
                    "onst optionsMock: OptionSetValueMock[] = []\r\n\t\t\t\t\t\t\trawAttribute.options.forEach" +
                    "((value, key) => { optionsMock.push(new OptionSetValueMock(value.get(this.contex" +
                    "t.userLcid), key)) });\r\n\t\t\t\t\t\t\tcontrolParams.options = optionsMock;\r\n\t\t\t\t\t\t\tcont" +
                    "rolMock = XrmMockGenerator.Control.createOptionSet(controlParams);\r\n\t\t\t\t\t\t\tbreak" +
                    ";\r\n\t\t\t\t\t\tcase \"datetime\":\r\n\t\t\t\t\t\t\tcontrolParams.showTime = attribute.getFormat()" +
                    " === \"datetime\";\r\n\t\t\t\t\t\t\tcontrolMock = XrmMockGenerator.Control.createDate(contr" +
                    "olParams);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"integer\":\r\n\t\t\t\t\t\tcase \"double\":\r\n\t\t\t\t\t\tca" +
                    "se \"decimal\":\r\n\t\t\t\t\t\tcase \"money\":\r\n\t\t\t\t\t\t\tcontrolMock = XrmMockGenerator.Contro" +
                    "l.createNumber(controlParams);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"lookup\":\r\n\t\t\t\t\t\t\tcont" +
                    "rolMock = XrmMockGenerator.Control.createLookup(controlParams);\r\n\t\t\t\t\t\t\tbreak;\r\n" +
                    "\t\t\t\t\t\tcase \"string\":\r\n\t\t\t\t\t\tcase \"memo\":\r\n\t\t\t\t\t\t\tcontrolMock = XrmMockGenerator." +
                    "Control.createString(controlParams);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"boolean\":\r\n\t\t\t\t" +
                    "\t\t\tcontrolMock = XrmMockGenerator.Control.createBoolean(controlParams);\r\n\t\t\t\t\t\t\t" +
                    "break;\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\tconsole.log(`WARNING: Adding control \'${control.n" +
                    "ame}\' as String control due to unsupported \'${attributeType}\' type.`);\r\n\t\t\t\t\t\t\tc" +
                    "ontrolMock = XrmMockGenerator.Control.createString(controlParams);\r\n\t\t\t\t\t}\r\n\t\t\t\t" +
                    "}\r\n\r\n\t\t\t\tcontrols.push(controlMock);\r\n\t\t\t}\r\n\r\n\t\t\treturn controls;\r\n\t\t}\r\n\r\n");
            
            #line 499 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
 if(templateModel.IsGenerateOnlineCode == true) { 
            
            #line default
            #line hidden
            this.Write("\t\tprivate retrieveEntityWebApiName =\r\n\t\t\t(logicalName: string): Promise<string> =" +
                    ">\r\n\t\t\t\t<any> this.crmService.get(`EntityDefinitions(LogicalName=\'${logicalName}\'" +
                    ")?$select=LogicalCollectionName`)\r\n\t\t\t\t\t.then(e => e.body.LogicalCollectionName)" +
                    ";\r\n\r\n\t\tprivate setupXrmWebApiMocks()\r\n\t\t{\r\n\t\t\tsinon.stub(Xrm.WebApi, \"createReco" +
                    "rd\").callsFake((entityLogicalName: string, data: any) => <any> this.retrieveEnti" +
                    "tyWebApiName(entityLogicalName)\r\n\t\t\t\t.then(webApiName => this.crmService.post(`$" +
                    "{webApiName}`, data)\r\n\t\t\t\t\t.then(e => new RegExp(`${webApiName}\\\\((.*?)\\\\)`).exe" +
                    "c(e.headers[\"odata-entityid\"])[1])));\r\n\t\t\tsinon.stub(Xrm.WebApi, \"updateRecord\")" +
                    ".callsFake((entityLogicalName: string, id: string, data: any) => <any> this.retr" +
                    "ieveEntityWebApiName(entityLogicalName)\r\n\t\t\t\t.then(webApiName => this.crmService" +
                    ".patch(`${webApiName}(${id})`, data)\r\n\t\t\t\t\t.then(e => new RegExp(`${webApiName}\\" +
                    "\\((.*?)\\\\)`).exec(e.headers[\"odata-entityid\"])[1])));\r\n\t\t\tsinon.stub(Xrm.WebApi," +
                    " \"deleteRecord\").callsFake((entityLogicalName: string, id: string) => <any> this" +
                    ".retrieveEntityWebApiName(entityLogicalName)\r\n\t\t\t\t.then(webApiName => this.crmSe" +
                    "rvice.delete(`${webApiName}(${id})`)\r\n\t\t\t\t\t.then(e => id)));\r\n\t\t\tsinon.stub(Xrm." +
                    "WebApi, \"retrieveRecord\").callsFake((entityLogicalName: string, id: string, opti" +
                    "ons?: string) => <any> this.retrieveEntityWebApiName(entityLogicalName)\r\n\t\t\t\t.th" +
                    "en(webApiName => this.crmService.get(`${webApiName}(${id})${options}`)\r\n\t\t\t\t\t.th" +
                    "en(e => e.body)));\r\n\t\t\tsinon.stub(Xrm.WebApi, \"retrieveMultipleRecords\").callsFa" +
                    "ke((entityLogicalName: string, options?: string, maxPageSize?: number) => <any> " +
                    "this.retrieveEntityWebApiName(entityLogicalName)\r\n\t\t\t\t.then(webApiName => this.c" +
                    "rmService.get(`${webApiName}${options}`, new Map<string, string>([[\"Prefer\", `od" +
                    "ata.maxpagesize=${maxPageSize ? maxPageSize : 5000}`]]))\r\n\t\t\t\t\t.then(e => <Xrm.R" +
                    "etrieveMultipleResult>{ entities: e.body.value, nextLink: e.body[\"@odata.nextLin" +
                    "k\"] })));\r\n\t\t}\r\n\r\n\t\tprivate setupJqueryMocks(config: CrmConnectionConfig)\r\n\t\t{\r\n" +
                    "\t\t\tconst createJqueryStubPromise =\r\n\t\t\t\t(method, url, data?, successCallback?, e" +
                    "rrorCallback?): any =>\r\n\t\t\t\t{\r\n\t\t\t\t\tconst deferred = $.Deferred();\r\n\r\n\t\t\t\t\tlet d" +
                    "ataProcessed;\r\n\r\n\t\t\t\t\tif (data)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdataProcessed = (data as string) " +
                    "? JSON.parse(<string>data) : data;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tvar processedUrl = url.replac" +
                    "e(config.baseUrl, \'\').replace(config.urlPrefix, \'\').replace(/^\\/+|\\/+$/g, \'\');\r\n" +
                    "\r\n\t\t\t\t\tthis.crmService[method](processedUrl, dataProcessed)\r\n\t\t\t\t\t\t.then(e =>\r\n\t" +
                    "\t\t\t\t\t{\r\n\t\t\t\t\t\t\tconst xhr =\r\n\t\t\t\t\t\t\t\t<JQuery.jqXHR>\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tstatus: " +
                    "e.statusCode, statusText: e.statusCodeMessage,\r\n\t\t\t\t\t\t\t\t\tgetResponseHeader: name" +
                    " => e.headers[name.toLowerCase()]\r\n\t\t\t\t\t\t\t\t};\r\n\r\n\t\t\t\t\t\t\tif (successCallback)\r\n\t\t" +
                    "\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t(<any>successCallback)(e.body, \"success\", xhr);\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t" +
                    "\t\t\t\tdeferred.resolve(e.body, \"success\", xhr);\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t.catch(e =>\r\n\t\t\t\t" +
                    "\t\t{\r\n\t\t\t\t\t\t\tlet errorObject;\r\n\r\n\t\t\t\t\t\t\ttry \r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\terrorObject = JSO" +
                    "N.parse(e.text)\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tcatch { }\r\n\r\n\t\t\t\t\t\t\tconst xhr =\r\n\t\t\t\t\t\t\t\t<JQue" +
                    "ry.jqXHR>\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tstatus: e.statusCode, statusText: e.statusCodeMes" +
                    "sage,\r\n\t\t\t\t\t\t\t\t\tresponseText: e.text, responseJSON: errorObject,\r\n\t\t\t\t\t\t\t\t\tgetRe" +
                    "sponseHeader: name => e.headers[name.toLowerCase()]\r\n\t\t\t\t\t\t\t\t};\r\n\r\n\t\t\t\t\t\t\tif (er" +
                    "rorCallback)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t(<any>errorCallback)(xhr, \"error\", e.statusCodeM" +
                    "essage);\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tdeferred.reject(xhr, \"error\", e.statusCodeMessage);" +
                    "\r\n\t\t\t\t\t\t});\r\n\r\n\r\n\t\t\t\t\treturn deferred.promise();\r\n\t\t\t\t};\r\n\r\n\t\t\tsinon.stub($, \"aj" +
                    "ax\").callsFake(\r\n\t\t\t// @ts-ignore\r\n\t\t\t\t(ajaxSettings_url: string | JQuery.AjaxSe" +
                    "ttings, ajaxSettings: JQuery.AjaxSettings) =>\r\n\t\t\t\t{\r\n\t\t\t\t\tif (typeof (ajaxSetti" +
                    "ngs_url) === \"string\")\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tajaxSettings.url = ajaxSettings_url;\r\n\t\t\t\t" +
                    "\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tajaxSettings = ajaxSettings_url;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tre" +
                    "turn createJqueryStubPromise((ajaxSettings.method || ajaxSettings.type).toLowerC" +
                    "ase(),\r\n\t\t\t\t\t\tajaxSettings.url, ajaxSettings.data, ajaxSettings.success, ajaxSet" +
                    "tings.error)\r\n\t\t\t\t});\r\n\r\n\t\t\t// @ts-ignore\r\n\t\t\tsinon.stub($, \"getJSON\").callsFake" +
                    "((url: string,\r\n\t\t\t\tsuccess_data: JQuery.jqXHR.DoneCallback | JQuery.PlainObject" +
                    " | string,\r\n\t\t\t\tsuccess: JQuery.jqXHR.DoneCallback) =>\r\n\t\t\t\tcreateJqueryStubProm" +
                    "ise(\"get\", url,\r\n\t\t\t\t\ttypeof (success_data) === \"function\" ? null : success_data" +
                    ",\r\n\t\t\t\t\ttypeof (success_data) === \"function\" ? success_data : success));\r\n\r\n\t\t\tc" +
                    "onst getPostMock =\r\n\t\t\t\t(url_settings: string | JQuery.UrlAjaxSettings,\r\n\t\t\t\t\tsu" +
                    "ccess_data: JQuery.jqXHR.DoneCallback | JQuery.PlainObject | string,\r\n\t\t\t\t\tdataT" +
                    "ype_success?: string | JQuery.jqXHR.DoneCallback,\r\n\t\t\t\t\tsuccess?: JQuery.jqXHR.D" +
                    "oneCallback, method?: string) =>\r\n\t\t\t\t{\r\n\t\t\t\t\tconst settings =\r\n\t\t\t\t\t\ttypeof (ur" +
                    "l_settings) === \"string\"\r\n\t\t\t\t\t\t\t? <JQuery.UrlAjaxSettings>\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tm" +
                    "ethod: method || \"get\",\r\n\t\t\t\t\t\t\t\turl: url_settings as string\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t:" +
                    " url_settings;\r\n\r\n\t\t\t\t\treturn createJqueryStubPromise((settings.method || settin" +
                    "gs.type).toLowerCase(),\r\n\t\t\t\t\t\tsettings.url,\r\n\t\t\t\t\t\ttypeof (success_data) === \"f" +
                    "unction\" ? (typeof (dataType_success) === \"string\" ? dataType_success : null) : " +
                    "success_data,\r\n\t\t\t\t\t\ttypeof (success_data) === \"function\" ? success_data : typeo" +
                    "f (dataType_success) === \"string\" ? success : dataType_success,\r\n\t\t\t\t\t\tsettings." +
                    "error)\r\n\t\t\t\t};\r\n\r\n\t\t\t// @ts-ignore\r\n\t\t\tsinon.stub($, \"get\").callsFake((url_setti" +
                    "ngs, success_data, dataType_success, success) =>\r\n\t\t\t\tgetPostMock(url_settings, " +
                    "success_data, dataType_success, success, \"get\"));\r\n\t\t\t// @ts-ignore\r\n\t\t\tsinon.st" +
                    "ub($, \"post\").callsFake((url_settings, success_data, dataType_success, success) " +
                    "=>\r\n\t\t\t\tgetPostMock(url_settings, success_data, dataType_success, success, \"post" +
                    "\"));\r\n\t\t}\r\n");
            
            #line 641 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t}\r\n\t");
            
            #line 642 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
 
		foreach (var model in templateModel.Models)
		{
	
            
            #line default
            #line hidden
            this.Write(" \r\n\ttype ");
            
            #line 646 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(model.EntityName)));
            
            #line default
            #line hidden
            this.Write("_Forms =\r\n\t\t");
            
            #line 647 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
 foreach (var form in model.Forms) { 
            
            #line default
            #line hidden
            this.Write("\"");
            
            #line 647 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(form.Name)));
            
            #line default
            #line hidden
            this.Write("\" |  ");
            
            #line 647 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("null;\r\n\r\n\texport class ");
            
            #line 649 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(model.EntityName)));
            
            #line default
            #line hidden
            this.Write(" extends CrmEntityModel<");
            
            #line 649 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(model.EntityName)));
            
            #line default
            #line hidden
            this.Write("_Forms>\r\n\t{\r\n\t\tentityName = \"");
            
            #line 651 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(model.EntityName)));
            
            #line default
            #line hidden
            this.Write("\";\r\n\t\tcontext = new Context(<Context>\r\n\t\t\t{\r\n\t\t\t\tuserId: \"");
            
            #line 654 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(model.Context.UserId.ToString())));
            
            #line default
            #line hidden
            this.Write("\",\r\n\t\t\t\tusername: ");
            
            #line 655 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ToLiteral(CheckString(model.Context.Username))));
            
            #line default
            #line hidden
            this.Write(",\r\n\t\t\t\tuserFullName: ");
            
            #line 656 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ToLiteral(CheckString(model.Context.UserFullName))));
            
            #line default
            #line hidden
            this.Write(",\r\n\t\t\t\tisGuidedHelpEnabled: ");
            
            #line 657 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(model.Context.IsGuidedHelpEnabled.ToString().ToLower())));
            
            #line default
            #line hidden
            this.Write(",\r\n\t\t\t\tuserLanguageCode: ");
            
            #line 658 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(model.Context.UserLanguageCode.ToString())));
            
            #line default
            #line hidden
            this.Write(",\r\n\t\t\t\ttimeZoneBias: ");
            
            #line 659 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(model.Context.TimeZoneBias.ToString())));
            
            #line default
            #line hidden
            this.Write(",\r\n\t\t\t\tuserRoles:\r\n\t\t\t\t\t[\r\n\t\t\t");
            
            #line 662 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"

				foreach (var role in model.Context.UserRoles)
				{
			
            
            #line default
            #line hidden
            this.Write("\t\t\t\"");
            
            #line 665 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(role.ToString())));
            
            #line default
            #line hidden
            this.Write("\",\r\n\t\t\t");
            
            #line 666 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"

				}
			
            
            #line default
            #line hidden
            this.Write("\t\t],\r\n\t\t\t\torganisationUrl: \"");
            
            #line 669 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(model.Context.OrganisationUrl)));
            
            #line default
            #line hidden
            this.Write("\",\r\n\t\t\t\tisAutoSaveEnabled: ");
            
            #line 670 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(model.Context.IsAutoSaveEnabled.ToString().ToLower())));
            
            #line default
            #line hidden
            this.Write(",\r\n\t\t\t\torgLanguageCode: ");
            
            #line 671 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(model.Context.OrgLanguageCode.ToString())));
            
            #line default
            #line hidden
            this.Write(",\r\n\t\t\t\torganisationName: \"");
            
            #line 672 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(model.Context.OrganisationName)));
            
            #line default
            #line hidden
            this.Write("\",\r\n\t\t\t\tthemeName: ");
            
            #line 673 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ToLiteral(CheckString(model.Context.ThemeName))));
            
            #line default
            #line hidden
            this.Write(",\r\n\t\t\t\tcrmVersion: \"");
            
            #line 674 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(model.Context.CrmVersion)));
            
            #line default
            #line hidden
            this.Write("\"\r\n\t\t\t});\r\n\t\tcrmAttributes =\r\n\t\t\t[\r\n\t\t\t");
            
            #line 678 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"

				foreach (var attribute in model.CrmAttributes)
				{
			
            
            #line default
            #line hidden
            this.Write("\tnew CrmAttribute(<CrmAttribute>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tattributeType: \"");
            
            #line 683 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(attribute.AttributeType)));
            
            #line default
            #line hidden
            this.Write("\", name: \"");
            
            #line 683 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(attribute.Name)));
            
            #line default
            #line hidden
            this.Write("\", requiredLevel: \"");
            
            #line 683 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(attribute.RequiredLevel, "none")));
            
            #line default
            #line hidden
            this.Write("\", format: \"");
            
            #line 683 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(attribute.Format)));
            
            #line default
            #line hidden
            this.Write("\",\r\n\t\t\t\t\t\tmin: ");
            
            #line 684 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(attribute.Min?.ToString() ?? "null")));
            
            #line default
            #line hidden
            this.Write(", max: ");
            
            #line 684 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(attribute.Max?.ToString() ?? "null")));
            
            #line default
            #line hidden
            this.Write(", precision: ");
            
            #line 684 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(attribute.Precision?.ToString() ?? "null")));
            
            #line default
            #line hidden
            this.Write(",\r\n\t\t\t\t\t\tmaxLength: ");
            
            #line 685 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(attribute.MaxLength?.ToString() ?? "null")));
            
            #line default
            #line hidden
            this.Write(",\r\n\t\t\t\t\t\tdefaultBoolValue: ");
            
            #line 686 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(attribute.DefaultBoolValue?.ToString().ToLower() ?? "null")));
            
            #line default
            #line hidden
            this.Write(", initialValue: ");
            
            #line 686 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(attribute.InitialValue?.ToString() ?? "null")));
            
            #line default
            #line hidden
            this.Write(",\r\n\t\t\t\t\t\toptions: new Map(\r\n\t\t\t\t\t\t\t[\r\n\t\t\t\t");
            
            #line 689 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"

					if (attribute.Options != null) {
					foreach (var option in attribute.Options)
					{
				
            
            #line default
            #line hidden
            this.Write("\t\t\t\t[");
            
            #line 693 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(option.Key.ToString())));
            
            #line default
            #line hidden
            this.Write(",\r\n\t\t\t\t\t\t\t\t\tnew Map(\r\n\t\t\t\t\t\t\t\t\t\t[\r\n\t\t\t\t\t");
            
            #line 696 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"

						foreach (var label in option.Value)
						{
					
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t[");
            
            #line 699 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(label.Key.ToString())));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 699 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ToLiteral(CheckString(label.Value))));
            
            #line default
            #line hidden
            this.Write("]\r\n\t\t\t\t\t");
            
            #line 700 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"

						}
					
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t])\r\n\t\t\t\t\t\t\t\t],\r\n\t\t\t\t");
            
            #line 704 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"

					}
					}
				
            
            #line default
            #line hidden
            this.Write("\t\t\t])\r\n\t\t\t\t\t}),\r\n\t\t\t");
            
            #line 709 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"

				}
			
            
            #line default
            #line hidden
            this.Write("];\r\n\t\tforms =\r\n\t\t\t[\r\n\t\t\t");
            
            #line 714 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"

				foreach (var form in model.Forms)
				{
			
            
            #line default
            #line hidden
            this.Write("\tnew Form(<Form>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tid: \"");
            
            #line 719 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(form.Id)));
            
            #line default
            #line hidden
            this.Write("\", name: \"");
            
            #line 719 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(form.Name)));
            
            #line default
            #line hidden
            this.Write("\",\r\n\t\t\t\t\t\ttabs:\r\n\t\t\t\t\t\t\t[\r\n\t\t\t\t");
            
            #line 722 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"

					foreach (var tab in form.Tabs)
					{
				
            
            #line default
            #line hidden
            this.Write("\t\t\t\tnew Tab(<Tab>\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tid: \"");
            
            #line 727 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(tab.Id)));
            
            #line default
            #line hidden
            this.Write("\", isVisible: ");
            
            #line 727 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(tab.IsVisible.ToString().ToLower())));
            
            #line default
            #line hidden
            this.Write(",\r\n\t\t\t\t\t\t\t\t\t\tlabels: new Map(\r\n\t\t\t\t\t\t\t\t\t\t\t[\r\n\t\t\t\t\t");
            
            #line 730 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"

						foreach (var label in tab.Labels)
						{
					
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t[");
            
            #line 733 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(label.Key));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 733 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ToLiteral(CheckString(label.Value))));
            
            #line default
            #line hidden
            this.Write("],\r\n\t\t\t\t\t");
            
            #line 734 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"

						}
					
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t]),\r\n\t\t\t\t\t\t\t\t\t\tsections:\r\n\t\t\t\t\t\t\t\t\t\t\t[\r\n\t\t\t\t\t\t");
            
            #line 739 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"

							foreach (var section in tab.Sections)
							{
						
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\tnew Section(<Section>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tid: \"");
            
            #line 744 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(section.Id)));
            
            #line default
            #line hidden
            this.Write("\", isVisible: ");
            
            #line 744 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(section.IsVisible.ToString().ToLower())));
            
            #line default
            #line hidden
            this.Write(",\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tlabels: new Map(\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\r\n\t\t\t\t\t\t\t");
            
            #line 747 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"

								foreach (var label in section.Labels)
								{
							
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\t\t[");
            
            #line 750 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(label.Key));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 750 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ToLiteral(CheckString(label.Value))));
            
            #line default
            #line hidden
            this.Write("],\r\n\t\t\t\t\t\t\t");
            
            #line 751 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"

								}
							
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\t]),\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcontrols:\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\r\n\t\t\t\t\t\t\t\t");
            
            #line 756 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"

									foreach (var control in section.Controls.OfType<FieldControl>())
									{
								
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\tnew FieldControl(<FieldControl>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tna" +
                    "me: \"");
            
            #line 761 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(control.Name)));
            
            #line default
            #line hidden
            this.Write("\", isVisible: ");
            
            #line 761 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(control.IsVisible.ToString().ToLower())));
            
            #line default
            #line hidden
            this.Write(", isDisabled: ");
            
            #line 761 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(control.IsDisabled.ToString().ToLower())));
            
            #line default
            #line hidden
            this.Write(",\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlabels: new Map(\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\r\n\t\t\t\t\t\t\t\t\t");
            
            #line 764 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"

										foreach (var label in control.Labels)
										{
									
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\t\t\t\t[");
            
            #line 767 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(label.Key));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 767 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ToLiteral(CheckString(label.Value))));
            
            #line default
            #line hidden
            this.Write("],\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t])\r\n\t\t\t\t\t\t\t\t\t");
            
            #line 769 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"

										}
									
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\t}),\r\n\t\t\t\t\t\t\t\t");
            
            #line 772 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"

									}
								
            
            #line default
            #line hidden
            
            #line 774 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"

									foreach (var control in section.Controls.OfType<GridControl>())
									{
								
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\tnew GridControl(<GridControl>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tname" +
                    ": \"");
            
            #line 779 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(control.Name)));
            
            #line default
            #line hidden
            this.Write("\", isVisible: ");
            
            #line 779 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(control.IsVisible.ToString().ToLower())));
            
            #line default
            #line hidden
            this.Write(",\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlabels: new Map(\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\r\n\t\t\t\t\t\t\t\t\t");
            
            #line 782 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"

										foreach (var label in control.Labels)
										{
									
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\t\t\t\t[");
            
            #line 785 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(label.Key));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 785 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ToLiteral(CheckString(label.Value))));
            
            #line default
            #line hidden
            this.Write("],\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t])\r\n\t\t\t\t\t\t\t\t\t");
            
            #line 787 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"

										}
									
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\t}),\r\n\t\t\t\t\t\t\t\t");
            
            #line 790 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"

									}
								
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t}),\r\n\t\t\t\t\t\t");
            
            #line 794 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"

							}
						
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t]\r\n\t\t\t\t\t\t\t\t\t}),\r\n\t\t\t\t");
            
            #line 798 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"

					}
				
            
            #line default
            #line hidden
            this.Write("\t\t\t]\r\n\t\t\t\t\t}),\r\n\t\t\t");
            
            #line 802 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"

				}
			
            
            #line default
            #line hidden
            this.Write("];\r\n\t}\r\n");
            
            #line 806 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"

		}

            
            #line default
            #line hidden
            this.Write("}\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 809 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"

    // Credit :http://stackoverflow.com/questions/323640/can-i-convert-a-c-sharp-string-value-to-an-escaped-string-literal
    private static string ToLiteral(string input)
    {
        using (var writer = new StringWriter())
        {
            using (var provider = CodeDomProvider.CreateProvider("CSharp"))
            {
                provider.GenerateCodeFromExpression(new CodePrimitiveExpression(input), writer, null);
                return writer.ToString();
            }
        }
    }

	public string CheckString(string value, string defaultValue = "null")
	{
		return value ?? defaultValue;
	}

        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public class XrmMockGeneratorTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
