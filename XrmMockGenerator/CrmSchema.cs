//         Project / File: Yagasoft.XrmMockGenerator / CrmSchema.cs
// File generated by: CRM Code Generator - Eric Labashosky, Ahmed el-Sawalhy

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Text;
using System.Runtime.Serialization;
using System.Reflection;
using System.ServiceModel;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Client;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Query;

namespace Yagasoft.XrmMockGenerator
{
	#region XrmServiceContext

	/// <summary>
	/// Represents a source of entities bound to a CRM service. It tracks and manages changes made to the retrieved entities.
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode()]
	public partial class XrmServiceContext : OrganizationServiceContext
	{
		/// <summary>
		/// Constructor.
		/// </summary>
		public XrmServiceContext(IOrganizationService service) : 
				base(service)
		{
		}

		/// <summary>
		/// Gets a binding to the set of all <see cref="ActivityParty"/> entities.
		/// </summary>
		public System.Linq.IQueryable<ActivityParty> ActivityPartySet
		{
			get
			{
				return this.CreateQuery<ActivityParty>();
			}
		}
		/// <summary>
		/// Gets a binding to the set of all <see cref="Organization"/> entities.
		/// </summary>
		public System.Linq.IQueryable<Organization> OrganizationSet
		{
			get
			{
				return this.CreateQuery<Organization>();
			}
		}
		/// <summary>
		/// Gets a binding to the set of all <see cref="SystemForm"/> entities.
		/// </summary>
		public System.Linq.IQueryable<SystemForm> SystemFormSet
		{
			get
			{
				return this.CreateQuery<SystemForm>();
			}
		}
		/// <summary>
		/// Gets a binding to the set of all <see cref="User"/> entities.
		/// </summary>
		public System.Linq.IQueryable<User> UserSet
		{
			get
			{
				return this.CreateQuery<User>();
			}
		}
		/// <summary>
		/// Gets a binding to the set of all <see cref="SystemUserRoles"/> entities.
		/// </summary>
		public System.Linq.IQueryable<SystemUserRoles> SystemUserRolesSet
		{
			get
			{
				return this.CreateQuery<SystemUserRoles>();
			}
		}
		/// <summary>
		/// Gets a binding to the set of all <see cref="Theme"/> entities.
		/// </summary>
		public System.Linq.IQueryable<Theme> ThemeSet
		{
			get
			{
				return this.CreateQuery<Theme>();
			}
		}
		/// <summary>
		/// Gets a binding to the set of all <see cref="UserSettings"/> entities.
		/// </summary>
		public System.Linq.IQueryable<UserSettings> UserSettingsSet
		{
			get
			{
				return this.CreateQuery<UserSettings>();
			}
		}
	}

	#endregion

	#region Extensions

    public class ValidationError
    {
        public Guid? RecordId;
        public string AttributeName;

        public ValidationType ErrorType;
        public IDictionary<int, string> ErrorMessage;

        public string StringValue;
        public int? StringMaxLength;

        public decimal? NumericValue;
        public decimal? NumericRangeMin;
        public decimal? NumericRangeMax;
    }

	public class ValidationLocalisation
	{
		public ValidationType ErrorType;
		/// <summary>
		/// A dictionary of language code as key and message format as value
		/// </summary>
		public IDictionary<int, string> Localisation;
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public static class CrmGeneratorExtensions
	{
		/// <summary>
		/// Retrieves the label of the 'OptionSetValue' using the corresponding enum member constant
		/// and the language code given.
		/// </summary>
		/// <param name="enumMember">The early-bound enum member constant; e.g.: 'Account.Enums.IndustryCode.Accounting'</param>
		/// <param name="languageCode">The language code from CRM</param>
		/// <returns>The label corresponding to the enum constant and the language code.</returns>
		public static string GetLabel(this Enum enumMember, int languageCode = 1033)
		{
			var enumType = enumMember.GetType();
			var enumParentType = enumType.DeclaringType;

			if (enumParentType == null)
			{
				return "NO_LABEL";
			}

			var enumsType = enumParentType.GetNestedType("Enums");

			if (enumsType == null)
			{
				return "NO_LABEL";
			}

			var labelsType = enumsType.GetNestedType("Labels");

			if (labelsType == null)
			{
				return "NO_LABEL";
			}

			var labelType = labelsType.GetNestedType(enumType.Name.Substring(0, enumType.Name.LastIndexOf("Enum")));

			if (labelType == null)
			{
				return "NO_LABEL";
			}

			var field = labelType.GetField(enumMember + "_" + languageCode);

			return field == null ? "NO_LABEL" : field.GetValue(labelType).ToString();
		}

		/// <summary>
		/// Converts an enum constant to an OptionSetValue object..
		/// </summary>
		/// <param name="enumMember">The early-bound enum member constant; e.g.: 'Account.IndustryCode.Accounting'</param>
		/// <returns>The OptionSetValue object.</returns>
		public static OptionSetValue ToOptionSetValue(this Enum enumMember)
		{
			return new OptionSetValue(int.Parse(enumMember.ToString("d")));
		}

		/// <summary>
		///     Validates that all field values in this record adhere to their contraints specified in CRM.<br />
		///     Validation checks: required, numeric value range, and string length.<br />
		/// </summary>
		/// <param name="validationTypes">An array of validations to run. Default is all.</param>
		/// <returns>A single message containing all validation errors.</returns>
		public static string GetValidationErrorsMessage(this Entity entityRecord, ValidationType[] validationTypes)
		{
			return GetValidationErrorsMessage(entityRecord,
				validationLocationsDefaults.Where(local => validationTypes.Contains(local.ErrorType)).ToArray());
		}

		/// <summary>
		///     Validates that all field values in this record adhere to their contraints specified in CRM.<br />
		///     Validation checks: required, numeric value range, and string length.<br />
		/// </summary>
		/// <param name="validationLocalisation">
		///     [OPTIONAL] An array containing validation types with the message format to use for the validation error.<br />
		///     For validation type "InRange", the message format takes three params for min, max, and actual value respectively;
		///         e.g.: "Value must be between {0} and {1}. Actual value was {2}.".<br />
		///     For validation type "MaxLength", the message format takes two params;
		///		    e.g.: "Value length must be less than {0}. Actual value was {1}."<br />
		///     Only include ONE localisation language.<br />
		///     Default is a check on all validation types.
		/// </param>
		/// <returns>A single message containing all validation errors.</returns>
		public static string GetValidationErrorsMessage(this Entity entityRecord, ValidationLocalisation[] validationLocalisation = null)
		{
			if (validationLocalisation != null
				&& validationLocalisation.Any(local => local.Localisation.Count > 1))
			{
				throw new ArgumentOutOfRangeException("validationLocalisation",
					"There should only be one validation localisation language for this method.");
			}

			var validationErrorMessages = GetValidationErrorMessages(entityRecord, validationLocalisation);

			if (validationErrorMessages.Any())
			{
				return validationErrorMessages.Aggregate(
					(message1, message2) => message1 + "\r\n-----------------------\r\n" + message2);
			}

			return null;
		}

		private static readonly ValidationLocalisation[] validationLocationsDefaults =
		{
			new ValidationLocalisation
			{
				ErrorType = ValidationType.Required,
				Localisation = new Dictionary<int, string>
				               {
					               {1033, "Value cannot be null."}
				               }
			},
			new ValidationLocalisation
			{
				ErrorType = ValidationType.InRange,
				Localisation = new Dictionary<int, string>
				               {
					               {1033, @"Attribute value must be between ""{0}"" and ""{1}"", inclusive. Actual value was ""{2}""."}
				               }
			},
			new ValidationLocalisation
			{
				ErrorType = ValidationType.MaxLength,
				Localisation = new Dictionary<int, string>
				               {
					               {1033, @"Attribute length must be less than ""{0}"". Actual attribute value was ""{1}""."}
				               }
			}
		};

		/// <summary>
		///     Validates that all field values in this record adhere to their contraints specified in CRM.<br />
		///     Validation checks: required, numeric value range, and string length.<br />
		/// </summary>
		/// <param name="validationTypes">An array of validations to run.</param>
		/// <returns>A list of messages indicating validation errors.</returns>
		public static List<string> GetValidationErrorMessages(this Entity entityRecord, ValidationType[] validationTypes)
		{
			return GetValidationErrorMessages(entityRecord,
				validationLocationsDefaults.Where(local => validationTypes.Contains(local.ErrorType)).ToArray());
		}

		/// <summary>
		///     Validates that all field values in this record adhere to their contraints specified in CRM.<br />
		///     Validation checks: required, numeric value range, and string length.<br />
		/// </summary>
		/// <param name="validationLocalisation">
		///     [OPTIONAL] An array containing validation types with the message format to use for the validation error.<br />
		///     For validation type "InRange", the message format takes three params for min, max, and actual value respectively;
		///         e.g.: "Value must be between {0} and {1}. Actual value was {2}.".<br />
		///     For validation type "MaxLength", the message format takes two params;
		///		    e.g.: "Value length must be less than {0}. Actual value was {1}."<br />
		///     Only include ONE localisation language.<br />
		///     Default is a check on all validation types.
		/// </param>
		/// <returns>A list of messages indicating validation errors.</returns>
		public static List<string> GetValidationErrorMessages(this Entity entityRecord, ValidationLocalisation[] validationLocalisation = null)
		{
			if (validationLocalisation != null
			    && validationLocalisation.Any(local => local.Localisation.Count > 1))
			{
				throw new ArgumentOutOfRangeException("validationLocalisation",
					"There should only be one validation localisation language for this method.");
			}

			var validationErrors = GetValidationErrors(entityRecord, validationLocalisation);

			if (validationErrors.Any())
			{
				var messages = validationErrors.Select(error => error.ErrorMessage.Values.First()).ToList();
				var id = ((dynamic)entityRecord).Id;
				messages.Insert(0, string.Format("Record of type \"{0}\"" + (id != null ? " and ID \"{1}\"" : "")
													+ " has invalid values.", entityRecord.GetType().Name, id));
				return messages;
			}

			return null;
		}

		/// <summary>
		///     Validates that all field values in this record adhere to their contraints specified in CRM.<br />
		///     Validation checks: required, numeric value range, and string length.<br />
		/// </summary>
		/// <param name="validationTypes">An array of validations to run.</param>
		/// <returns>A list of validation errors in the form of <see cref="ValidationError"/>.</returns>
		public static List<ValidationError> GetValidationErrors(this Entity entityRecord, ValidationType[] validationTypes)
		{
			return GetValidationErrors(entityRecord,
				validationLocationsDefaults.Where(local => validationTypes.Contains(local.ErrorType)).ToArray());
		}

		///  <summary>
		///      Validates that all field values in this record adhere to their contraints specified in CRM.<br />
		///      Validation checks: required, numeric value range, and string length.<br />
		///  </summary>
		///  <param name="validationLocalisation">
		///      [OPTIONAL] An array containing validation types with the message format to use for the validation error.<br />
		///      For validation type "InRange", the message format takes three params for min, max, and actual value respectively;
		///          e.g.: "Value must be between {0} and {1}. Actual value was {2}.".<br />
		///      For validation type "MaxLength", the message format takes two params;
		/// 		    e.g.: "Value length must be less than {0}. Actual value was {1}."<br />
		///      Default is a check on all validation types.
		///  </param>
		/// <returns>A list of validation errors in the form of <see cref="ValidationError"/>.</returns>
		public static List<ValidationError> GetValidationErrors(this Entity entityRecord, ValidationLocalisation[] validationLocalisation = null)
		{
			var id = ((dynamic) entityRecord).Id;
			var fields = entityRecord.GetType().GetProperties();
			var exceptions = new List<ValidationError>();

			validationLocalisation = validationLocalisation ?? validationLocationsDefaults;

			var localisation = validationLocalisation.FirstOrDefault(local => local.ErrorType == ValidationType.Required);

			if (localisation != null)
			{
				exceptions.AddRange(from fieldQ in fields
				                    where Attribute.IsDefined(fieldQ, typeof (RequiredAttribute))
				                          && fieldQ.GetValue(entityRecord) == null
				                    select new ValidationError
				                           {
					                           RecordId = id,
					                           AttributeName = fieldQ.Name,
					                           ErrorMessage =
						                           localisation.Localisation.ToDictionary(local => local.Key, local => local.Value),
					                           ErrorType = ValidationType.Required
				                           });
			}

			localisation = validationLocalisation.FirstOrDefault(local => local.ErrorType == ValidationType.InRange);

			if (localisation != null)
			{
				foreach (var field in fields.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof (InRangeAttribute)) && fieldQ.GetValue(entityRecord) != null))
				{
					var fieldValue = field.GetValue(entityRecord);
					Type type = field.GetCustomAttribute<InRangeAttribute>().Type;

					var method = type.GetMethods().FirstOrDefault(methodQ => methodQ.GetParameters().Length == 1 && methodQ.Name == "Parse");

					var min = (IComparable) method.Invoke(null, new object[] {field.GetCustomAttribute<InRangeAttribute>().Min});
					var max = (IComparable) method.Invoke(null, new object[] {field.GetCustomAttribute<InRangeAttribute>().Max});

					if (fieldValue != null && (min.CompareTo(fieldValue) == 1 || max.CompareTo(fieldValue) == -1))
					{
						exceptions.Add(new ValidationError
						               {
							               RecordId = id,
							               AttributeName = field.Name,
							               ErrorMessage = localisation.Localisation.ToDictionary(local => local.Key,
									               local => string.Format(local.Value, min, max, fieldValue)),
							               ErrorType = ValidationType.InRange,
							               NumericValue = decimal.Parse(fieldValue.ToString()),
							               NumericRangeMin = decimal.Parse(min.ToString()),
							               NumericRangeMax = decimal.Parse(max.ToString())
						               });
					}
				}
			}


			localisation = validationLocalisation.FirstOrDefault(local => local.ErrorType == ValidationType.MaxLength);

			if (localisation != null)
			{
				exceptions.AddRange(from fieldQ in fields.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof (MaxLengthAttribute)))
				                    let fieldValue = fieldQ.GetValue(entityRecord) as string
				                    let maxLength = fieldQ.GetCustomAttribute<MaxLengthAttribute>().Max
				                    where fieldValue != null && fieldValue.Length > maxLength
				                    select new ValidationError
				                           {
					                           RecordId = id,
					                           AttributeName = fieldQ.Name,
					                           ErrorMessage = localisation.Localisation.ToDictionary(local => local.Key,
							                           local => string.Format(local.Value, maxLength, fieldValue)),
					                           ErrorType = ValidationType.MaxLength,
					                           StringValue = fieldValue,
					                           StringMaxLength = maxLength
				                           });
			}

			return exceptions;
		}

		public static TEntity ConvertTo<TEntity>(this Entity crmRecord) where TEntity : EntityContract
		{
			// create entity object
			var record = Activator.CreateInstance<TEntity>();

			var entityType = typeof(TEntity);
			var entityLogicalName = entityType.GetCustomAttribute<CrmEntityMappingAttribute>().LogicalName;


			// if logical names don't match
			if (entityLogicalName != crmRecord.LogicalName)
			{
				throw new Exception(string.Format("CRM entity '{0}' doesn't map to entity '{1}'.",
					crmRecord.GetType().Name, entityType.Name));
			}

			// go over all fields in the contract entity that has the mapping attribute
			foreach (var field in entityType.GetFields()
				.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof(CrmFieldMappingAttribute))
								 && !Attribute.IsDefined(fieldQ, typeof(CrmRelationMappingAttribute))))
			{
				// get the value of the mapping attribute
				var mapping = field.GetCustomAttribute<CrmFieldMappingAttribute>();
				SetValueInRecord(record, field, crmRecord, mapping);
			}

			// go over all relations in the contract entity that has the mapping attribute
			foreach (var relation in typeof(TEntity).GetFields()
				.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof(CrmRelationMappingAttribute))
						&& !Attribute.IsDefined(fieldQ, typeof(CrmFieldMappingAttribute))))
			{
				// get the value of the mapping attribute
				var mapping = relation.GetCustomAttribute<CrmRelationMappingAttribute>();
				SetRelationInRecord(record, relation, crmRecord, mapping);
			}

			return record;
		}

		private static void SetValueInRecord<TEntity>(TEntity entity, FieldInfo field, Entity crmRecord,
			CrmFieldMappingAttribute mapping)
			where TEntity : EntityContract
		{
			// if key not found, then the CRM record doesn't have that value set
			if (!crmRecord.Attributes.Contains(mapping.LogicalName))
			{
				return;
			}

			var value = crmRecord[mapping.LogicalName];

			// convert types
			if (value is OptionSetValue)
			{
				// can't set enum value with int using reflection!
				field.SetValue(entity, Enum.ToObject(Nullable.GetUnderlyingType(field.FieldType),
					((OptionSetValue)value).Value));

				var labelsProperty = typeof(TEntity).GetProperties().FirstOrDefault(propQ => propQ.Name == field.Name + "Labels");

                if (labelsProperty != null)
                {
                    // get the label value from the CRM record
                    var matchingProperty = crmRecord.GetType().GetProperties().FirstOrDefault(propQ => propQ.Name == field.Name + "Labels");

                    // if it has a value, set it in contract
                    if (matchingProperty != null)
                    {
                        labelsProperty.SetValue(entity, matchingProperty.GetValue(crmRecord));
                    }
                }
			}
			else if (value is Money)
			{
				field.SetValue(entity, ((Money)value).Value);
			}
			else if (value is EntityReference && field.FieldType != typeof(EntityReference))
			{
				var entityRef = (EntityReference) value;

				field.SetValue(entity, entityRef.Id);

				var nameField = typeof(TEntity).GetFields().FirstOrDefault(fieldQ => fieldQ.Name == field.Name + "Name");

				if (nameField != null && entityRef.Name != null)
				{
					nameField.SetValue(entity, entityRef.Name);
				}

				var labelsProperty = typeof(TEntity).GetProperties().FirstOrDefault(propQ => propQ.Name == field.Name + "Labels");

                if (labelsProperty != null)
                {
                    // get the label value from the CRM record
                    var matchingProperty = crmRecord.GetType().GetProperties().FirstOrDefault(propQ => Attribute.IsDefined(propQ, typeof(LabelAttribute))
                        && propQ.GetCustomAttribute<LabelAttribute>().FieldLogicalName == labelsProperty.GetCustomAttribute<LabelAttribute>().FieldLogicalName);

                    // if it has a value, set it in contract
                    if (matchingProperty != null)
                    {
                        labelsProperty.SetValue(entity, matchingProperty.GetValue(crmRecord));
                    }
                }
			}
			else
			{
				field.SetValue(entity, value);
			}
		}

		private static void SetRelationInRecord<TEntity>(TEntity record, FieldInfo field, Entity crmRecord,
			CrmRelationMappingAttribute mapping)
			where TEntity : EntityContract
		{
			var crmRelations = crmRecord.RelatedEntities
				.Where(relationQ => relationQ.Key.SchemaName == mapping.SchemaName
									&& relationQ.Key.PrimaryEntityRole == mapping.Role);

			// if relation not found in CRM record, exit
			if (!crmRelations.Any())
			{
				return;
			}

			var crmRelatedRecords = crmRelations.First().Value.Entities;

			// if there are not related entities in the CRM relation, exit
			if (!crmRelatedRecords.Any())
			{
				return;
			}

			var fieldType = field.FieldType;

			object convertedValue = null;

			// x-N relation
			if (typeof(Array).IsAssignableFrom(fieldType))
			{
				// get the contract type for the relation
				var elementType = fieldType.GetElementType();

				// create an array for the related entities of the appropriate type
				var relatedRecords = Array.CreateInstance(elementType, crmRelatedRecords.Count);

				// create the method reference that will be used to convert the related entities to the CRM entities
				var method = MethodBase.GetCurrentMethod().DeclaringType
					.GetMethod("ConvertTo").MakeGenericMethod(elementType);

				// convert all entities to contract entities
				var objectRelatedRecords = (from object relatedRecord in crmRelatedRecords
											select method.Invoke(relatedRecord, new[] { relatedRecord })).ToArray();

				// copy the object entities to the array of the specific type
				Array.Copy(objectRelatedRecords, relatedRecords, relatedRecords.Length);
				convertedValue = relatedRecords;
			}
			else if (typeof(EntityContract).IsAssignableFrom(fieldType))
			{
				// N-1 relation
				var relatedRecord = crmRelatedRecords.FirstOrDefault();

				if (relatedRecord != null)
				{
					// go over all fields in the contract entity that has the mapping attribute
					foreach (var fieldT in typeof(TEntity).GetFields()
						.Where(fieldQ => fieldQ.Name.Contains(field.Name)
						&& Attribute.IsDefined(fieldQ, typeof(CrmFieldMappingAttribute))))
					{
						// get the value of the mapping attribute
						var mappingT = fieldT.GetCustomAttribute<CrmFieldMappingAttribute>();
						SetValueInRecord(record, fieldT, relatedRecord, mappingT);
					}
					// create the method reference that will be used to convert the related entities to the CRM entities
					var method = MethodBase.GetCurrentMethod().DeclaringType
						.GetMethod("ConvertTo").MakeGenericMethod(fieldType);

					convertedValue = method.Invoke(relatedRecord, new object[] { relatedRecord });
				}
			}

			// set the related entities value in the entity
			field.SetValue(record, convertedValue);
		}

		/// <summary>
		/// Returns an array of logical names whose property is marked for WCF contract.
		/// </summary>
		/// <param name="entity"></param>
		/// <returns>An array of logical names.</returns>
		public static string[] GetDataMemberAttributes(this Entity entity)
		{
			return entity.GetType().GetProperties()
				.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof(DataMemberAttribute)) && Attribute.IsDefined(fieldQ, typeof(AttributeLogicalNameAttribute)))
				.Select(field => field.GetCustomAttribute<AttributeLogicalNameAttribute>().LogicalName).ToArray();
		}

		/// <summary>
		/// Returns an array of logical names of the properties.
		/// </summary>
		/// <param name="entity"></param>
		/// <returns>An array of logical names.</returns>
		public static string[] GetAttributeNames(this Entity entity)
		{
			return entity.GetType().GetProperties()
				.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof(AttributeLogicalNameAttribute)) && !Attribute.IsDefined(fieldQ, typeof(RelationshipSchemaNameAttribute)))
				.Select(field => field.GetCustomAttribute<AttributeLogicalNameAttribute>().LogicalName).ToArray();
		}

		/// <summary>
		/// Loads the values of data member properties from CRM.
		/// </summary>
		/// <param name="entity"></param>
		/// <param name="service">CRM organisation service.</param>
		public static void LoadDataMemberAttributes(this Entity entity, IOrganizationService service)
		{
			LoadAttributeValues(entity, service, entity.GetDataMemberAttributes());
		}

		/// <summary>
		/// Loads the values of all properties from CRM.
		/// </summary>
		/// <param name="entity"></param>
		/// <param name="service">CRM organisation service.</param>
		/// <param name="attributes"></param>
		public static void LoadAttributeValues(this Entity entity, IOrganizationService service, params string[] attributes)
		{
			try
			{
				entity.Id = entity.Id;
			}
			catch
			{
				throw new Exception("Entity is ready only. Set 'MergeOption' to 'NoTracking' in the context used for fetching this entity.");
			}

			var isLoadAll = attributes == null || attributes.Length <= 0;

			if (isLoadAll)
			{
				entity.Attributes.Clear();
			}

			foreach (var attribute in service.Retrieve(entity.LogicalName, entity.Id, new ColumnSet(isLoadAll ? entity.GetAttributeNames() : attributes)).Attributes)
			{
				entity[attribute.Key] = attribute.Value;
			}
		}
	}

	#endregion

	#region Helpers

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public abstract class GeneratedEntityBase : Entity, INotifyPropertyChanging, INotifyPropertyChanged
	{
		public GeneratedEntityBase()
		{}

		public GeneratedEntityBase(string logicalName) : base(logicalName)
		{}

		[DataMember]
		private List<string> NullValuedAttributes { get; set; }
		protected Microsoft.Xrm.Sdk.AttributeCollection backupAttributeCollection;
		protected FormattedValueCollection backupFormattedCollection;
		protected RelatedEntityCollection backupRelatedEntityCollection;
		internal IList<QueryAction> DeferredQueriesList = new List<QueryAction>();
		protected IDictionary<string, object[]> relationProperties;
		protected virtual IDictionary<string, object[]> RelationProperties { get { return new Dictionary<string, object[]>(); } }

		#region Serialisation events

		[OnSerializing]
		private void SerializingInitializer(StreamingContext ctx)
		{
			backupAttributeCollection = new Microsoft.Xrm.Sdk.AttributeCollection();
			backupAttributeCollection.AddRange(Attributes);
			Attributes.Clear();

			backupFormattedCollection = new FormattedValueCollection();
			backupFormattedCollection.AddRange(FormattedValues);
			FormattedValues.Clear();

			backupRelatedEntityCollection = new RelatedEntityCollection();
			backupRelatedEntityCollection.AddRange(RelatedEntities);
			RelatedEntities.Clear();
		}

		[OnSerialized]
		private void SerializedInitializer(StreamingContext ctx)
		{
			Attributes.Clear();
			Attributes.AddRange(backupAttributeCollection);
			backupAttributeCollection = null;

			FormattedValues.Clear();
			FormattedValues.AddRange(backupFormattedCollection);
			backupFormattedCollection = null;

			RelatedEntities.Clear();
			RelatedEntities.AddRange(backupRelatedEntityCollection);
			backupRelatedEntityCollection = null;
		}

		[OnDeserialized]
		private void DeserializedInitializer(StreamingContext ctx)
		{
			LogicalName = (string)GetType().GetField("EntityLogicalName").GetRawConstantValue();
			Attributes.Where(attribute => attribute.Value == null).ToList().ForEach(attribute => Attributes.Remove(attribute.Key));
			if (NullValuedAttributes != null && NullValuedAttributes.Count > 0)
			{
				NullValuedAttributes.ForEach(attribute =>
				{
					var property = GetType().GetProperty(attribute);
					if (property == null)
					{
						throw new Exception("Couldn't find the property '" + attribute + "' in entity.");
					}
					property.SetValue(this, null);
				});
			}
		}

		#endregion

		public XrmServiceContext ServiceContext { get; set; }

		public event PropertyChangedEventHandler PropertyChanged;
		public event PropertyChangingEventHandler PropertyChanging;

		protected void OnPropertyChanged(string propertyName)
		{
			if (PropertyChanged != null)
			{
				PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		protected void OnPropertyChanging(string propertyName)
		{
			if (PropertyChanging != null)
			{
				PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
			}
		}

		public void LoadLookupLabels(IOrganizationService service, bool isDeferred = false)
		{
			var properties = from propQ in this.GetType().GetProperties()
			                 let propIdQ = this.GetType().GetProperty(propQ.Name.Replace("Labels", ""))
			                 where Attribute.IsDefined(propQ, typeof(LabelAttribute))
			                       && (Guid?) propIdQ.GetValue(this) != null
			                 select new
			                        {
				                        property = propQ,
				                        id = propIdQ.GetValue(this),
				                        attribute = propQ.GetCustomAttribute<LabelAttribute>()
			                        };

			foreach (var property in properties)
			{
				var fields = property.attribute.LabelFieldNames.Split(',');

				var query = new QueryExpression(property.attribute.LogicalName);
				query.Criteria.AddCondition(property.attribute.IdFieldName, ConditionOperator.Equal, property.id);
				query.ColumnSet = new ColumnSet(fields.Select(field => field.Substring(5)).ToArray());

				var queryAction =
					new QueryAction(query)
					{
						Action =
							result =>
							{
								var response = result as RetrieveMultipleResponse;
								if (response == null) return;

								var entityQ = response.EntityCollection.Entities.FirstOrDefault();
								if (entityQ == null) return;

								var englishLabel = (string) entityQ.Attributes.FirstOrDefault(
									attribute => ("1033_" + attribute.Key) == fields.FirstOrDefault(field => field.Contains("1033_"))).Value;
								var dictionary = new Dictionary<int, string>();
								dictionary[1033] = englishLabel;
								property.property.SetValue(this, dictionary);
							}
					};

				if (isDeferred)
				{
					this.DeferredQueriesList.Add(queryAction);
				}
				else
				{
					queryAction.Action.Invoke(service.Execute(new RetrieveMultipleRequest{Query = query}));
				}
			}
		}

		#region Relationship methods

		protected override IEnumerable<TEntity> GetRelatedEntities<TEntity>(string relationshipSchemaName, EntityRole? primaryEntityRole)
		{
		    var key = new Relationship(relationshipSchemaName) { PrimaryEntityRole = primaryEntityRole };

			var enumerable = base.GetRelatedEntities<TEntity>(relationshipSchemaName, primaryEntityRole);

			if (ServiceContext != null && enumerable == null)
			{
				if (!ServiceContext.IsAttached(this))
				{
					throw new Exception("The context that loaded this entity must be used to load relationships, " +
										"or set 'MergeOption' to anything other than 'NoTracking' in the context before fetching this entity using LINQ.");
				}

				ServiceContext.LoadProperty(this, key);
			}

			enumerable = base.GetRelatedEntities<TEntity>(relationshipSchemaName, primaryEntityRole);
			
			if (enumerable == null)
			{
				if (backupRelatedEntityCollection != null && backupRelatedEntityCollection.Contains(key))
					enumerable = backupRelatedEntityCollection[key].Entities.Cast<TEntity>();
			}

			return enumerable;
		}

		protected override TEntity GetRelatedEntity<TEntity>(string relationshipSchemaName, EntityRole? primaryEntityRole)
		{
			var key = new Relationship(relationshipSchemaName) { PrimaryEntityRole = primaryEntityRole };

			var result = base.GetRelatedEntity<TEntity>(relationshipSchemaName, primaryEntityRole);

			if (ServiceContext != null && result == null)
			{
				if (!ServiceContext.IsAttached(this))
				{
					throw new Exception("The context that loaded this entity must be used to load relationships, " +
										"or set 'MergeOption' to anything other than 'NoTracking' in the context before fetching this entity using LINQ.");
				}

				ServiceContext.LoadProperty(this, key);
			}

			result = base.GetRelatedEntity<TEntity>(relationshipSchemaName, primaryEntityRole);

			if (result == null)
			{
				if (backupRelatedEntityCollection != null && backupRelatedEntityCollection.Contains(key))
					result = (TEntity)backupRelatedEntityCollection[key].Entities.FirstOrDefault();
			}
			
			return result;
		}

		#endregion
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public abstract class GeneratedEntity<TRelationName> : GeneratedEntityBase where TRelationName : RelationNameBase
	{
		public GeneratedEntity()
		{}

		public GeneratedEntity(string logicalName) : base(logicalName)
		{}

		#region Relationship methods

		/// <summary>
		/// Fetch the records related to this entity on this relationship. 
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch.
		/// </summary>
		public RelationPagingInfo LoadRelation(TRelationName relationName, IOrganizationService service, params string[] attributes)
		{
			return LoadRelation(relationName, service, false, -1, -1, null, null, attributes);
		}

		/// <summary>
		/// Fetch the records related to this entity on this relationship. 
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch. If 'deferred', then loading will be added to the queue to be executed later upon request.
		/// </summary>
		public RelationPagingInfo LoadRelation(TRelationName relationName, IOrganizationService service, bool isDeferred, params string[] attributes)
		{
			return LoadRelation(relationName, service, isDeferred, -1, -1, null, null, attributes);
		}

		/// <summary>
		/// Fetch the records related to this entity on this relationship.
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch. If 'deferred', then loading will be added to the queue to be executed later upon request.
		/// </summary>
		public RelationPagingInfo LoadRelation(TRelationName relationName, IOrganizationService service, bool isDeferred, FilterExpression filter, params string[] attributes)
		{
			return LoadRelation(relationName, service, isDeferred, -1, -1, null, filter, attributes);
		}

		/// <summary>
		/// Fetch the records related to this entity on this relationship. The record limit accepts '-1', which means 'unlimited'.
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch. If 'deferred', then loading will be added to the queue to be executed later upon request.
		/// </summary>
		public RelationPagingInfo LoadRelation(TRelationName relationName, IOrganizationService service, bool isDeferred, int recordCountLimit, params string[] attributes)
		{
			return LoadRelation(relationName, service, isDeferred, recordCountLimit, -1, null, null, attributes);
		}

		/// <summary>
		/// Fetch the records related to this entity on this relationship. The record limit accepts '-1', which means 'unlimited'.
		/// The page param accepts '-1', which means 'all pages'. If a page is specified, the record limit won't exceed '5000' internally.
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch. If 'deferred', then loading will be added to the queue to be executed later upon request.
		/// </summary>
		public RelationPagingInfo LoadRelation(TRelationName relationName, IOrganizationService service, bool isDeferred, int recordCountLimit, int page, string cookie, params string[] attributes)
		{
			return LoadRelation(relationName, service, isDeferred, recordCountLimit, page, cookie, null, attributes);
		}

		/// <summary>
		/// Fetch the next page of records related to this entity on this relationship using the previous paging info object returned.
		/// </summary>
		public RelationPagingInfo LoadRelation(TRelationName relationName, IOrganizationService service, bool isDeferred, RelationPagingInfo pagingInfo, params string[] attributes)
		{
			return LoadRelation(relationName, service, isDeferred, pagingInfo.RecordCountLimit, pagingInfo.NextPage, pagingInfo.Cookie, pagingInfo.Filter, pagingInfo, attributes);
		}

		/// <summary>
		/// Fetch the records related to this entity on this relationship. The record limit accepts '-1', which means 'unlimited'.
		/// The page param accepts '-1', which means 'all pages'. If a page is specified, the record limit won't exceed '5000' internally.
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch. If 'deferred', then loading will be added to the queue to be executed later upon request.
		/// </summary>
		public RelationPagingInfo LoadRelation(TRelationName relationName, IOrganizationService service, bool isDeferred, int recordCountLimit, int page, string cookie, FilterExpression filter, params string[] attributes)
		{
			return LoadRelation(relationName, service, isDeferred, recordCountLimit, page, cookie, filter, null, attributes);
		}

		/// <summary>
		/// Fetch the records related to this entity on this relationship. The record limit accepts '-1', which means 'unlimited'.
		/// The page param accepts '-1', which means 'all pages'. If a page is specified, the record limit won't exceed '5000' internally.
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch. If 'deferred', then loading will be added to the queue to be executed later upon request.
		/// </summary>
		public RelationPagingInfo LoadRelation(TRelationName relationName, IOrganizationService service, bool isDeferred, int recordCountLimit, int page, string cookie, FilterExpression filter, RelationPagingInfo pagingInfo, params string[] attributes)
		{
			if (RelatedEntities.IsReadOnly) {
				throw new Exception("Relationship collection is ready only. The context that loaded this entity from CRM must be passed as a parameter, " +
									"or set 'MergeOption' to 'NoTracking' in the context before fetching this entity using LINQ.");
			}
			if (!RelationProperties.ContainsKey(relationName.Name)) {
				throw new Exception("Relation does not exist in entity, or is not generated.");
			}
			var relationPagingInfo = pagingInfo ?? new RelationPagingInfo
				{
					RecordCountLimit = recordCountLimit,
					Filter = filter,
					Cookie = cookie,
					NextPage = page
				};
			var relationParams = RelationProperties[relationName.Name];
			var queryActionObject = new QueryAction(GeneratorHelpers.GetLoadRelationQuery(this, service, (string) relationParams[1], (string) relationParams[2], (string) relationParams[3], (string) relationParams[4], (string) relationParams[5], (string) relationParams[6],
					recordCountLimit, page, cookie, filter, attributes));
			var queryAction = queryActionObject.Action =
							  resultQ => {
								  var response = resultQ as RetrieveMultipleResponse;
								  var entityType = ((Type) relationParams[8]).GetElementType() ?? (Type) relationParams[8];
					              var resultArray = response == null ? ((List<Entity>) resultQ).Select(entityQ => entityQ.GetType().GetMethod("ToEntity").MakeGenericMethod(entityType).Invoke(entityQ, null)).ToArray()
	    				              : response.EntityCollection.Entities.Select(entityQ => entityQ.GetType().GetMethod("ToEntity").MakeGenericMethod(entityType).Invoke(entityQ, null)).ToArray();
					              var relatedRecords = Array.CreateInstance(entityType, resultArray.Length);
					              Array.Copy(resultArray, relatedRecords, resultArray.Length);
								  DeferredQueriesList.Remove(queryActionObject);
								  var newValue = relatedRecords.Length <= 0 ? null : (((Type) relationParams[8]).GetElementType() == null ? relatedRecords.GetValue(0) : relatedRecords);
								  GetType().GetProperty((string) relationParams[0]).SetValue(this, newValue);
							  };
			if (isDeferred) DeferredQueriesList.Add(queryActionObject);
			else queryAction.Invoke(GeneratorHelpers.LoadRelation(service, queryActionObject.Query, recordCountLimit, page, cookie, relationPagingInfo));
			return relationPagingInfo;
		}

		#endregion
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public class RelationPagingInfo
	{
		public string Cookie;
		public int NextPage = 1;
		public int RecordCountLimit = -1;
		public FilterExpression Filter;
		public bool IsMoreRecords = true;
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public abstract class RelationNameBase
	{
		public string Name;

		public RelationNameBase(string name)
		{
			Name = name;
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	internal class QueryAction
	{
		public QueryExpression Query { get; set; }
		public Action<object> Action { get; set; }

		public QueryAction(QueryExpression query, Action<object> action = null)
		{
			Query = query;
			Action = action;
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[AttributeUsage(AttributeTargets.Class)]
	public class CrmEntityMappingAttribute : Attribute
	{
		public string LogicalName { get; private set; }
		public string SchemaName { get; private set; }
		public string DisplayName { get; private set; }

		public CrmEntityMappingAttribute(string logicalName, string schemaName, string displayName = null)
		{
			if (string.IsNullOrWhiteSpace(logicalName))
			{
				throw new ArgumentNullException("logicalName");
			}

			if (string.IsNullOrWhiteSpace(schemaName))
			{
				throw new ArgumentNullException("schemaName");
			}

			LogicalName = logicalName;
			SchemaName = schemaName;
			DisplayName = displayName;
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[AttributeUsage(AttributeTargets.Field)]
	public class ReadOnlyFieldAttribute : Attribute
	{}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[AttributeUsage(AttributeTargets.Field)]
	public class CrmFieldMappingAttribute : Attribute
	{
		public string LogicalName { get; private set; }
		public string RelatedEntity { get; private set; }

		public CrmFieldMappingAttribute(string logicalName, string relatedEntity = null)
		{
			if (string.IsNullOrWhiteSpace(logicalName))
			{
				throw new ArgumentNullException("logicalName");
			}

			LogicalName = logicalName;
			RelatedEntity = relatedEntity;
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[AttributeUsage(AttributeTargets.Field)]
	public class CrmRelationMappingAttribute : Attribute
	{
		public string SchemaName { get; private set; }
		public Type RelatedEntityType { get; private set; }
		public EntityRole? Role { get; private set; }

		public CrmRelationMappingAttribute(string schemaName, Type relatedEntityType)
		{
			if (string.IsNullOrWhiteSpace(schemaName))
			{
				throw new ArgumentNullException("schemaName");
			}

			if (relatedEntityType == null)
			{
				throw new ArgumentNullException("relatedEntityType");
			}

			SchemaName = schemaName;
			RelatedEntityType = relatedEntityType;
		}

		public CrmRelationMappingAttribute(string schemaName, Type relatedEntityType, EntityRole role)
		{
			if (string.IsNullOrWhiteSpace(schemaName))
			{
				throw new ArgumentNullException("schemaName");
			}

			if (relatedEntityType == null)
			{
				throw new ArgumentNullException("relatedEntityType");
			}

			SchemaName = schemaName;
			RelatedEntityType = relatedEntityType;
			Role = role;
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[AttributeUsage(AttributeTargets.Field | AttributeTargets.Property)]
	public class InRangeAttribute : Attribute
	{
		public string Min { get; set; }
		public string Max { get; set; }
		public Type Type { get; set; }

		public InRangeAttribute(string min, string max, Type type)
		{
			Min = min;
			Max = max;
			Type = type;
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[AttributeUsage(AttributeTargets.Field | AttributeTargets.Property)]
	public class MaxLengthAttribute : Attribute
	{
		public int Max { get; set; }

		public MaxLengthAttribute(int max)
		{
			Max = max;
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[AttributeUsage(AttributeTargets.Field | AttributeTargets.Property)]
	public class RequiredAttribute : Attribute
	{
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[AttributeUsage(AttributeTargets.Property)]
	public class LabelAttribute : Attribute
	{
		public string LabelFieldNames { get; set; }
		public string LogicalName { get; set; }
		public string IdFieldName { get; set; }
		public string FieldLogicalName { get; set; }

		public LabelAttribute(string labelFieldNames, string logicalName, string idFieldName, string fieldLogicalName)
		{
			LabelFieldNames = labelFieldNames;
			LogicalName = logicalName;
			IdFieldName = idFieldName;
			FieldLogicalName = fieldLogicalName;
		}
	}

	public enum ValidationType
	{
		Required,
		InRange,
		MaxLength
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public class OptionsetLanguageLabel
	{
		public int LanguageCode { get; set; }
		public string OptionsetLabel {get; set;}
	}

	public enum ClearMode
	{
		[EnumMember] Disabled,
		[EnumMember] Empty,
		[EnumMember] Convention,
		[EnumMember] Flag
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract]
	public partial class EntityContract
	{
		[DataMember] public virtual ClearMode? ValueClearMode { get { return ClearMode.Disabled; } set{} }

		public TCrmEntity ConvertTo<TCrmEntity>(ClearMode? clearMode = null) where TCrmEntity : Entity
		{
			// create CRM entity object
			var crmRecord = Activator.CreateInstance<TCrmEntity>();

			var entityType = GetType();
			var entityLogicalName = entityType.GetCustomAttribute<CrmEntityMappingAttribute>().LogicalName;

			// if logical names don't match
			if (entityLogicalName != crmRecord.LogicalName)
			{
				throw new Exception(string.Format("Entity '{0}' doesn't map to CRM entity '{1}'.",
					entityType.Name, typeof(TCrmEntity).Name));
			}
            
            clearMode = clearMode ?? (ClearMode?) entityType.GetProperty("ValueClearMode").GetValue(this) ?? ClearMode.Disabled;

			// go over all fields in the contract entity that has the mapping attribute
			foreach (var field in entityType.GetFields()
				.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof(CrmFieldMappingAttribute))
								 && !Attribute.IsDefined(fieldQ, typeof(CrmRelationMappingAttribute))))
			{
				// get the value of the mapping attribute
				var mapping = field.GetCustomAttribute<CrmFieldMappingAttribute>();
				// get the value of the field
				var value = field.GetValue(this);
				// is the field value read only
				var isReadOnly = field.GetCustomAttribute<ReadOnlyFieldAttribute>() != null;
                // get the clear flag mode value if it exists
                var isClearFlag = value == null && clearMode == ClearMode.Flag
                    && (bool?)entityType.GetFields().Where(fieldQ => fieldQ.Name == "Clear_" + field.Name)
                    .Select(fieldQ => fieldQ.GetValue(this)).FirstOrDefault() == true;
                // check 'empty' mode
                var isClearEmpty = value == null && clearMode == ClearMode.Empty;

                var isSetValue = (value != null && !isReadOnly) || isClearFlag || isClearEmpty;

                // skip if no value and clear mode does not match and pass check
                if (isReadOnly || !isSetValue)
				{
					continue;
				}

				SetValueInCrmRecord(value, crmRecord, field.Name, mapping, clearMode);
			}

			// go over flattened relations in the contract entity that has the mapping attribute
			foreach (var field in GetType().GetFields()
				.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof(CrmRelationMappingAttribute))
					&& Attribute.IsDefined(fieldQ, typeof(CrmFieldMappingAttribute))))
			{
				// get the value of the field
				var value = field.GetValue(this);
				// is the field value read only
				var isReadOnly = field.GetCustomAttribute<ReadOnlyFieldAttribute>();

				// skip if no value
				if (isReadOnly != null || (value == null && clearMode != ClearMode.Empty) || value is Array)
				{
					continue;
				}

				SetRelationInRecord(value, field);
			}
			// go over all relations in the contract entity that has the mapping attribute
			foreach (var relation in GetType().GetFields()
				.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof(CrmRelationMappingAttribute))
					&& !Attribute.IsDefined(fieldQ, typeof(CrmFieldMappingAttribute))))
			{
				// get the value of the mapping attribute
				var mapping = relation.GetCustomAttribute<CrmRelationMappingAttribute>();
				// get the value of the field
				var value = relation.GetValue(this);
				// is the relation read only
				var isReadOnly = relation.GetCustomAttribute<ReadOnlyFieldAttribute>();

				// skip if no value
				if (isReadOnly != null || value == null || (value is Array && ((Array)value).Length <= 0))
				{
					continue;
				}

				SetRelationInCrmRecord(value, crmRecord, mapping, clearMode);
			}

			return crmRecord;
		}

		private void SetRelationInRecord(object value, FieldInfo fieldInfo)
		{
			var fields = GetType().GetFields()
				.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof (CrmRelationMappingAttribute))
				                 && !Attribute.IsDefined(fieldQ, typeof (CrmFieldMappingAttribute)));
			// get the field representing the relationship
			var relation = fields.First(fieldQ => fieldQ.Name == fieldInfo.Name.Split('_')[0]);
			// get the related entity type
			var fieldType = relation.FieldType;
			// get the target field in the related entity to set the value
			var field = fieldType.GetFields().First(fieldQ => fieldQ.Name == fieldInfo.Name.Substring(relation.Name.Length + 1));

			// get the relation value
			var record = relation.GetValue(this);

			if (record == null)
			{
				// create a new instance of the related entity if it's null
				record = Activator.CreateInstance(fieldType);
				// save the relation object in this entity
				relation.SetValue(this, record);
			}

			// set the field value in the related record
			field.SetValue(record, value);
		}

		private static void SetValueInCrmRecord<TCrmEntity>(object value, TCrmEntity crmRecord,
			string fieldName, CrmFieldMappingAttribute mapping, ClearMode? clearMode = null)
			where TCrmEntity : Entity
		{
			var crmProperty = GetCrmProperty<TCrmEntity>(mapping);

			// if property not found, then the entities don't map correctly
			if (crmProperty == null)
			{
				throw new Exception(string.Format("Entity doesn't map to CRM entity '{0}'.",
					typeof(TCrmEntity).Name));
			}
            
			// if no value, and clear mode is global, then clear
			if (value == null && clearMode == ClearMode.Empty)
			{
				crmRecord[mapping.LogicalName] = null;
			}
            
			// convert types
			if (value is Enum)
			{
			    // if clear mode is convention, and value fits convention, then clear
				crmRecord[mapping.LogicalName] = (((int) value) == -1 && clearMode == ClearMode.Convention) ? null : new OptionSetValue((int) value);
			}
			else if (value is decimal? && crmProperty.PropertyType == typeof(Money))
			{
				crmRecord[mapping.LogicalName] = (value.Equals(decimal.MinValue) && clearMode == ClearMode.Convention) ? null : new Money(((decimal?) value).Value);
			}
			else if (value is Guid? && fieldName != "Id"
					 && crmProperty.PropertyType != typeof(EntityReference))
			{
				crmProperty.SetValue(crmRecord, (value.Equals(Guid.Empty) && clearMode == ClearMode.Convention) ? null : (Guid?) value);
			}
			else
			{
			    // if clear mode is convention, and value fits convention, then clear
			    if (clearMode == ClearMode.Convention
                    && ((value is DateTime? && value.Equals(new DateTime(1970, 1, 1)))
                        || (value is int? && value.Equals(int.MinValue))
                        || (value is long? && value.Equals(long.MinValue))
                        || (value is decimal? && value.Equals(decimal.MinValue))
                        || (value is double? && value.Equals(double.MinValue))
                        || (value is string && value.Equals(""))))
			    {
				    crmProperty.SetValue(crmRecord, null);
			    }
                else
				{
                    crmProperty.SetValue(crmRecord, value);
                }
			}
		}

		/// <summary>
		///     Gets the property from the CRM entity that corresponds to this field -- same mapping
		/// </summary>
		/// <typeparam name="TCrmEntity">The type of the entity.</typeparam>
		/// <param name="mapping">The mapping.</param>
		/// <returns></returns>
		private static PropertyInfo GetCrmProperty<TCrmEntity>(CrmFieldMappingAttribute mapping)
			where TCrmEntity : Entity
		{
			var crmProperty = typeof(TCrmEntity).GetProperties()
				.FirstOrDefault(propertyQ =>
								{
									var fieldAttribute = propertyQ
										.GetCustomAttributes<AttributeLogicalNameAttribute>(true)
										.FirstOrDefault();

									return fieldAttribute != null
										   && fieldAttribute.LogicalName == mapping.LogicalName;
								});

			return crmProperty;
		}

		private static void SetRelationInCrmRecord<TCrmEntity>(object value, TCrmEntity crmRecord,
			CrmRelationMappingAttribute mapping, ClearMode? clearMode = null)
			where TCrmEntity : Entity
		{
			var crmRelation = GetCrmRelation<TCrmEntity>(mapping);

			// if relation not found, then the entities don't map correctly
			if (crmRelation == null)
			{
				throw new Exception(string.Format("Entity doesn't map to CRM entity '{0}'.",
					typeof(TCrmEntity).Name));
			}

			object convertedValue = null;

			// x-N relation
			if (value is Array)
			{
				var relatedRecords = (Array)value;
				// create an array for the related entities of the appropriate type
				var crmRelatedRecords = Array.CreateInstance(mapping.RelatedEntityType, relatedRecords.Length);

				// create the method reference that will be used to convert the related entities to the CRM entities
				var method = GetConversionMethod(relatedRecords.GetValue(0), mapping.RelatedEntityType);

				// convert all entities to CRM entities
				var objectCrmRelatedRecords = (from object relatedRecord in relatedRecords
											   select method.Invoke(relatedRecord, new object[] { clearMode })).ToArray();

				// copy the object entities to the array of the specific type
				Array.Copy(objectCrmRelatedRecords, crmRelatedRecords, crmRelatedRecords.Length);
				convertedValue = crmRelatedRecords;
			}
			else if (value is EntityContract)
			{
				// N-1 relation
				var method = GetConversionMethod(value, mapping.RelatedEntityType);
				convertedValue = method.Invoke(value, new object[] { clearMode });
			}

			// set the related entities value in the CRM entity
			crmRelation.SetValue(crmRecord, convertedValue);
		}

		private static MethodInfo GetConversionMethod(object entity, Type relatedType)
		{
			return entity.GetType().GetMethod("ConvertTo")
				.MakeGenericMethod(relatedType);
		}

		/// <summary>
		///     Gets the relation from the CRM entity that corresponds to this relation -- same mapping
		/// </summary>
		/// <typeparam name="TCrmEntity">The type of the entity.</typeparam>
		/// <param name="mapping">The mapping.</param>
		/// <returns></returns>
		private static PropertyInfo GetCrmRelation<TCrmEntity>(CrmRelationMappingAttribute mapping)
			where TCrmEntity : Entity
		{
			var crmRelation = typeof(TCrmEntity).GetProperties()
				.FirstOrDefault(propertyQ =>
								{
									var relationAttribute = propertyQ
										.GetCustomAttributes<RelationshipSchemaNameAttribute>(true)
										.FirstOrDefault();

									return relationAttribute != null
										   && relationAttribute.SchemaName == mapping.SchemaName
										   && relationAttribute.PrimaryEntityRole == mapping.Role;
								});

			return crmRelation;
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public static partial class GeneratorHelpers
	{
		#region Enums

		/// <summary>
		/// Get the value that corresponds to the label from the option-set,
		/// using the type of the class enclosing both, label type, and the language code given.
		/// </summary>
		/// <param name="labelType">The type of the class containing the labels; e.g.: 'typeof(Account.Enums.Labels.IndustryCode)'</param>
		/// <param name="label">The label to search for, corresponding to the value</param>
		/// <param name="languageCode">The language code from CRM</param>
		/// <returns>The value corresponding to the label</returns>
		public static int GetValue(Type labelType, string label, int languageCode = 1033)
		{
			var labelsType = labelType.DeclaringType;

			if (labelsType == null)
			{
				return -1;
			}

			var enumsType = labelsType.DeclaringType;

			if (enumsType == null)
			{
				return -1;
			}

			// get the fields with the same label from the label class
			var fields = labelType.GetFields()
				.Where(fieldQ => fieldQ.Name.Contains(languageCode.ToString())
					&& (string)fieldQ.GetValue(labelType) == label);

			if (!fields.Any())
			{
				return -1;
			}

			var field = fields.First();

			var entityType = enumsType.DeclaringType;

			if (entityType == null)
			{
				return -1;
			}

			var enumType = entityType.GetNestedType(labelType.Name + "Enum");

			if (enumType == null)
			{
				return -1;
			}

			// get the enum constant corresponding to the field name
			var enumConstant = Enum.Parse(enumType, field.Name.Replace("_" + languageCode, ""));

			return (int)enumConstant;
		}

		/// <summary>
		/// Gets the value corresponding to the option-set's label using its logical name,
		/// the value within, and the language code.
		/// </summary>
		/// <param name="logicalName">The logical name of the option-set in CRM</param>
		/// <param name="label">The label from the option-set</param>
		/// <param name="enumsType">The 'Enums' type; e.g.: 'typeof(Account.Enums)'</param>
		/// <param name="languageCode">The language code from CRM</param>
		/// <returns>The value corresponding to the label</returns>
		public static int GetValue(string logicalName, string label, Type enumsType, int languageCode = 1033)
		{
			var labelType = GetLabelType(enumsType, logicalName);

			return GetValue(labelType, label, languageCode);
		}

		private static Type GetEnumType(Type enumsType, string logicalName)
		{
			var field = GetLogicalNameField(enumsType, logicalName);

			var entityType = enumsType.DeclaringType;

			if (entityType == null)
			{
				throw new Exception("Can't find the entity type from the enum type.");
			}

			return field == null ? null : entityType.GetNestedType(field.Name + "Enum");
		}

		#endregion

		#region Labels

		/// <summary>
		/// Gets the label corresponding to the option-set's value using its logical name,
		/// the value within, and the language code.
		/// </summary>
		/// <param name="logicalName">The logical name of the option-set in CRM</param>
		/// <param name="constant">The value from the option-set</param>
		/// <param name="enumsType">The 'Enums' type; e.g.: 'typeof(Account.Enums)'</param>
		/// <param name="languageCode">The language code from CRM</param>
		/// <returns></returns>
		public static string GetLabel(string logicalName, int constant, Type enumsType, int languageCode = 1033)
		{
			var enumType = GetEnumType(enumsType, logicalName);

			if (enumType == null)
			{
				return "NO_LABEL";
			}

			var enumName = enumType.Name;
			var constantName = enumType.GetEnumName(constant);
			var labelsType = enumsType.GetNestedType("Labels");

			if (labelsType == null)
			{
				return "NO_LABEL";
			}

			var labelType = labelsType.GetNestedType(enumName.Substring(0, enumType.Name.LastIndexOf("Enum")));

			if (labelType == null)
			{
				return "NO_LABEL";
			}

			var field = labelType.GetField(constantName + "_" + languageCode);

			return field == null ? "NO_LABEL" : field.GetValue(labelType).ToString();
		}

		private static Type GetLabelType(Type enumsType, string logicalName)
		{
			var field = GetLogicalNameField(enumsType, logicalName);
			return enumsType.GetNestedType("Labels").GetNestedType(field.Name);
		}

		#endregion

		private static FieldInfo GetLogicalNameField(Type enumsType, string logicalName)
		{
			var namesType = enumsType.GetNestedType("Names");
			return namesType.GetFields().FirstOrDefault(fieldQ => (string)fieldQ.GetValue(namesType) == logicalName);
		}

		internal static QueryExpression GetLoadRelationQuery(Entity entity, IOrganizationService service,
			string fromEntityName, string toEntityName, string fromFieldName, string toFieldName,
			string idFieldName, string intersectIdFieldName, int limit = -1, int page = -1, string cookie = null,
			FilterExpression filter = null, params string[] attributes)
		{
			limit = limit <= 0 ? int.MaxValue : limit;

			// create the query taking into account paging
			var query = new QueryExpression(fromEntityName);
			query.LinkEntities.Add(new LinkEntity(fromEntityName, toEntityName, fromFieldName, toFieldName, JoinOperator.Inner));
			query.LinkEntities[0].EntityAlias = "linkedEntityAlias";
			query.Criteria.AddCondition("linkedEntityAlias", intersectIdFieldName, ConditionOperator.Equal, entity[idFieldName]);

			if (filter != null)
			{
				query.Criteria.AddFilter(filter);
			}

			if (attributes.Length == 1 && attributes[0] == "*")
			{
				query.ColumnSet = new ColumnSet(true);
			}
			else if (attributes.Length > 0)
			{
				query.ColumnSet = new ColumnSet(attributes);
			}
			else
			{
				query.ColumnSet = new ColumnSet(false);
			}

			query.PageInfo = new PagingInfo
			{
				PageNumber = page <= 0 ? 1 : page,
				Count = limit,
				PagingCookie = cookie
			};

			return query;
		}

		internal static List<Entity> LoadRelation(Entity entity, IOrganizationService service,
			string fromEntityName, string toEntityName, string fromFieldName, string toFieldName,
			string idFieldName, string intersectIdFieldName, int limit = -1, int page = -1,
			FilterExpression filter = null, string cookie = null, RelationPagingInfo relationPagingInfo = null, params string[] attributes)
		{
			return LoadRelation(service, GetLoadRelationQuery(entity, service, fromEntityName, toEntityName,
				fromFieldName, toFieldName, idFieldName, intersectIdFieldName, limit, page, cookie,
				filter, attributes), limit, page, cookie, relationPagingInfo);
		}

		public static List<Entity> LoadRelation(IOrganizationService service, QueryExpression query,
			int limit = -1, int page = -1, string cookie = null, RelationPagingInfo relationPagingInfo = null)
		{
			limit = limit <= 0 ? int.MaxValue : limit;
			query.PageInfo = query.PageInfo ??
				new PagingInfo
				{
					PageNumber = page <= 0 ? 1 : page,
					Count = limit
				};
			query.PageInfo.PagingCookie = cookie ?? relationPagingInfo.Cookie ?? query.PageInfo.PagingCookie;

			EntityCollection records;
			var entities = new List<Entity>();

			// get all records
			do
			{
				// fetch the records
				records = service.RetrieveMultiple(query);

				// next time get the next bundle of records
				query.PageInfo.PagingCookie = records.PagingCookie;
				query.PageInfo.PageNumber++;

				// add to existing list
				entities.AddRange(records.Entities);
			} while (records.MoreRecords && entities.Count < limit && page <= 0);

			if (relationPagingInfo != null)
			{
				relationPagingInfo.Cookie = query.PageInfo.PagingCookie;
				relationPagingInfo.NextPage = query.PageInfo.PageNumber;
				relationPagingInfo.IsMoreRecords = records.MoreRecords;
			}

			return entities.ToList();
		}

		/// <summary>
		/// Executes the queries in the query queue in each entity passed, and executes the action related to the query after.<br />
		/// Returns a list of errors per entity processed.
		/// </summary>
		/// <param name="service">CRM service to use to execute query.</param>
		/// <param name="entities">List of entities containing the queues.</param>
		public static IDictionary<GeneratedEntityBase, IList<string>> ProcessDeferredQueries(IOrganizationService service,
			params GeneratedEntityBase[] entities)
		{
            return ProcessDeferredQueries(service, 100, entities);
        }

		/// <summary>
		/// Executes the queries in the query queue in each entity passed, and executes the action related to the query after.<br />
		/// Returns a list of errors per entity processed.
		/// </summary>
		/// <param name="service">CRM service to use to execute query.</param>
		/// <param name="bulkSize">The number of requests from the queue to execute in each iteration.</param>
		/// <param name="entities">List of entities containing the queues.</param>
		internal static IDictionary<GeneratedEntityBase, IList<string>> ProcessDeferredQueries(IOrganizationService service,
			int bulkSize, params GeneratedEntityBase[] entities)
		{
			var errorList = new Dictionary<GeneratedEntityBase, IList<string>>();

			// exit if no entities to process
			if (!entities.Any()) return errorList;
            
            bulkSize = Math.Min(1000, bulkSize);

			// filter entities to only the ones with a queue
			entities = entities.Where(entity => entity.DeferredQueriesList.Any()).ToArray();

			// queue to assign errors to proper entity and to find the original query and invoke the action
			var queryActionQueue = new Queue<KeyValuePair<GeneratedEntityBase, QueryAction>>();

			// create a queue to support paging in bulk execution
			var requestsQueue = new Queue<OrganizationRequest>();

			// go over the entities and fill the queues
			foreach (var entity in entities)
			{
				foreach (var queryAction in entity.DeferredQueriesList)
				{
					queryActionQueue.Enqueue(new KeyValuePair<GeneratedEntityBase, QueryAction>(entity, queryAction));
					requestsQueue.Enqueue(new RetrieveMultipleRequest {Query = queryAction.Query});
				}
			}

			var bulkQuery = new ExecuteMultipleRequest
			{
				Settings = new ExecuteMultipleSettings
				{
					ContinueOnError = true,
					ReturnResponses = true
				},
				Requests = new OrganizationRequestCollection()
			};

			while (requestsQueue.Any())
			{
				bulkQuery.Requests.Clear();

				// page execution
				do
				{
					bulkQuery.Requests.Add(requestsQueue.Dequeue());
				} while (bulkQuery.Requests.Count % bulkSize != 0 && requestsQueue.Any());

				var result = (ExecuteMultipleResponse) service.Execute(bulkQuery);

				foreach (var response in result.Responses)
				{
					var queryAction = queryActionQueue.Dequeue();
					var entity = queryAction.Key;

					// parse fault
					if (response.Fault != null)
					{
						if (!errorList.ContainsKey(entity))
						{
							errorList.Add(entity, new List<string>());
						}

						errorList[entity].Add(string.Format("Error code: {0}.\nError message: {1}.",
							response.Fault.ErrorCode, response.Fault.Message)
													 + (!string.IsNullOrEmpty(response.Fault.TraceText)
															? "\nError trace: " + response.Fault.TraceText
															: ""));

						continue;
					}

					queryAction.Value.Action.Invoke(response.Response);
				}
			}

			return errorList;
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
    public class EntityComparer : IEqualityComparer<Entity>
    {
        public bool Equals(Entity x, Entity y)
        {
            return x.Id == y.Id;
        }

        public int GetHashCode(Entity obj)
        {
            return obj.Id.GetHashCode();
        }
    }

	#endregion

	#region Actions

	#endregion

	#region Known Types

	[KnownType(typeof(SystemFormViewModel)),
		KnownType(typeof(UserViewModel))]
	public partial class EntityContract
	{
	}

	#endregion

	#region Entities

	#region ActivityParty

	/// <summary>
	/// 'ActivityParty'.<br />
	/// Person or group associated with an activity. An activity can have multiple activity parties.
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract, EntityLogicalName("activityparty")]
	public partial class ActivityParty : GeneratedEntity<ActivityParty.RelationName>
	{
		
		public ActivityParty() : 
				base(EntityLogicalName)
		{
		}
		
		public const string DisplayName = "Activity Party";
		public const string SchemaName = "ActivityParty";
		public const string EntityLogicalName = "activityparty";
		public const int EntityTypeCode = 135;
		
		public class RelationName : RelationNameBase
		{
			public RelationName(string name) : base(name)
			{}
		}


		#region Metadata


		#endregion
	}

	#endregion

	#region Organization

	/// <summary>
	/// 'Organization'.<br />
	/// Top level of the Microsoft Dynamics 365 business hierarchy. The organization can be a specific business, holding company, or corporation.
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract, EntityLogicalName("organization")]
	public partial class Organization : GeneratedEntity<Organization.RelationName>
	{
		
		public Organization() : 
				base(EntityLogicalName)
		{
		}
		
		public const string DisplayName = "Organization";
		public const string SchemaName = "Organization";
		public const string EntityLogicalName = "organization";
		public const int EntityTypeCode = 1019;
		
		public class RelationName : RelationNameBase
		{
			public RelationName(string name) : base(name)
			{}
		}


		#region Attributes

		[AttributeLogicalName("organizationid"), DataMember]
		public override System.Guid Id
		{
			get
			{
				return (OrganizationId == null || OrganizationId == Guid.Empty) ? base.Id : OrganizationId.GetValueOrDefault();
			}
			
			set
			{
                if (value == Guid.Empty) {
                    Attributes.Remove("organizationid");
                    base.Id = value;
                } else {
				    OrganizationId = value;
                }
			}
		}

        /// <summary>
        /// [MaximumLength=500] 
		/// 'ACIWebEndpointUrl'.<br />
        /// ACI Web Endpoint URL.
        /// </summary>
		[AttributeLogicalName("aciwebendpointurl"), MaxLength(500)]
		public string ACITenantURL
		{
			get
			{
				var value = GetAttributeValue<string>("aciwebendpointurl");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("aciwebendpointurl"))
				    value = (string) backupAttributeCollection["aciwebendpointurl"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ACITenantURL");
					SetAttributeValue("aciwebendpointurl", value);
				OnPropertyChanged("ACITenantURL");
			}
		}

        /// <summary>
        ///  
		/// 'AcknowledgementTemplateId'.<br />
        /// Unique identifier of the template to be used for acknowledgement when a user unsubscribes.
        /// </summary>
		[AttributeLogicalName("acknowledgementtemplateid")]
		public Guid? AcknowledgementTemplate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("acknowledgementtemplateid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("acknowledgementtemplateid"))
				    value = (EntityReference) backupAttributeCollection["acknowledgementtemplateid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("AcknowledgementTemplate");
                if (value != null)
				    SetAttributeValue("acknowledgementtemplateid", new EntityReference("template", value.Value));
                else
					SetAttributeValue("acknowledgementtemplateid", value);
				OnPropertyChanged("AcknowledgementTemplate");
			}
		}

        public string AcknowledgementTemplateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("acknowledgementtemplateid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("acknowledgementtemplateid"))
				    value = (EntityReference) backupAttributeCollection["acknowledgementtemplateid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'AllowAddressBookSyncs'.<br />
        /// Indicates whether background address book synchronization in Microsoft Office Outlook is allowed.
        /// </summary>
		[AttributeLogicalName("allowaddressbooksyncs")]
		public bool? AllowAddressBookSynchronization
		{
			get
			{
				var value = GetAttributeValue<bool?>("allowaddressbooksyncs");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("allowaddressbooksyncs"))
				    value = (bool?) backupAttributeCollection["allowaddressbooksyncs"];
			    return value;
			}
			set
			{
				OnPropertyChanging("AllowAddressBookSynchronization");
					SetAttributeValue("allowaddressbooksyncs", value);
				OnPropertyChanged("AllowAddressBookSynchronization");
			}
		}

        /// <summary>
        ///  
		/// 'AllowAutoResponseCreation'.<br />
        /// Indicates whether automatic response creation is allowed.
        /// </summary>
		[AttributeLogicalName("allowautoresponsecreation")]
		public bool? AllowAutomaticResponseCreation
		{
			get
			{
				var value = GetAttributeValue<bool?>("allowautoresponsecreation");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("allowautoresponsecreation"))
				    value = (bool?) backupAttributeCollection["allowautoresponsecreation"];
			    return value;
			}
			set
			{
				OnPropertyChanging("AllowAutomaticResponseCreation");
					SetAttributeValue("allowautoresponsecreation", value);
				OnPropertyChanged("AllowAutomaticResponseCreation");
			}
		}

        /// <summary>
        ///  
		/// 'AllowAutoUnsubscribe'.<br />
        /// Indicates whether automatic unsubscribe is allowed.
        /// </summary>
		[AttributeLogicalName("allowautounsubscribe")]
		public bool? AllowAutomaticUnsubscribe
		{
			get
			{
				var value = GetAttributeValue<bool?>("allowautounsubscribe");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("allowautounsubscribe"))
				    value = (bool?) backupAttributeCollection["allowautounsubscribe"];
			    return value;
			}
			set
			{
				OnPropertyChanging("AllowAutomaticUnsubscribe");
					SetAttributeValue("allowautounsubscribe", value);
				OnPropertyChanged("AllowAutomaticUnsubscribe");
			}
		}

        /// <summary>
        ///  
		/// 'AllowAutoUnsubscribeAcknowledgement'.<br />
        /// Indicates whether automatic unsubscribe acknowledgement email is allowed to send.
        /// </summary>
		[AttributeLogicalName("allowautounsubscribeacknowledgement")]
		public bool? AllowAutomaticUnsubscribeAcknowledgement
		{
			get
			{
				var value = GetAttributeValue<bool?>("allowautounsubscribeacknowledgement");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("allowautounsubscribeacknowledgement"))
				    value = (bool?) backupAttributeCollection["allowautounsubscribeacknowledgement"];
			    return value;
			}
			set
			{
				OnPropertyChanging("AllowAutomaticUnsubscribeAcknowledgement");
					SetAttributeValue("allowautounsubscribeacknowledgement", value);
				OnPropertyChanged("AllowAutomaticUnsubscribeAcknowledgement");
			}
		}

        /// <summary>
        ///  
		/// 'AllowClientMessageBarAd'.<br />
        /// Indicates whether Outlook Client message bar advertisement is allowed.
        /// </summary>
		[AttributeLogicalName("allowclientmessagebarad")]
		public bool? AllowOutlookClientMessageBarAdvertisement
		{
			get
			{
				var value = GetAttributeValue<bool?>("allowclientmessagebarad");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("allowclientmessagebarad"))
				    value = (bool?) backupAttributeCollection["allowclientmessagebarad"];
			    return value;
			}
			set
			{
				OnPropertyChanging("AllowOutlookClientMessageBarAdvertisement");
					SetAttributeValue("allowclientmessagebarad", value);
				OnPropertyChanged("AllowOutlookClientMessageBarAdvertisement");
			}
		}

        /// <summary>
        ///  
		/// 'AllowEntityOnlyAudit'.<br />
        /// Indicates whether auditing of changes to entity is allowed when no attributes have changed.
        /// </summary>
		[AttributeLogicalName("allowentityonlyaudit")]
		public bool? AllowEntityLevelAuditing
		{
			get
			{
				var value = GetAttributeValue<bool?>("allowentityonlyaudit");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("allowentityonlyaudit"))
				    value = (bool?) backupAttributeCollection["allowentityonlyaudit"];
			    return value;
			}
			set
			{
				OnPropertyChanging("AllowEntityLevelAuditing");
					SetAttributeValue("allowentityonlyaudit", value);
				OnPropertyChanged("AllowEntityLevelAuditing");
			}
		}

        /// <summary>
        ///  
		/// 'AllowMarketingEmailExecution'.<br />
        /// Indicates whether marketing emails execution is allowed.
        /// </summary>
		[AttributeLogicalName("allowmarketingemailexecution")]
		public bool? AllowMarketingEmailExecution
		{
			get
			{
				var value = GetAttributeValue<bool?>("allowmarketingemailexecution");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("allowmarketingemailexecution"))
				    value = (bool?) backupAttributeCollection["allowmarketingemailexecution"];
			    return value;
			}
			set
			{
				OnPropertyChanging("AllowMarketingEmailExecution");
					SetAttributeValue("allowmarketingemailexecution", value);
				OnPropertyChanged("AllowMarketingEmailExecution");
			}
		}

        /// <summary>
        ///  
		/// 'AllowOfflineScheduledSyncs'.<br />
        /// Indicates whether background offline synchronization in Microsoft Office Outlook is allowed.
        /// </summary>
		[AttributeLogicalName("allowofflinescheduledsyncs")]
		public bool? AllowOfflineScheduledSynchronization
		{
			get
			{
				var value = GetAttributeValue<bool?>("allowofflinescheduledsyncs");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("allowofflinescheduledsyncs"))
				    value = (bool?) backupAttributeCollection["allowofflinescheduledsyncs"];
			    return value;
			}
			set
			{
				OnPropertyChanging("AllowOfflineScheduledSynchronization");
					SetAttributeValue("allowofflinescheduledsyncs", value);
				OnPropertyChanged("AllowOfflineScheduledSynchronization");
			}
		}

        /// <summary>
        ///  
		/// 'AllowOutlookScheduledSyncs'.<br />
        /// Indicates whether scheduled synchronizations to Outlook are allowed.
        /// </summary>
		[AttributeLogicalName("allowoutlookscheduledsyncs")]
		public bool? AllowScheduledSynchronization
		{
			get
			{
				var value = GetAttributeValue<bool?>("allowoutlookscheduledsyncs");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("allowoutlookscheduledsyncs"))
				    value = (bool?) backupAttributeCollection["allowoutlookscheduledsyncs"];
			    return value;
			}
			set
			{
				OnPropertyChanging("AllowScheduledSynchronization");
					SetAttributeValue("allowoutlookscheduledsyncs", value);
				OnPropertyChanged("AllowScheduledSynchronization");
			}
		}

        /// <summary>
        ///  
		/// 'AllowUnresolvedPartiesOnEmailSend'.<br />
        /// Indicates whether users are allowed to send email to unresolved parties (parties must still have an email address).
        /// </summary>
		[AttributeLogicalName("allowunresolvedpartiesonemailsend")]
		public bool? AllowUnresolvedAddressEmailSend
		{
			get
			{
				var value = GetAttributeValue<bool?>("allowunresolvedpartiesonemailsend");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("allowunresolvedpartiesonemailsend"))
				    value = (bool?) backupAttributeCollection["allowunresolvedpartiesonemailsend"];
			    return value;
			}
			set
			{
				OnPropertyChanging("AllowUnresolvedAddressEmailSend");
					SetAttributeValue("allowunresolvedpartiesonemailsend", value);
				OnPropertyChanged("AllowUnresolvedAddressEmailSend");
			}
		}

        /// <summary>
        ///  
		/// 'AllowUserFormModePreference'.<br />
        /// Indicates whether individuals can select their form mode preference in their personal options.
        /// </summary>
		[AttributeLogicalName("allowuserformmodepreference")]
		public bool? AllowUserFormModePreference
		{
			get
			{
				var value = GetAttributeValue<bool?>("allowuserformmodepreference");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("allowuserformmodepreference"))
				    value = (bool?) backupAttributeCollection["allowuserformmodepreference"];
			    return value;
			}
			set
			{
				OnPropertyChanging("AllowUserFormModePreference");
					SetAttributeValue("allowuserformmodepreference", value);
				OnPropertyChanged("AllowUserFormModePreference");
			}
		}

        /// <summary>
        ///  
		/// 'AllowUsersSeeAppdownloadMessage'.<br />
        /// Indicates whether the showing tablet application notification bars in a browser is allowed.
        /// </summary>
		[AttributeLogicalName("allowusersseeappdownloadmessage")]
		public bool? Allowtheshowingtabletapplicationnotificationbarsinabrowser
		{
			get
			{
				var value = GetAttributeValue<bool?>("allowusersseeappdownloadmessage");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("allowusersseeappdownloadmessage"))
				    value = (bool?) backupAttributeCollection["allowusersseeappdownloadmessage"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Allowtheshowingtabletapplicationnotificationbarsinabrowser");
					SetAttributeValue("allowusersseeappdownloadmessage", value);
				OnPropertyChanged("Allowtheshowingtabletapplicationnotificationbarsinabrowser");
			}
		}

        /// <summary>
        ///  
		/// 'AllowWebExcelExport'.<br />
        /// Indicates whether Web-based export of grids to Microsoft Office Excel is allowed.
        /// </summary>
		[AttributeLogicalName("allowwebexcelexport")]
		public bool? AllowExporttoExcel
		{
			get
			{
				var value = GetAttributeValue<bool?>("allowwebexcelexport");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("allowwebexcelexport"))
				    value = (bool?) backupAttributeCollection["allowwebexcelexport"];
			    return value;
			}
			set
			{
				OnPropertyChanging("AllowExporttoExcel");
					SetAttributeValue("allowwebexcelexport", value);
				OnPropertyChanged("AllowExporttoExcel");
			}
		}

        /// <summary>
        /// [MaximumLength=25] 
		/// 'AMDesignator'.<br />
        /// AM designator to use throughout Microsoft Dynamics CRM.
        /// </summary>
		[AttributeLogicalName("amdesignator"), MaxLength(25)]
		public string AMDesignator
		{
			get
			{
				var value = GetAttributeValue<string>("amdesignator");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("amdesignator"))
				    value = (string) backupAttributeCollection["amdesignator"];
			    return value;
			}
			set
			{
				OnPropertyChanging("AMDesignator");
					SetAttributeValue("amdesignator", value);
				OnPropertyChanged("AMDesignator");
			}
		}

        /// <summary>
        ///  
		/// 'AppDesignerExperienceEnabled'.<br />
        /// Indicates whether the appDesignerExperience is enabled for the organization.
        /// </summary>
		[AttributeLogicalName("appdesignerexperienceenabled")]
		public bool? EnableAppDesignerExperienceforthisOrganization
		{
			get
			{
				var value = GetAttributeValue<bool?>("appdesignerexperienceenabled");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("appdesignerexperienceenabled"))
				    value = (bool?) backupAttributeCollection["appdesignerexperienceenabled"];
			    return value;
			}
			set
			{
				OnPropertyChanging("EnableAppDesignerExperienceforthisOrganization");
					SetAttributeValue("appdesignerexperienceenabled", value);
				OnPropertyChanged("EnableAppDesignerExperienceforthisOrganization");
			}
		}

        /// <summary>
        ///  
		/// 'AutoApplyDefaultonCaseCreate'.<br />
        /// Select whether to auto apply the default customer entitlement on case creation.
        /// </summary>
		[AttributeLogicalName("autoapplydefaultoncasecreate")]
		public bool? AutoApplyDefaultEntitlementonCaseCreate
		{
			get
			{
				var value = GetAttributeValue<bool?>("autoapplydefaultoncasecreate");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("autoapplydefaultoncasecreate"))
				    value = (bool?) backupAttributeCollection["autoapplydefaultoncasecreate"];
			    return value;
			}
			set
			{
				OnPropertyChanging("AutoApplyDefaultEntitlementonCaseCreate");
					SetAttributeValue("autoapplydefaultoncasecreate", value);
				OnPropertyChanged("AutoApplyDefaultEntitlementonCaseCreate");
			}
		}

        /// <summary>
        ///  
		/// 'AutoApplyDefaultonCaseUpdate'.<br />
        /// Select whether to auto apply the default customer entitlement on case update.
        /// </summary>
		[AttributeLogicalName("autoapplydefaultoncaseupdate")]
		public bool? AutoApplyDefaultEntitlementonCaseUpdate
		{
			get
			{
				var value = GetAttributeValue<bool?>("autoapplydefaultoncaseupdate");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("autoapplydefaultoncaseupdate"))
				    value = (bool?) backupAttributeCollection["autoapplydefaultoncaseupdate"];
			    return value;
			}
			set
			{
				OnPropertyChanging("AutoApplyDefaultEntitlementonCaseUpdate");
					SetAttributeValue("autoapplydefaultoncaseupdate", value);
				OnPropertyChanged("AutoApplyDefaultEntitlementonCaseUpdate");
			}
		}

        /// <summary>
        ///  
		/// 'AutoApplySLA'.<br />
        /// Indicates whether to Auto-apply SLA on case record update after SLA was manually applied.
        /// </summary>
		[AttributeLogicalName("autoapplysla")]
		public bool? IsAutoapplySLAAfterManuallyOverriding
		{
			get
			{
				var value = GetAttributeValue<bool?>("autoapplysla");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("autoapplysla"))
				    value = (bool?) backupAttributeCollection["autoapplysla"];
			    return value;
			}
			set
			{
				OnPropertyChanging("IsAutoapplySLAAfterManuallyOverriding");
					SetAttributeValue("autoapplysla", value);
				OnPropertyChanged("IsAutoapplySLAAfterManuallyOverriding");
			}
		}

        /// <summary>
        /// [MaximumLength=100] 
		/// 'AzureSchedulerJobCollectionName'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("azureschedulerjobcollectionname"), MaxLength(100)]
		public string Forinternaluseonly_AzureSchedulerJobCollectionName
		{
			get
			{
				var value = GetAttributeValue<string>("azureschedulerjobcollectionname");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("azureschedulerjobcollectionname"))
				    value = (string) backupAttributeCollection["azureschedulerjobcollectionname"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Forinternaluseonly_AzureSchedulerJobCollectionName");
					SetAttributeValue("azureschedulerjobcollectionname", value);
				OnPropertyChanged("Forinternaluseonly_AzureSchedulerJobCollectionName");
			}
		}

        /// <summary>
        ///  
		/// 'BaseCurrencyId'.<br />
        /// Unique identifier of the base currency of the organization.
        /// </summary>
		[AttributeLogicalName("basecurrencyid")]
		public Guid? Currency
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("basecurrencyid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("basecurrencyid"))
				    value = (EntityReference) backupAttributeCollection["basecurrencyid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("Currency");
                if (value != null)
				    SetAttributeValue("basecurrencyid", new EntityReference("transactioncurrency", value.Value));
                else
					SetAttributeValue("basecurrencyid", value);
				OnPropertyChanged("Currency");
			}
		}

        public string CurrencyName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("basecurrencyid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("basecurrencyid"))
				    value = (EntityReference) backupAttributeCollection["basecurrencyid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        /// [Range(0, 4)] 
		/// 'BaseCurrencyPrecision'.<br />
        /// Number of decimal places that can be used for the base currency.
        /// </summary>
		[AttributeLogicalName("basecurrencyprecision"), InRange("0", "4", typeof(int))]
		public int? BaseCurrencyPrecision
		{
			get
			{
				var value = GetAttributeValue<int?>("basecurrencyprecision");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("basecurrencyprecision"))
				    value = (int?) backupAttributeCollection["basecurrencyprecision"];
			    return value;
			}
			set
			{
				OnPropertyChanging("BaseCurrencyPrecision");
					SetAttributeValue("basecurrencyprecision", value);
				OnPropertyChanged("BaseCurrencyPrecision");
			}
		}

        /// <summary>
        /// [MaximumLength=5] 
		/// 'BaseCurrencySymbol'.<br />
        /// Symbol used for the base currency.
        /// </summary>
		[AttributeLogicalName("basecurrencysymbol"), MaxLength(5)]
		public string BaseCurrencySymbol
		{
			get
			{
				var value = GetAttributeValue<string>("basecurrencysymbol");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("basecurrencysymbol"))
				    value = (string) backupAttributeCollection["basecurrencysymbol"];
			    return value;
			}
			set
			{
				OnPropertyChanging("BaseCurrencySymbol");
					SetAttributeValue("basecurrencysymbol", value);
				OnPropertyChanged("BaseCurrencySymbol");
			}
		}

        /// <summary>
        /// [MaximumLength=1024] 
		/// 'BingMapsApiKey'.<br />
        /// Api Key to be used in requests to Bing Maps services.
        /// </summary>
		[AttributeLogicalName("bingmapsapikey"), MaxLength(1024)]
		public string BingMapsAPIKey
		{
			get
			{
				var value = GetAttributeValue<string>("bingmapsapikey");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("bingmapsapikey"))
				    value = (string) backupAttributeCollection["bingmapsapikey"];
			    return value;
			}
			set
			{
				OnPropertyChanging("BingMapsAPIKey");
					SetAttributeValue("bingmapsapikey", value);
				OnPropertyChanged("BingMapsAPIKey");
			}
		}

        /// <summary>
        /// [MaximumLength=1073741823] 
		/// 'BlockedAttachments'.<br />
        /// Prevent upload or download of certain attachment types that are considered dangerous.
        /// </summary>
		[AttributeLogicalName("blockedattachments"), MaxLength(1073741823)]
		public string BlockAttachments
		{
			get
			{
				var value = GetAttributeValue<string>("blockedattachments");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("blockedattachments"))
				    value = (string) backupAttributeCollection["blockedattachments"];
			    return value;
			}
			set
			{
				OnPropertyChanging("BlockAttachments");
					SetAttributeValue("blockedattachments", value);
				OnPropertyChanged("BlockAttachments");
			}
		}

        /// <summary>
        /// [MaximumLength=20] 
		/// 'BulkOperationPrefix'.<br />
        /// Prefix used for bulk operation numbering.
        /// </summary>
		[AttributeLogicalName("bulkoperationprefix"), MaxLength(20)]
		public string BulkOperationPrefix
		{
			get
			{
				var value = GetAttributeValue<string>("bulkoperationprefix");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("bulkoperationprefix"))
				    value = (string) backupAttributeCollection["bulkoperationprefix"];
			    return value;
			}
			set
			{
				OnPropertyChanging("BulkOperationPrefix");
					SetAttributeValue("bulkoperationprefix", value);
				OnPropertyChanged("BulkOperationPrefix");
			}
		}

        /// <summary>
        ///  
		/// 'BusinessClosureCalendarId'.<br />
        /// Unique identifier of the business closure calendar of organization.
        /// </summary>
		[AttributeLogicalName("businessclosurecalendarid")]
		public Guid? BusinessClosureCalendar
		{
			get
			{
				var value = GetAttributeValue<Guid?>("businessclosurecalendarid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("businessclosurecalendarid"))
				    value = (Guid?) backupAttributeCollection["businessclosurecalendarid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("BusinessClosureCalendar");
					SetAttributeValue("businessclosurecalendarid", value);
				OnPropertyChanged("BusinessClosureCalendar");
			}
		}

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'CalendarType'.<br />
        /// Calendar type for the system. Set to Gregorian US by default.
        /// </summary>
		[AttributeLogicalName("calendartype"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? CalendarType
		{
			get
			{
				var value = GetAttributeValue<int?>("calendartype");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("calendartype"))
				    value = (int?) backupAttributeCollection["calendartype"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CalendarType");
					SetAttributeValue("calendartype", value);
				OnPropertyChanged("CalendarType");
			}
		}

        /// <summary>
        /// [MaximumLength=20] 
		/// 'CampaignPrefix'.<br />
        /// Prefix used for campaign numbering.
        /// </summary>
		[AttributeLogicalName("campaignprefix"), MaxLength(20)]
		public string CampaignPrefix
		{
			get
			{
				var value = GetAttributeValue<string>("campaignprefix");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("campaignprefix"))
				    value = (string) backupAttributeCollection["campaignprefix"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CampaignPrefix");
					SetAttributeValue("campaignprefix", value);
				OnPropertyChanged("CampaignPrefix");
			}
		}

        /// <summary>
        ///  
		/// 'CascadeStatusUpdate'.<br />
        /// Flag to cascade Update on incident.
        /// </summary>
		[AttributeLogicalName("cascadestatusupdate")]
		public bool? CascadeStatusUpdate
		{
			get
			{
				var value = GetAttributeValue<bool?>("cascadestatusupdate");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("cascadestatusupdate"))
				    value = (bool?) backupAttributeCollection["cascadestatusupdate"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CascadeStatusUpdate");
					SetAttributeValue("cascadestatusupdate", value);
				OnPropertyChanged("CascadeStatusUpdate");
			}
		}

        /// <summary>
        /// [MaximumLength=20] 
		/// 'CasePrefix'.<br />
        /// Prefix to use for all cases throughout Microsoft Dynamics 365.
        /// </summary>
		[AttributeLogicalName("caseprefix"), MaxLength(20)]
		public string CasePrefix
		{
			get
			{
				var value = GetAttributeValue<string>("caseprefix");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("caseprefix"))
				    value = (string) backupAttributeCollection["caseprefix"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CasePrefix");
					SetAttributeValue("caseprefix", value);
				OnPropertyChanged("CasePrefix");
			}
		}

        /// <summary>
        /// [MaximumLength=20] 
		/// 'CategoryPrefix'.<br />
        /// Type the prefix to use for all categories in Microsoft Dynamics 365.
        /// </summary>
		[AttributeLogicalName("categoryprefix"), MaxLength(20)]
		public string CategoryPrefix
		{
			get
			{
				var value = GetAttributeValue<string>("categoryprefix");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("categoryprefix"))
				    value = (string) backupAttributeCollection["categoryprefix"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CategoryPrefix");
					SetAttributeValue("categoryprefix", value);
				OnPropertyChanged("CategoryPrefix");
			}
		}

        /// <summary>
        /// [MaximumLength=20] 
		/// 'ContractPrefix'.<br />
        /// Prefix to use for all contracts throughout Microsoft Dynamics 365.
        /// </summary>
		[AttributeLogicalName("contractprefix"), MaxLength(20)]
		public string ContractPrefix
		{
			get
			{
				var value = GetAttributeValue<string>("contractprefix");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("contractprefix"))
				    value = (string) backupAttributeCollection["contractprefix"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ContractPrefix");
					SetAttributeValue("contractprefix", value);
				OnPropertyChanged("ContractPrefix");
			}
		}

        /// <summary>
        ///  
		/// 'CortanaProactiveExperienceEnabled'.<br />
        /// Indicates whether the feature CortanaProactiveExperience Flow processes should be enabled for the organization.
        /// </summary>
		[AttributeLogicalName("cortanaproactiveexperienceenabled")]
		public bool? EnableCortanaProactiveExperienceFlowprocessesforthisOrganization
		{
			get
			{
				var value = GetAttributeValue<bool?>("cortanaproactiveexperienceenabled");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("cortanaproactiveexperienceenabled"))
				    value = (bool?) backupAttributeCollection["cortanaproactiveexperienceenabled"];
			    return value;
			}
			set
			{
				OnPropertyChanging("EnableCortanaProactiveExperienceFlowprocessesforthisOrganization");
					SetAttributeValue("cortanaproactiveexperienceenabled", value);
				OnPropertyChanged("EnableCortanaProactiveExperienceFlowprocessesforthisOrganization");
			}
		}

        /// <summary>
        ///  
		/// 'CreatedBy'.<br />
        /// Unique identifier of the user who created the organization.
        /// </summary>
		[AttributeLogicalName("createdby")]
		public Guid? CreatedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdby"))
				    value = (EntityReference) backupAttributeCollection["createdby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CreatedBy");
                if (value != null)
				    SetAttributeValue("createdby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("createdby", value);
				OnPropertyChanged("CreatedBy");
			}
		}

        public string CreatedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdby"))
				    value = (EntityReference) backupAttributeCollection["createdby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'CreatedOn'.<br />
        /// Date and time when the organization was created.
        /// </summary>
		[AttributeLogicalName("createdon")]
		public DateTime? CreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("createdon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdon"))
				    value = (DateTime?) backupAttributeCollection["createdon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CreatedOn");
					SetAttributeValue("createdon", value);
				OnPropertyChanged("CreatedOn");
			}
		}

        /// <summary>
        ///  
		/// 'CreatedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who created the organization.
        /// </summary>
		[AttributeLogicalName("createdonbehalfby")]
		public Guid? CreatedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["createdonbehalfby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CreatedByDelegate");
                if (value != null)
				    SetAttributeValue("createdonbehalfby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("createdonbehalfby", value);
				OnPropertyChanged("CreatedByDelegate");
			}
		}

        public string CreatedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["createdonbehalfby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'CreateProductsWithoutParentInActiveState'.<br />
        /// Enable Initial state of newly created products to be Active instead of Draft
        /// </summary>
		[AttributeLogicalName("createproductswithoutparentinactivestate")]
		public bool? EnableActiveInitialProductState
		{
			get
			{
				var value = GetAttributeValue<bool?>("createproductswithoutparentinactivestate");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createproductswithoutparentinactivestate"))
				    value = (bool?) backupAttributeCollection["createproductswithoutparentinactivestate"];
			    return value;
			}
			set
			{
				OnPropertyChanging("EnableActiveInitialProductState");
					SetAttributeValue("createproductswithoutparentinactivestate", value);
				OnPropertyChanged("EnableActiveInitialProductState");
			}
		}

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'CurrencyDecimalPrecision'.<br />
        /// Number of decimal places that can be used for currency.
        /// </summary>
		[AttributeLogicalName("currencydecimalprecision"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? CurrencyDecimalPrecision
		{
			get
			{
				var value = GetAttributeValue<int?>("currencydecimalprecision");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("currencydecimalprecision"))
				    value = (int?) backupAttributeCollection["currencydecimalprecision"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CurrencyDecimalPrecision");
					SetAttributeValue("currencydecimalprecision", value);
				OnPropertyChanged("CurrencyDecimalPrecision");
			}
		}

        /// <summary>
        ///  
		/// 'CurrencyDisplayOption'.<br />
        /// Indicates whether to display money fields with currency code or currency symbol.
        /// </summary>
		[AttributeLogicalName("currencydisplayoption")]
		public DisplayCurrenciesUsingEnum? DisplayCurrenciesUsing
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("currencydisplayoption");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("currencydisplayoption"))
				    value = (OptionSetValue) backupAttributeCollection["currencydisplayoption"];
                return value == null ? (DisplayCurrenciesUsingEnum?) null : (DisplayCurrenciesUsingEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("DisplayCurrenciesUsing");
                if (value != null)
				    SetAttributeValue("currencydisplayoption", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("currencydisplayoption", value);
				OnPropertyChanged("DisplayCurrenciesUsing");
			}
		}

        /// <summary>
        ///  
		/// 'CurrencyFormatCode'.<br />
        /// Information about how currency symbols are placed throughout Microsoft Dynamics CRM.
        /// </summary>
		[AttributeLogicalName("currencyformatcode")]
		public CurrencyFormatCodeEnum? CurrencyFormatCode
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("currencyformatcode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("currencyformatcode"))
				    value = (OptionSetValue) backupAttributeCollection["currencyformatcode"];
                return value == null ? (CurrencyFormatCodeEnum?) null : (CurrencyFormatCodeEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("CurrencyFormatCode");
                if (value != null)
				    SetAttributeValue("currencyformatcode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("currencyformatcode", value);
				OnPropertyChanged("CurrencyFormatCode");
			}
		}

        /// <summary>
        /// [MaximumLength=13] 
		/// 'CurrencySymbol'.<br />
        /// Symbol used for currency throughout Microsoft Dynamics 365.
        /// </summary>
		[AttributeLogicalName("currencysymbol"), MaxLength(13)]
		public string CurrencySymbol
		{
			get
			{
				var value = GetAttributeValue<string>("currencysymbol");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("currencysymbol"))
				    value = (string) backupAttributeCollection["currencysymbol"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CurrencySymbol");
					SetAttributeValue("currencysymbol", value);
				OnPropertyChanged("CurrencySymbol");
			}
		}

        /// <summary>
        /// [Range(0, 2147483647)] 
		/// 'CurrentBulkOperationNumber'.<br />
        /// Current bulk operation number.
        /// </summary>
		[AttributeLogicalName("currentbulkoperationnumber"), InRange("0", "2147483647", typeof(int))]
		public int? CurrentBulkOperationNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("currentbulkoperationnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("currentbulkoperationnumber"))
				    value = (int?) backupAttributeCollection["currentbulkoperationnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CurrentBulkOperationNumber");
					SetAttributeValue("currentbulkoperationnumber", value);
				OnPropertyChanged("CurrentBulkOperationNumber");
			}
		}

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'CurrentCampaignNumber'.<br />
        /// Current campaign number.
        /// </summary>
		[AttributeLogicalName("currentcampaignnumber"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? CurrentCampaignNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("currentcampaignnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("currentcampaignnumber"))
				    value = (int?) backupAttributeCollection["currentcampaignnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CurrentCampaignNumber");
					SetAttributeValue("currentcampaignnumber", value);
				OnPropertyChanged("CurrentCampaignNumber");
			}
		}

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'CurrentCaseNumber'.<br />
        /// First case number to use.
        /// </summary>
		[AttributeLogicalName("currentcasenumber"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? CurrentCaseNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("currentcasenumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("currentcasenumber"))
				    value = (int?) backupAttributeCollection["currentcasenumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CurrentCaseNumber");
					SetAttributeValue("currentcasenumber", value);
				OnPropertyChanged("CurrentCaseNumber");
			}
		}

        /// <summary>
        /// [Range(-1, 2147483647)] 
		/// 'CurrentCategoryNumber'.<br />
        /// Enter the first number to use for Categories.
        /// </summary>
		[AttributeLogicalName("currentcategorynumber"), InRange("-1", "2147483647", typeof(int))]
		public int? CurrentCategoryNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("currentcategorynumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("currentcategorynumber"))
				    value = (int?) backupAttributeCollection["currentcategorynumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CurrentCategoryNumber");
					SetAttributeValue("currentcategorynumber", value);
				OnPropertyChanged("CurrentCategoryNumber");
			}
		}

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'CurrentContractNumber'.<br />
        /// First contract number to use.
        /// </summary>
		[AttributeLogicalName("currentcontractnumber"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? CurrentContractNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("currentcontractnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("currentcontractnumber"))
				    value = (int?) backupAttributeCollection["currentcontractnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CurrentContractNumber");
					SetAttributeValue("currentcontractnumber", value);
				OnPropertyChanged("CurrentContractNumber");
			}
		}

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'CurrentImportSequenceNumber'.<br />
        /// Import sequence to use.
        /// </summary>
		[AttributeLogicalName("currentimportsequencenumber"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? CurrentImportSequenceNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("currentimportsequencenumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("currentimportsequencenumber"))
				    value = (int?) backupAttributeCollection["currentimportsequencenumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CurrentImportSequenceNumber");
					SetAttributeValue("currentimportsequencenumber", value);
				OnPropertyChanged("CurrentImportSequenceNumber");
			}
		}

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'CurrentInvoiceNumber'.<br />
        /// First invoice number to use.
        /// </summary>
		[AttributeLogicalName("currentinvoicenumber"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? CurrentInvoiceNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("currentinvoicenumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("currentinvoicenumber"))
				    value = (int?) backupAttributeCollection["currentinvoicenumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CurrentInvoiceNumber");
					SetAttributeValue("currentinvoicenumber", value);
				OnPropertyChanged("CurrentInvoiceNumber");
			}
		}

        /// <summary>
        /// [Range(-1, 2147483647)] 
		/// 'CurrentKaNumber'.<br />
        /// Enter the first number to use for knowledge articles.
        /// </summary>
		[AttributeLogicalName("currentkanumber"), InRange("-1", "2147483647", typeof(int))]
		public int? CurrentKnowledgeArticleNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("currentkanumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("currentkanumber"))
				    value = (int?) backupAttributeCollection["currentkanumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CurrentKnowledgeArticleNumber");
					SetAttributeValue("currentkanumber", value);
				OnPropertyChanged("CurrentKnowledgeArticleNumber");
			}
		}

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'CurrentKbNumber'.<br />
        /// First article number to use.
        /// </summary>
		[AttributeLogicalName("currentkbnumber"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? CurrentArticleNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("currentkbnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("currentkbnumber"))
				    value = (int?) backupAttributeCollection["currentkbnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CurrentArticleNumber");
					SetAttributeValue("currentkbnumber", value);
				OnPropertyChanged("CurrentArticleNumber");
			}
		}

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'CurrentOrderNumber'.<br />
        /// First order number to use.
        /// </summary>
		[AttributeLogicalName("currentordernumber"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? CurrentOrderNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("currentordernumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("currentordernumber"))
				    value = (int?) backupAttributeCollection["currentordernumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CurrentOrderNumber");
					SetAttributeValue("currentordernumber", value);
				OnPropertyChanged("CurrentOrderNumber");
			}
		}

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'CurrentParsedTableNumber'.<br />
        /// First parsed table number to use.
        /// </summary>
		[AttributeLogicalName("currentparsedtablenumber"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? CurrentParsedTableNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("currentparsedtablenumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("currentparsedtablenumber"))
				    value = (int?) backupAttributeCollection["currentparsedtablenumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CurrentParsedTableNumber");
					SetAttributeValue("currentparsedtablenumber", value);
				OnPropertyChanged("CurrentParsedTableNumber");
			}
		}

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'CurrentQuoteNumber'.<br />
        /// First quote number to use.
        /// </summary>
		[AttributeLogicalName("currentquotenumber"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? CurrentQuoteNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("currentquotenumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("currentquotenumber"))
				    value = (int?) backupAttributeCollection["currentquotenumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CurrentQuoteNumber");
					SetAttributeValue("currentquotenumber", value);
				OnPropertyChanged("CurrentQuoteNumber");
			}
		}

        /// <summary>
        ///  
		/// 'DateFormatCode'.<br />
        /// Information about how the date is displayed throughout Microsoft CRM.
        /// </summary>
		[AttributeLogicalName("dateformatcode")]
		public DateFormatCodeEnum? DateFormatCode
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("dateformatcode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("dateformatcode"))
				    value = (OptionSetValue) backupAttributeCollection["dateformatcode"];
                return value == null ? (DateFormatCodeEnum?) null : (DateFormatCodeEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("DateFormatCode");
                if (value != null)
				    SetAttributeValue("dateformatcode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("dateformatcode", value);
				OnPropertyChanged("DateFormatCode");
			}
		}

        /// <summary>
        /// [MaximumLength=255] 
		/// 'DateFormatString'.<br />
        /// String showing how the date is displayed throughout Microsoft CRM.
        /// </summary>
		[AttributeLogicalName("dateformatstring"), MaxLength(255)]
		public string DateFormatString
		{
			get
			{
				var value = GetAttributeValue<string>("dateformatstring");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("dateformatstring"))
				    value = (string) backupAttributeCollection["dateformatstring"];
			    return value;
			}
			set
			{
				OnPropertyChanging("DateFormatString");
					SetAttributeValue("dateformatstring", value);
				OnPropertyChanged("DateFormatString");
			}
		}

        /// <summary>
        /// [MaximumLength=5] 
		/// 'DateSeparator'.<br />
        /// Character used to separate the month, the day, and the year in dates throughout Microsoft Dynamics 365.
        /// </summary>
		[AttributeLogicalName("dateseparator"), MaxLength(5)]
		public string DateSeparator
		{
			get
			{
				var value = GetAttributeValue<string>("dateseparator");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("dateseparator"))
				    value = (string) backupAttributeCollection["dateseparator"];
			    return value;
			}
			set
			{
				OnPropertyChanging("DateSeparator");
					SetAttributeValue("dateseparator", value);
				OnPropertyChanged("DateSeparator");
			}
		}

        /// <summary>
        /// [Range(0, 2147483647)] 
		/// 'DaysSinceRecordLastModifiedMaxValue'.<br />
        /// The maximum value for the Mobile Offline setting Days since record last modified
        /// </summary>
		[AttributeLogicalName("dayssincerecordlastmodifiedmaxvalue"), InRange("0", "2147483647", typeof(int))]
		public int? MaxvalueofDayssincerecordlastmodified
		{
			get
			{
				var value = GetAttributeValue<int?>("dayssincerecordlastmodifiedmaxvalue");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("dayssincerecordlastmodifiedmaxvalue"))
				    value = (int?) backupAttributeCollection["dayssincerecordlastmodifiedmaxvalue"];
			    return value;
			}
			set
			{
				OnPropertyChanging("MaxvalueofDayssincerecordlastmodified");
					SetAttributeValue("dayssincerecordlastmodifiedmaxvalue", value);
				OnPropertyChanged("MaxvalueofDayssincerecordlastmodified");
			}
		}

        /// <summary>
        /// [MaximumLength=5] 
		/// 'DecimalSymbol'.<br />
        /// Symbol used for decimal in Microsoft Dynamics 365.
        /// </summary>
		[AttributeLogicalName("decimalsymbol"), MaxLength(5)]
		public string DecimalSymbol
		{
			get
			{
				var value = GetAttributeValue<string>("decimalsymbol");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("decimalsymbol"))
				    value = (string) backupAttributeCollection["decimalsymbol"];
			    return value;
			}
			set
			{
				OnPropertyChanging("DecimalSymbol");
					SetAttributeValue("decimalsymbol", value);
				OnPropertyChanged("DecimalSymbol");
			}
		}

        /// <summary>
        /// [MaximumLength=30] 
		/// 'DefaultCountryCode'.<br />
        /// Text area to enter default country code.
        /// </summary>
		[AttributeLogicalName("defaultcountrycode"), MaxLength(30)]
		public string DefaultCountryCode
		{
			get
			{
				var value = GetAttributeValue<string>("defaultcountrycode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("defaultcountrycode"))
				    value = (string) backupAttributeCollection["defaultcountrycode"];
			    return value;
			}
			set
			{
				OnPropertyChanging("DefaultCountryCode");
					SetAttributeValue("defaultcountrycode", value);
				OnPropertyChanged("DefaultCountryCode");
			}
		}

        /// <summary>
        /// [MaximumLength=100] 
		/// 'DefaultCrmCustomName'.<br />
        /// Name of the default crm custom.
        /// </summary>
		[AttributeLogicalName("defaultcrmcustomname"), MaxLength(100)]
		public string Nameofthedefaultapp
		{
			get
			{
				var value = GetAttributeValue<string>("defaultcrmcustomname");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("defaultcrmcustomname"))
				    value = (string) backupAttributeCollection["defaultcrmcustomname"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Nameofthedefaultapp");
					SetAttributeValue("defaultcrmcustomname", value);
				OnPropertyChanged("Nameofthedefaultapp");
			}
		}

        /// <summary>
        ///  
		/// 'DefaultEmailServerProfileId'.<br />
        /// Unique identifier of the default email server profile.
        /// </summary>
		[AttributeLogicalName("defaultemailserverprofileid")]
		public Guid? EmailServerProfile
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("defaultemailserverprofileid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("defaultemailserverprofileid"))
				    value = (EntityReference) backupAttributeCollection["defaultemailserverprofileid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("EmailServerProfile");
                if (value != null)
				    SetAttributeValue("defaultemailserverprofileid", new EntityReference("emailserverprofile", value.Value));
                else
					SetAttributeValue("defaultemailserverprofileid", value);
				OnPropertyChanged("EmailServerProfile");
			}
		}

        public string EmailServerProfileName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("defaultemailserverprofileid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("defaultemailserverprofileid"))
				    value = (EntityReference) backupAttributeCollection["defaultemailserverprofileid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        /// [MaximumLength=1073741823] 
		/// 'DefaultEmailSettings'.<br />
        /// XML string containing the default email settings that are applied when a user or queue is created.
        /// </summary>
		[AttributeLogicalName("defaultemailsettings"), MaxLength(1073741823)]
		public string DefaultEmailSettings
		{
			get
			{
				var value = GetAttributeValue<string>("defaultemailsettings");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("defaultemailsettings"))
				    value = (string) backupAttributeCollection["defaultemailsettings"];
			    return value;
			}
			set
			{
				OnPropertyChanging("DefaultEmailSettings");
					SetAttributeValue("defaultemailsettings", value);
				OnPropertyChanged("DefaultEmailSettings");
			}
		}

        /// <summary>
        ///  
		/// 'DefaultMobileOfflineProfileId'.<br />
        /// Unique identifier of the default mobile offline profile.
        /// </summary>
		[AttributeLogicalName("defaultmobileofflineprofileid")]
		public Guid? DefaultMobileOfflineProfile
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("defaultmobileofflineprofileid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("defaultmobileofflineprofileid"))
				    value = (EntityReference) backupAttributeCollection["defaultmobileofflineprofileid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("DefaultMobileOfflineProfile");
                if (value != null)
				    SetAttributeValue("defaultmobileofflineprofileid", new EntityReference("mobileofflineprofile", value.Value));
                else
					SetAttributeValue("defaultmobileofflineprofileid", value);
				OnPropertyChanged("DefaultMobileOfflineProfile");
			}
		}

        public string DefaultMobileOfflineProfileName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("defaultmobileofflineprofileid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("defaultmobileofflineprofileid"))
				    value = (EntityReference) backupAttributeCollection["defaultmobileofflineprofileid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'DefaultRecurrenceEndRangeType'.<br />
        /// Type of default recurrence end range date.
        /// </summary>
		[AttributeLogicalName("defaultrecurrenceendrangetype")]
		public DefaultRecurrenceEndRangeTypeEnum? DefaultRecurrenceEndRangeType
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("defaultrecurrenceendrangetype");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("defaultrecurrenceendrangetype"))
				    value = (OptionSetValue) backupAttributeCollection["defaultrecurrenceendrangetype"];
                return value == null ? (DefaultRecurrenceEndRangeTypeEnum?) null : (DefaultRecurrenceEndRangeTypeEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("DefaultRecurrenceEndRangeType");
                if (value != null)
				    SetAttributeValue("defaultrecurrenceendrangetype", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("defaultrecurrenceendrangetype", value);
				OnPropertyChanged("DefaultRecurrenceEndRangeType");
			}
		}

        /// <summary>
        /// [MaximumLength=1073741823] 
		/// 'DefaultThemeData'.<br />
        /// Default theme data for the organization.
        /// </summary>
		[AttributeLogicalName("defaultthemedata"), MaxLength(1073741823)]
		public string DefaultThemeData
		{
			get
			{
				var value = GetAttributeValue<string>("defaultthemedata");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("defaultthemedata"))
				    value = (string) backupAttributeCollection["defaultthemedata"];
			    return value;
			}
			set
			{
				OnPropertyChanging("DefaultThemeData");
					SetAttributeValue("defaultthemedata", value);
				OnPropertyChanged("DefaultThemeData");
			}
		}

        /// <summary>
        ///  
		/// 'DelegatedAdminUserId'.<br />
        /// Unique identifier of the delegated admin user for the organization.
        /// </summary>
		[AttributeLogicalName("delegatedadminuserid")]
		public Guid? DelegatedAdmin
		{
			get
			{
				var value = GetAttributeValue<Guid?>("delegatedadminuserid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("delegatedadminuserid"))
				    value = (Guid?) backupAttributeCollection["delegatedadminuserid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("DelegatedAdmin");
					SetAttributeValue("delegatedadminuserid", value);
				OnPropertyChanged("DelegatedAdmin");
			}
		}

        /// <summary>
        /// [MaximumLength=500] 
		/// 'DisabledReason'.<br />
        /// Reason for disabling the organization.
        /// </summary>
		[AttributeLogicalName("disabledreason"), MaxLength(500)]
		public string DisabledReason
		{
			get
			{
				var value = GetAttributeValue<string>("disabledreason");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("disabledreason"))
				    value = (string) backupAttributeCollection["disabledreason"];
			    return value;
			}
			set
			{
				OnPropertyChanging("DisabledReason");
					SetAttributeValue("disabledreason", value);
				OnPropertyChanged("DisabledReason");
			}
		}

        /// <summary>
        ///  
		/// 'DisableSocialCare'.<br />
        /// Indicates whether Social Care is disabled.
        /// </summary>
		[AttributeLogicalName("disablesocialcare")]
		public bool? IsSocialCaredisabled
		{
			get
			{
				var value = GetAttributeValue<bool?>("disablesocialcare");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("disablesocialcare"))
				    value = (bool?) backupAttributeCollection["disablesocialcare"];
			    return value;
			}
			set
			{
				OnPropertyChanging("IsSocialCaredisabled");
					SetAttributeValue("disablesocialcare", value);
				OnPropertyChanged("IsSocialCaredisabled");
			}
		}

        /// <summary>
        ///  
		/// 'DiscountCalculationMethod'.<br />
        /// Discount calculation method for the QOOI product.
        /// </summary>
		[AttributeLogicalName("discountcalculationmethod")]
		public DiscountcalculationmethodEnum? Discountcalculationmethod
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("discountcalculationmethod");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("discountcalculationmethod"))
				    value = (OptionSetValue) backupAttributeCollection["discountcalculationmethod"];
                return value == null ? (DiscountcalculationmethodEnum?) null : (DiscountcalculationmethodEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("Discountcalculationmethod");
                if (value != null)
				    SetAttributeValue("discountcalculationmethod", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("discountcalculationmethod", value);
				OnPropertyChanged("Discountcalculationmethod");
			}
		}

        /// <summary>
        ///  
		/// 'DisplayNavigationTour'.<br />
        /// Indicates whether or not navigation tour is displayed.
        /// </summary>
		[AttributeLogicalName("displaynavigationtour")]
		public bool? DisplayNavigationTour
		{
			get
			{
				var value = GetAttributeValue<bool?>("displaynavigationtour");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("displaynavigationtour"))
				    value = (bool?) backupAttributeCollection["displaynavigationtour"];
			    return value;
			}
			set
			{
				OnPropertyChanging("DisplayNavigationTour");
					SetAttributeValue("displaynavigationtour", value);
				OnPropertyChanged("DisplayNavigationTour");
			}
		}

        /// <summary>
        ///  
		/// 'EmailConnectionChannel'.<br />
        /// Select if you want to use the Email Router or server-side synchronization for email processing.
        /// </summary>
		[AttributeLogicalName("emailconnectionchannel")]
		public EmailConnectionChannelEnum? EmailConnectionChannel
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("emailconnectionchannel");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("emailconnectionchannel"))
				    value = (OptionSetValue) backupAttributeCollection["emailconnectionchannel"];
                return value == null ? (EmailConnectionChannelEnum?) null : (EmailConnectionChannelEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("EmailConnectionChannel");
                if (value != null)
				    SetAttributeValue("emailconnectionchannel", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("emailconnectionchannel", value);
				OnPropertyChanged("EmailConnectionChannel");
			}
		}

        /// <summary>
        ///  
		/// 'EmailCorrelationEnabled'.<br />
        /// Flag to turn email correlation on or off.
        /// </summary>
		[AttributeLogicalName("emailcorrelationenabled")]
		public bool? UseEmailCorrelation
		{
			get
			{
				var value = GetAttributeValue<bool?>("emailcorrelationenabled");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("emailcorrelationenabled"))
				    value = (bool?) backupAttributeCollection["emailcorrelationenabled"];
			    return value;
			}
			set
			{
				OnPropertyChanging("UseEmailCorrelation");
					SetAttributeValue("emailcorrelationenabled", value);
				OnPropertyChanged("UseEmailCorrelation");
			}
		}

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'EmailSendPollingPeriod'.<br />
        /// Normal polling frequency used for sending email in Microsoft Office Outlook.
        /// </summary>
		[AttributeLogicalName("emailsendpollingperiod"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? EmailSendPollingFrequency
		{
			get
			{
				var value = GetAttributeValue<int?>("emailsendpollingperiod");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("emailsendpollingperiod"))
				    value = (int?) backupAttributeCollection["emailsendpollingperiod"];
			    return value;
			}
			set
			{
				OnPropertyChanging("EmailSendPollingFrequency");
					SetAttributeValue("emailsendpollingperiod", value);
				OnPropertyChanged("EmailSendPollingFrequency");
			}
		}

        /// <summary>
        ///  
		/// 'EnableBingMapsIntegration'.<br />
        /// Enable Integration with Bing Maps
        /// </summary>
		[AttributeLogicalName("enablebingmapsintegration")]
		public bool? EnableIntegrationwithBingMaps
		{
			get
			{
				var value = GetAttributeValue<bool?>("enablebingmapsintegration");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("enablebingmapsintegration"))
				    value = (bool?) backupAttributeCollection["enablebingmapsintegration"];
			    return value;
			}
			set
			{
				OnPropertyChanging("EnableIntegrationwithBingMaps");
					SetAttributeValue("enablebingmapsintegration", value);
				OnPropertyChanged("EnableIntegrationwithBingMaps");
			}
		}

        /// <summary>
        ///  
		/// 'EnableLPAuthoring'.<br />
        /// Select to enable learning path auhtoring.
        /// </summary>
		[AttributeLogicalName("enablelpauthoring")]
		public bool? EnableLearningPathAuthoring
		{
			get
			{
				var value = GetAttributeValue<bool?>("enablelpauthoring");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("enablelpauthoring"))
				    value = (bool?) backupAttributeCollection["enablelpauthoring"];
			    return value;
			}
			set
			{
				OnPropertyChanging("EnableLearningPathAuthoring");
					SetAttributeValue("enablelpauthoring", value);
				OnPropertyChanged("EnableLearningPathAuthoring");
			}
		}

        /// <summary>
        ///  
		/// 'EnableMicrosoftFlowIntegration'.<br />
        /// Enable Integration with Microsoft Flow
        /// </summary>
		[AttributeLogicalName("enablemicrosoftflowintegration")]
		public bool? EnableIntegrationwithMicrosoftFlow
		{
			get
			{
				var value = GetAttributeValue<bool?>("enablemicrosoftflowintegration");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("enablemicrosoftflowintegration"))
				    value = (bool?) backupAttributeCollection["enablemicrosoftflowintegration"];
			    return value;
			}
			set
			{
				OnPropertyChanging("EnableIntegrationwithMicrosoftFlow");
					SetAttributeValue("enablemicrosoftflowintegration", value);
				OnPropertyChanged("EnableIntegrationwithMicrosoftFlow");
			}
		}

        /// <summary>
        ///  
		/// 'EnablePricingOnCreate'.<br />
        /// Enable pricing calculations on a Create call.
        /// </summary>
		[AttributeLogicalName("enablepricingoncreate")]
		public bool? EnablePricingOnCreate
		{
			get
			{
				var value = GetAttributeValue<bool?>("enablepricingoncreate");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("enablepricingoncreate"))
				    value = (bool?) backupAttributeCollection["enablepricingoncreate"];
			    return value;
			}
			set
			{
				OnPropertyChanging("EnablePricingOnCreate");
					SetAttributeValue("enablepricingoncreate", value);
				OnPropertyChanged("EnablePricingOnCreate");
			}
		}

        /// <summary>
        ///  
		/// 'EnableSmartMatching'.<br />
        /// Use Smart Matching.
        /// </summary>
		[AttributeLogicalName("enablesmartmatching")]
		public bool? EnableSmartMatching
		{
			get
			{
				var value = GetAttributeValue<bool?>("enablesmartmatching");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("enablesmartmatching"))
				    value = (bool?) backupAttributeCollection["enablesmartmatching"];
			    return value;
			}
			set
			{
				OnPropertyChanging("EnableSmartMatching");
					SetAttributeValue("enablesmartmatching", value);
				OnPropertyChanged("EnableSmartMatching");
			}
		}

        /// <summary>
        ///  
		/// 'EnforceReadOnlyPlugins'.<br />
        /// Organization setting to enforce read only plugins.
        /// </summary>
		[AttributeLogicalName("enforcereadonlyplugins")]
		public bool? Organizationsettingtoenforcereadonlyplugins
		{
			get
			{
				var value = GetAttributeValue<bool?>("enforcereadonlyplugins");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("enforcereadonlyplugins"))
				    value = (bool?) backupAttributeCollection["enforcereadonlyplugins"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Organizationsettingtoenforcereadonlyplugins");
					SetAttributeValue("enforcereadonlyplugins", value);
				OnPropertyChanged("Organizationsettingtoenforcereadonlyplugins");
			}
		}

        /// <summary>
        ///  
		/// 'EntityImageId'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("entityimageid")]
		public Guid? EntityImageId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("entityimageid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("entityimageid"))
				    value = (Guid?) backupAttributeCollection["entityimageid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("EntityImageId");
					SetAttributeValue("entityimageid", value);
				OnPropertyChanged("EntityImageId");
			}
		}

        /// <summary>
        /// [Range(0, 365)] 
		/// 'ExpireChangeTrackingInDays'.<br />
        /// Maximum number of days to keep change tracking deleted records
        /// </summary>
		[AttributeLogicalName("expirechangetrackingindays"), InRange("0", "365", typeof(int))]
		public int? DaystoExpireChangeTrackingDeletedRecords
		{
			get
			{
				var value = GetAttributeValue<int?>("expirechangetrackingindays");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("expirechangetrackingindays"))
				    value = (int?) backupAttributeCollection["expirechangetrackingindays"];
			    return value;
			}
			set
			{
				OnPropertyChanging("DaystoExpireChangeTrackingDeletedRecords");
					SetAttributeValue("expirechangetrackingindays", value);
				OnPropertyChanged("DaystoExpireChangeTrackingDeletedRecords");
			}
		}

        /// <summary>
        /// [Range(0, 2147483647)] 
		/// 'ExpireSubscriptionsInDays'.<br />
        /// Maximum number of days before deleting inactive subscriptions.
        /// </summary>
		[AttributeLogicalName("expiresubscriptionsindays"), InRange("0", "2147483647", typeof(int))]
		public int? DaystoExpireSubscriptions
		{
			get
			{
				var value = GetAttributeValue<int?>("expiresubscriptionsindays");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("expiresubscriptionsindays"))
				    value = (int?) backupAttributeCollection["expiresubscriptionsindays"];
			    return value;
			}
			set
			{
				OnPropertyChanging("DaystoExpireSubscriptions");
					SetAttributeValue("expiresubscriptionsindays", value);
				OnPropertyChanged("DaystoExpireSubscriptions");
			}
		}

        /// <summary>
        /// [MaximumLength=500] 
		/// 'ExternalBaseUrl'.<br />
        /// Specify the base URL to use to look for external document suggestions.
        /// </summary>
		[AttributeLogicalName("externalbaseurl"), MaxLength(500)]
		public string ExternalBaseURL
		{
			get
			{
				var value = GetAttributeValue<string>("externalbaseurl");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("externalbaseurl"))
				    value = (string) backupAttributeCollection["externalbaseurl"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ExternalBaseURL");
					SetAttributeValue("externalbaseurl", value);
				OnPropertyChanged("ExternalBaseURL");
			}
		}

        /// <summary>
        /// [MaximumLength=1073741823] 
		/// 'ExternalPartyCorrelationKeys'.<br />
        /// XML string containing the ExternalPartyEnabled entities correlation keys for association of existing External Party instance entities to newly created IsExternalPartyEnabled entities.For internal use only
        /// </summary>
		[AttributeLogicalName("externalpartycorrelationkeys"), MaxLength(1073741823)]
		public string ExternalPartyEnabledEntitiescorrelationKeys
		{
			get
			{
				var value = GetAttributeValue<string>("externalpartycorrelationkeys");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("externalpartycorrelationkeys"))
				    value = (string) backupAttributeCollection["externalpartycorrelationkeys"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ExternalPartyEnabledEntitiescorrelationKeys");
					SetAttributeValue("externalpartycorrelationkeys", value);
				OnPropertyChanged("ExternalPartyEnabledEntitiescorrelationKeys");
			}
		}

        /// <summary>
        /// [MaximumLength=1073741823] 
		/// 'ExternalPartyEntitySettings'.<br />
        /// XML string containing the ExternalPartyEnabled entities settings.
        /// </summary>
		[AttributeLogicalName("externalpartyentitysettings"), MaxLength(1073741823)]
		public string ExternalPartyEnabledEntitiesSettingsForinternaluseonly
		{
			get
			{
				var value = GetAttributeValue<string>("externalpartyentitysettings");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("externalpartyentitysettings"))
				    value = (string) backupAttributeCollection["externalpartyentitysettings"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ExternalPartyEnabledEntitiesSettingsForinternaluseonly");
					SetAttributeValue("externalpartyentitysettings", value);
				OnPropertyChanged("ExternalPartyEnabledEntitiesSettingsForinternaluseonly");
			}
		}

        /// <summary>
        /// [MaximumLength=1073741823] 
		/// 'FeatureSet'.<br />
        /// Features to be enabled as an XML BLOB.
        /// </summary>
		[AttributeLogicalName("featureset"), MaxLength(1073741823)]
		public string FeatureSet
		{
			get
			{
				var value = GetAttributeValue<string>("featureset");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("featureset"))
				    value = (string) backupAttributeCollection["featureset"];
			    return value;
			}
			set
			{
				OnPropertyChanging("FeatureSet");
					SetAttributeValue("featureset", value);
				OnPropertyChanged("FeatureSet");
			}
		}

        /// <summary>
        ///  
		/// 'FiscalCalendarStart'.<br />
        /// Start date for the fiscal period that is to be used throughout Microsoft CRM.
        /// </summary>
		[AttributeLogicalName("fiscalcalendarstart")]
		public DateTime? FiscalCalendarStart
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("fiscalcalendarstart");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("fiscalcalendarstart"))
				    value = (DateTime?) backupAttributeCollection["fiscalcalendarstart"];
			    return value;
			}
			set
			{
				OnPropertyChanging("FiscalCalendarStart");
					SetAttributeValue("fiscalcalendarstart", value);
				OnPropertyChanged("FiscalCalendarStart");
			}
		}

        /// <summary>
        /// [MaximumLength=25] 
		/// 'FiscalPeriodFormat'.<br />
        /// Information that specifies how the name of the fiscal period is displayed throughout Microsoft CRM.
        /// </summary>
		[AttributeLogicalName("fiscalperiodformat"), MaxLength(25)]
		public string FiscalPeriodFormat
		{
			get
			{
				var value = GetAttributeValue<string>("fiscalperiodformat");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("fiscalperiodformat"))
				    value = (string) backupAttributeCollection["fiscalperiodformat"];
			    return value;
			}
			set
			{
				OnPropertyChanging("FiscalPeriodFormat");
					SetAttributeValue("fiscalperiodformat", value);
				OnPropertyChanged("FiscalPeriodFormat");
			}
		}

        /// <summary>
        ///  
		/// 'FiscalPeriodFormatPeriod'.<br />
        /// Format in which the fiscal period will be displayed.
        /// </summary>
		[AttributeLogicalName("fiscalperiodformatperiod")]
		public FormatforFiscalPeriodEnum? FormatforFiscalPeriod
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("fiscalperiodformatperiod");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("fiscalperiodformatperiod"))
				    value = (OptionSetValue) backupAttributeCollection["fiscalperiodformatperiod"];
                return value == null ? (FormatforFiscalPeriodEnum?) null : (FormatforFiscalPeriodEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("FormatforFiscalPeriod");
                if (value != null)
				    SetAttributeValue("fiscalperiodformatperiod", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("fiscalperiodformatperiod", value);
				OnPropertyChanged("FormatforFiscalPeriod");
			}
		}

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'FiscalPeriodType'.<br />
        /// Type of fiscal period used throughout Microsoft CRM.
        /// </summary>
		[AttributeLogicalName("fiscalperiodtype"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? FiscalPeriodType
		{
			get
			{
				var value = GetAttributeValue<int?>("fiscalperiodtype");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("fiscalperiodtype"))
				    value = (int?) backupAttributeCollection["fiscalperiodtype"];
			    return value;
			}
			set
			{
				OnPropertyChanging("FiscalPeriodType");
					SetAttributeValue("fiscalperiodtype", value);
				OnPropertyChanged("FiscalPeriodType");
			}
		}

        /// <summary>
        ///  
		/// 'FiscalSettingsUpdated'.<br />
        /// Information that specifies whether the fiscal settings have been updated.
        /// </summary>
		[AttributeLogicalName("fiscalsettingsupdated")]
		[Obsolete]
		public bool? IsFiscalSettingsUpdated
		{
			get
			{
				var value = GetAttributeValue<bool?>("fiscalsettingsupdated");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("fiscalsettingsupdated"))
				    value = (bool?) backupAttributeCollection["fiscalsettingsupdated"];
			    return value;
			}
			set
			{
				OnPropertyChanging("IsFiscalSettingsUpdated");
					SetAttributeValue("fiscalsettingsupdated", value);
				OnPropertyChanged("IsFiscalSettingsUpdated");
			}
		}

        /// <summary>
        ///  
		/// 'FiscalYearDisplayCode'.<br />
        /// Information that specifies whether the fiscal year should be displayed based on the start date or the end date of the fiscal year.
        /// </summary>
		[AttributeLogicalName("fiscalyeardisplaycode")]
		public int? FiscalYearDisplay
		{
			get
			{
				var value = GetAttributeValue<int?>("fiscalyeardisplaycode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("fiscalyeardisplaycode"))
				    value = (int?) backupAttributeCollection["fiscalyeardisplaycode"];
			    return value;
			}
			set
			{
				OnPropertyChanging("FiscalYearDisplay");
					SetAttributeValue("fiscalyeardisplaycode", value);
				OnPropertyChanged("FiscalYearDisplay");
			}
		}

        /// <summary>
        /// [MaximumLength=25] 
		/// 'FiscalYearFormat'.<br />
        /// Information that specifies how the name of the fiscal year is displayed throughout Microsoft CRM.
        /// </summary>
		[AttributeLogicalName("fiscalyearformat"), MaxLength(25)]
		public string FiscalYearFormat
		{
			get
			{
				var value = GetAttributeValue<string>("fiscalyearformat");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("fiscalyearformat"))
				    value = (string) backupAttributeCollection["fiscalyearformat"];
			    return value;
			}
			set
			{
				OnPropertyChanging("FiscalYearFormat");
					SetAttributeValue("fiscalyearformat", value);
				OnPropertyChanged("FiscalYearFormat");
			}
		}

        /// <summary>
        ///  
		/// 'FiscalYearFormatPrefix'.<br />
        /// Prefix for the display of the fiscal year.
        /// </summary>
		[AttributeLogicalName("fiscalyearformatprefix")]
		public PrefixforFiscalYearEnum? PrefixforFiscalYear
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("fiscalyearformatprefix");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("fiscalyearformatprefix"))
				    value = (OptionSetValue) backupAttributeCollection["fiscalyearformatprefix"];
                return value == null ? (PrefixforFiscalYearEnum?) null : (PrefixforFiscalYearEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("PrefixforFiscalYear");
                if (value != null)
				    SetAttributeValue("fiscalyearformatprefix", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("fiscalyearformatprefix", value);
				OnPropertyChanged("PrefixforFiscalYear");
			}
		}

        /// <summary>
        ///  
		/// 'FiscalYearFormatSuffix'.<br />
        /// Suffix for the display of the fiscal year.
        /// </summary>
		[AttributeLogicalName("fiscalyearformatsuffix")]
		public SuffixforFiscalYearEnum? SuffixforFiscalYear
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("fiscalyearformatsuffix");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("fiscalyearformatsuffix"))
				    value = (OptionSetValue) backupAttributeCollection["fiscalyearformatsuffix"];
                return value == null ? (SuffixforFiscalYearEnum?) null : (SuffixforFiscalYearEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("SuffixforFiscalYear");
                if (value != null)
				    SetAttributeValue("fiscalyearformatsuffix", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("fiscalyearformatsuffix", value);
				OnPropertyChanged("SuffixforFiscalYear");
			}
		}

        /// <summary>
        ///  
		/// 'FiscalYearFormatYear'.<br />
        /// Format for the year.
        /// </summary>
		[AttributeLogicalName("fiscalyearformatyear")]
		public FiscalYearFormatYearEnum? FiscalYearFormatYear
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("fiscalyearformatyear");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("fiscalyearformatyear"))
				    value = (OptionSetValue) backupAttributeCollection["fiscalyearformatyear"];
                return value == null ? (FiscalYearFormatYearEnum?) null : (FiscalYearFormatYearEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("FiscalYearFormatYear");
                if (value != null)
				    SetAttributeValue("fiscalyearformatyear", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("fiscalyearformatyear", value);
				OnPropertyChanged("FiscalYearFormatYear");
			}
		}

        /// <summary>
        /// [MaximumLength=5] 
		/// 'FiscalYearPeriodConnect'.<br />
        /// Information that specifies how the names of the fiscal year and the fiscal period should be connected when displayed together.
        /// </summary>
		[AttributeLogicalName("fiscalyearperiodconnect"), MaxLength(5)]
		public string FiscalYearPeriodConnector
		{
			get
			{
				var value = GetAttributeValue<string>("fiscalyearperiodconnect");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("fiscalyearperiodconnect"))
				    value = (string) backupAttributeCollection["fiscalyearperiodconnect"];
			    return value;
			}
			set
			{
				OnPropertyChanging("FiscalYearPeriodConnector");
					SetAttributeValue("fiscalyearperiodconnect", value);
				OnPropertyChanged("FiscalYearPeriodConnector");
			}
		}

        /// <summary>
        ///  
		/// 'FullNameConventionCode'.<br />
        /// Order in which names are to be displayed throughout Microsoft CRM.
        /// </summary>
		[AttributeLogicalName("fullnameconventioncode")]
		public FullNameDisplayOrderEnum? FullNameDisplayOrder
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("fullnameconventioncode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("fullnameconventioncode"))
				    value = (OptionSetValue) backupAttributeCollection["fullnameconventioncode"];
                return value == null ? (FullNameDisplayOrderEnum?) null : (FullNameDisplayOrderEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("FullNameDisplayOrder");
                if (value != null)
				    SetAttributeValue("fullnameconventioncode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("fullnameconventioncode", value);
				OnPropertyChanged("FullNameDisplayOrder");
			}
		}

        /// <summary>
        /// [Range(1, 140)] 
		/// 'FutureExpansionWindow'.<br />
        /// Specifies the maximum number of months in future for which the recurring activities can be created.
        /// </summary>
		[AttributeLogicalName("futureexpansionwindow"), InRange("1", "140", typeof(int))]
		public int? FutureExpansionWindow
		{
			get
			{
				var value = GetAttributeValue<int?>("futureexpansionwindow");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("futureexpansionwindow"))
				    value = (int?) backupAttributeCollection["futureexpansionwindow"];
			    return value;
			}
			set
			{
				OnPropertyChanging("FutureExpansionWindow");
					SetAttributeValue("futureexpansionwindow", value);
				OnPropertyChanged("FutureExpansionWindow");
			}
		}

        /// <summary>
        ///  
		/// 'GenerateAlertsForErrors'.<br />
        /// Indicates whether alerts will be generated for errors.
        /// </summary>
		[AttributeLogicalName("generatealertsforerrors")]
		public bool? GenerateAlertsForErrors
		{
			get
			{
				var value = GetAttributeValue<bool?>("generatealertsforerrors");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("generatealertsforerrors"))
				    value = (bool?) backupAttributeCollection["generatealertsforerrors"];
			    return value;
			}
			set
			{
				OnPropertyChanging("GenerateAlertsForErrors");
					SetAttributeValue("generatealertsforerrors", value);
				OnPropertyChanged("GenerateAlertsForErrors");
			}
		}

        /// <summary>
        ///  
		/// 'GenerateAlertsForInformation'.<br />
        /// Indicates whether alerts will be generated for information.
        /// </summary>
		[AttributeLogicalName("generatealertsforinformation")]
		public bool? GenerateAlertsForInformation
		{
			get
			{
				var value = GetAttributeValue<bool?>("generatealertsforinformation");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("generatealertsforinformation"))
				    value = (bool?) backupAttributeCollection["generatealertsforinformation"];
			    return value;
			}
			set
			{
				OnPropertyChanging("GenerateAlertsForInformation");
					SetAttributeValue("generatealertsforinformation", value);
				OnPropertyChanged("GenerateAlertsForInformation");
			}
		}

        /// <summary>
        ///  
		/// 'GenerateAlertsForWarnings'.<br />
        /// Indicates whether alerts will be generated for warnings.
        /// </summary>
		[AttributeLogicalName("generatealertsforwarnings")]
		public bool? GenerateAlertsForWarnings
		{
			get
			{
				var value = GetAttributeValue<bool?>("generatealertsforwarnings");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("generatealertsforwarnings"))
				    value = (bool?) backupAttributeCollection["generatealertsforwarnings"];
			    return value;
			}
			set
			{
				OnPropertyChanging("GenerateAlertsForWarnings");
					SetAttributeValue("generatealertsforwarnings", value);
				OnPropertyChanged("GenerateAlertsForWarnings");
			}
		}

        /// <summary>
        ///  
		/// 'GetStartedPaneContentEnabled'.<br />
        /// Indicates whether Get Started content is enabled for this organization.
        /// </summary>
		[AttributeLogicalName("getstartedpanecontentenabled")]
		public bool? IsGetStartedPaneContentEnabled
		{
			get
			{
				var value = GetAttributeValue<bool?>("getstartedpanecontentenabled");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("getstartedpanecontentenabled"))
				    value = (bool?) backupAttributeCollection["getstartedpanecontentenabled"];
			    return value;
			}
			set
			{
				OnPropertyChanging("IsGetStartedPaneContentEnabled");
					SetAttributeValue("getstartedpanecontentenabled", value);
				OnPropertyChanged("IsGetStartedPaneContentEnabled");
			}
		}

        /// <summary>
        ///  
		/// 'GlobalAppendUrlParametersEnabled'.<br />
        /// Indicates whether the append URL parameters is enabled.
        /// </summary>
		[AttributeLogicalName("globalappendurlparametersenabled")]
		public bool? IsAppendUrlParametersenabled
		{
			get
			{
				var value = GetAttributeValue<bool?>("globalappendurlparametersenabled");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("globalappendurlparametersenabled"))
				    value = (bool?) backupAttributeCollection["globalappendurlparametersenabled"];
			    return value;
			}
			set
			{
				OnPropertyChanging("IsAppendUrlParametersenabled");
					SetAttributeValue("globalappendurlparametersenabled", value);
				OnPropertyChanged("IsAppendUrlParametersenabled");
			}
		}

        /// <summary>
        /// [MaximumLength=500] 
		/// 'GlobalHelpUrl'.<br />
        /// URL for the web page global help.
        /// </summary>
		[AttributeLogicalName("globalhelpurl"), MaxLength(500)]
		public string GlobalHelpURL
		{
			get
			{
				var value = GetAttributeValue<string>("globalhelpurl");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("globalhelpurl"))
				    value = (string) backupAttributeCollection["globalhelpurl"];
			    return value;
			}
			set
			{
				OnPropertyChanging("GlobalHelpURL");
					SetAttributeValue("globalhelpurl", value);
				OnPropertyChanged("GlobalHelpURL");
			}
		}

        /// <summary>
        ///  
		/// 'GlobalHelpUrlEnabled'.<br />
        /// Indicates whether the customizable global help is enabled.
        /// </summary>
		[AttributeLogicalName("globalhelpurlenabled")]
		public bool? IsCustomizableGlobalHelpenabled
		{
			get
			{
				var value = GetAttributeValue<bool?>("globalhelpurlenabled");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("globalhelpurlenabled"))
				    value = (bool?) backupAttributeCollection["globalhelpurlenabled"];
			    return value;
			}
			set
			{
				OnPropertyChanging("IsCustomizableGlobalHelpenabled");
					SetAttributeValue("globalhelpurlenabled", value);
				OnPropertyChanged("IsCustomizableGlobalHelpenabled");
			}
		}

        /// <summary>
        /// [Range(0, 400)] 
		/// 'GoalRollupExpiryTime'.<br />
        /// Number of days after the goal's end date after which the rollup of the goal stops automatically.
        /// </summary>
		[AttributeLogicalName("goalrollupexpirytime"), InRange("0", "400", typeof(int))]
		public int? RollupExpirationTimeforGoal
		{
			get
			{
				var value = GetAttributeValue<int?>("goalrollupexpirytime");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("goalrollupexpirytime"))
				    value = (int?) backupAttributeCollection["goalrollupexpirytime"];
			    return value;
			}
			set
			{
				OnPropertyChanging("RollupExpirationTimeforGoal");
					SetAttributeValue("goalrollupexpirytime", value);
				OnPropertyChanged("RollupExpirationTimeforGoal");
			}
		}

        /// <summary>
        /// [Range(1, 2147483647)] 
		/// 'GoalRollupFrequency'.<br />
        /// Number of hours between automatic rollup jobs .
        /// </summary>
		[AttributeLogicalName("goalrollupfrequency"), InRange("1", "2147483647", typeof(int))]
		public int? AutomaticRollupFrequencyforGoal
		{
			get
			{
				var value = GetAttributeValue<int?>("goalrollupfrequency");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("goalrollupfrequency"))
				    value = (int?) backupAttributeCollection["goalrollupfrequency"];
			    return value;
			}
			set
			{
				OnPropertyChanging("AutomaticRollupFrequencyforGoal");
					SetAttributeValue("goalrollupfrequency", value);
				OnPropertyChanged("AutomaticRollupFrequencyforGoal");
			}
		}

        /// <summary>
        ///  
		/// 'GrantAccessToNetworkService'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("grantaccesstonetworkservice")]
		public bool? GrantAccessToNetworkService
		{
			get
			{
				var value = GetAttributeValue<bool?>("grantaccesstonetworkservice");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("grantaccesstonetworkservice"))
				    value = (bool?) backupAttributeCollection["grantaccesstonetworkservice"];
			    return value;
			}
			set
			{
				OnPropertyChanging("GrantAccessToNetworkService");
					SetAttributeValue("grantaccesstonetworkservice", value);
				OnPropertyChanged("GrantAccessToNetworkService");
			}
		}

        /// <summary>
        /// [Range(0, 2147483647)] 
		/// 'HashDeltaSubjectCount'.<br />
        /// Maximum difference allowed between subject keywords count of the email messaged to be correlated
        /// </summary>
		[AttributeLogicalName("hashdeltasubjectcount"), InRange("0", "2147483647", typeof(int))]
		public int? HashDeltaSubjectCount
		{
			get
			{
				var value = GetAttributeValue<int?>("hashdeltasubjectcount");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("hashdeltasubjectcount"))
				    value = (int?) backupAttributeCollection["hashdeltasubjectcount"];
			    return value;
			}
			set
			{
				OnPropertyChanging("HashDeltaSubjectCount");
					SetAttributeValue("hashdeltasubjectcount", value);
				OnPropertyChanged("HashDeltaSubjectCount");
			}
		}

        /// <summary>
        /// [MaximumLength=1073741823] 
		/// 'HashFilterKeywords'.<br />
        /// Filter Subject Keywords
        /// </summary>
		[AttributeLogicalName("hashfilterkeywords"), MaxLength(1073741823)]
		public string HashFilterKeywords
		{
			get
			{
				var value = GetAttributeValue<string>("hashfilterkeywords");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("hashfilterkeywords"))
				    value = (string) backupAttributeCollection["hashfilterkeywords"];
			    return value;
			}
			set
			{
				OnPropertyChanging("HashFilterKeywords");
					SetAttributeValue("hashfilterkeywords", value);
				OnPropertyChanged("HashFilterKeywords");
			}
		}

        /// <summary>
        /// [Range(0, 2147483647)] 
		/// 'HashMaxCount'.<br />
        /// Maximum number of subject keywords or recipients used for correlation
        /// </summary>
		[AttributeLogicalName("hashmaxcount"), InRange("0", "2147483647", typeof(int))]
		public int? HashMaxCount
		{
			get
			{
				var value = GetAttributeValue<int?>("hashmaxcount");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("hashmaxcount"))
				    value = (int?) backupAttributeCollection["hashmaxcount"];
			    return value;
			}
			set
			{
				OnPropertyChanging("HashMaxCount");
					SetAttributeValue("hashmaxcount", value);
				OnPropertyChanged("HashMaxCount");
			}
		}

        /// <summary>
        /// [Range(0, 2147483647)] 
		/// 'HashMinAddressCount'.<br />
        /// Minimum number of recipients required to match for email messaged to be correlated
        /// </summary>
		[AttributeLogicalName("hashminaddresscount"), InRange("0", "2147483647", typeof(int))]
		public int? HashMinAddressCount
		{
			get
			{
				var value = GetAttributeValue<int?>("hashminaddresscount");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("hashminaddresscount"))
				    value = (int?) backupAttributeCollection["hashminaddresscount"];
			    return value;
			}
			set
			{
				OnPropertyChanging("HashMinAddressCount");
					SetAttributeValue("hashminaddresscount", value);
				OnPropertyChanged("HashMinAddressCount");
			}
		}

        /// <summary>
        /// [MaximumLength=1073741823] 
		/// 'HighContrastThemeData'.<br />
        /// High contrast theme data for the organization.
        /// </summary>
		[AttributeLogicalName("highcontrastthemedata"), MaxLength(1073741823)]
		public string HighcontrastThemeData
		{
			get
			{
				var value = GetAttributeValue<string>("highcontrastthemedata");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("highcontrastthemedata"))
				    value = (string) backupAttributeCollection["highcontrastthemedata"];
			    return value;
			}
			set
			{
				OnPropertyChanging("HighcontrastThemeData");
					SetAttributeValue("highcontrastthemedata", value);
				OnPropertyChanged("HighcontrastThemeData");
			}
		}

        /// <summary>
        ///  
		/// 'IgnoreInternalEmail'.<br />
        /// Indicates whether incoming email sent by internal Microsoft Dynamics 365 users or queues should be tracked.
        /// </summary>
		[AttributeLogicalName("ignoreinternalemail")]
		public bool? IgnoreInternalEmail
		{
			get
			{
				var value = GetAttributeValue<bool?>("ignoreinternalemail");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ignoreinternalemail"))
				    value = (bool?) backupAttributeCollection["ignoreinternalemail"];
			    return value;
			}
			set
			{
				OnPropertyChanging("IgnoreInternalEmail");
					SetAttributeValue("ignoreinternalemail", value);
				OnPropertyChanged("IgnoreInternalEmail");
			}
		}

        /// <summary>
        /// [Range(1, 2147483647)] 
		/// 'IncomingEmailExchangeEmailRetrievalBatchSize'.<br />
        /// Setting for the Async Service Mailbox Queue. Defines the retrieval batch size of exchange server.
        /// </summary>
		[AttributeLogicalName("incomingemailexchangeemailretrievalbatchsize"), InRange("1", "2147483647", typeof(int))]
		public int? ExchangeEmailRetrievalBatchSize
		{
			get
			{
				var value = GetAttributeValue<int?>("incomingemailexchangeemailretrievalbatchsize");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("incomingemailexchangeemailretrievalbatchsize"))
				    value = (int?) backupAttributeCollection["incomingemailexchangeemailretrievalbatchsize"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ExchangeEmailRetrievalBatchSize");
					SetAttributeValue("incomingemailexchangeemailretrievalbatchsize", value);
				OnPropertyChanged("ExchangeEmailRetrievalBatchSize");
			}
		}

        /// <summary>
        /// [MaximumLength=20] 
		/// 'InitialVersion'.<br />
        /// Initial version of the organization.
        /// </summary>
		[AttributeLogicalName("initialversion"), MaxLength(20)]
		public string InitialVersion
		{
			get
			{
				var value = GetAttributeValue<string>("initialversion");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("initialversion"))
				    value = (string) backupAttributeCollection["initialversion"];
			    return value;
			}
			set
			{
				OnPropertyChanging("InitialVersion");
					SetAttributeValue("initialversion", value);
				OnPropertyChanged("InitialVersion");
			}
		}

        /// <summary>
        ///  
		/// 'IntegrationUserId'.<br />
        /// Unique identifier of the integration user for the organization.
        /// </summary>
		[AttributeLogicalName("integrationuserid")]
		public Guid? IntegrationUser
		{
			get
			{
				var value = GetAttributeValue<Guid?>("integrationuserid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("integrationuserid"))
				    value = (Guid?) backupAttributeCollection["integrationuserid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("IntegrationUser");
					SetAttributeValue("integrationuserid", value);
				OnPropertyChanged("IntegrationUser");
			}
		}

        /// <summary>
        /// [MaximumLength=20] 
		/// 'InvoicePrefix'.<br />
        /// Prefix to use for all invoice numbers throughout Microsoft Dynamics 365.
        /// </summary>
		[AttributeLogicalName("invoiceprefix"), MaxLength(20)]
		public string InvoicePrefix
		{
			get
			{
				var value = GetAttributeValue<string>("invoiceprefix");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("invoiceprefix"))
				    value = (string) backupAttributeCollection["invoiceprefix"];
			    return value;
			}
			set
			{
				OnPropertyChanging("InvoicePrefix");
					SetAttributeValue("invoiceprefix", value);
				OnPropertyChanged("InvoicePrefix");
			}
		}

        /// <summary>
        ///  
		/// 'IsActionCardEnabled'.<br />
        /// Indicates whether the feature Action Card should be enabled for the organization.
        /// </summary>
		[AttributeLogicalName("isactioncardenabled")]
		public bool? EnableActionCardforthisOrganization
		{
			get
			{
				var value = GetAttributeValue<bool?>("isactioncardenabled");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("isactioncardenabled"))
				    value = (bool?) backupAttributeCollection["isactioncardenabled"];
			    return value;
			}
			set
			{
				OnPropertyChanging("EnableActionCardforthisOrganization");
					SetAttributeValue("isactioncardenabled", value);
				OnPropertyChanged("EnableActionCardforthisOrganization");
			}
		}

        /// <summary>
        ///  
		/// 'IsActivityAnalysisEnabled'.<br />
        /// Indicates whether the feature Relationship Analytics should be enabled for the organization.
        /// </summary>
		[AttributeLogicalName("isactivityanalysisenabled")]
		public bool? EnableRelationshipAnalyticsforthisOrganization
		{
			get
			{
				var value = GetAttributeValue<bool?>("isactivityanalysisenabled");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("isactivityanalysisenabled"))
				    value = (bool?) backupAttributeCollection["isactivityanalysisenabled"];
			    return value;
			}
			set
			{
				OnPropertyChanging("EnableRelationshipAnalyticsforthisOrganization");
					SetAttributeValue("isactivityanalysisenabled", value);
				OnPropertyChanged("EnableRelationshipAnalyticsforthisOrganization");
			}
		}

        /// <summary>
        ///  
		/// 'IsAppMode'.<br />
        /// Indicates whether loading of Microsoft Dynamics 365 in a browser window that does not have address, tool, and menu bars is enabled.
        /// </summary>
		[AttributeLogicalName("isappmode")]
		public bool? IsApplicationModeEnabled
		{
			get
			{
				var value = GetAttributeValue<bool?>("isappmode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("isappmode"))
				    value = (bool?) backupAttributeCollection["isappmode"];
			    return value;
			}
			set
			{
				OnPropertyChanging("IsApplicationModeEnabled");
					SetAttributeValue("isappmode", value);
				OnPropertyChanged("IsApplicationModeEnabled");
			}
		}

        /// <summary>
        ///  
		/// 'IsAppointmentAttachmentSyncEnabled'.<br />
        /// Enable or disable attachments sync for outlook and exchange.
        /// </summary>
		[AttributeLogicalName("isappointmentattachmentsyncenabled")]
		public bool? IsAttachmentSyncEnabled
		{
			get
			{
				var value = GetAttributeValue<bool?>("isappointmentattachmentsyncenabled");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("isappointmentattachmentsyncenabled"))
				    value = (bool?) backupAttributeCollection["isappointmentattachmentsyncenabled"];
			    return value;
			}
			set
			{
				OnPropertyChanging("IsAttachmentSyncEnabled");
					SetAttributeValue("isappointmentattachmentsyncenabled", value);
				OnPropertyChanged("IsAttachmentSyncEnabled");
			}
		}

        /// <summary>
        ///  
		/// 'IsAssignedTasksSyncEnabled'.<br />
        /// Enable or disable assigned tasks sync for outlook and exchange.
        /// </summary>
		[AttributeLogicalName("isassignedtaskssyncenabled")]
		public bool? IsAssignedTasksSyncEnabled
		{
			get
			{
				var value = GetAttributeValue<bool?>("isassignedtaskssyncenabled");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("isassignedtaskssyncenabled"))
				    value = (bool?) backupAttributeCollection["isassignedtaskssyncenabled"];
			    return value;
			}
			set
			{
				OnPropertyChanging("IsAssignedTasksSyncEnabled");
					SetAttributeValue("isassignedtaskssyncenabled", value);
				OnPropertyChanged("IsAssignedTasksSyncEnabled");
			}
		}

        /// <summary>
        ///  
		/// 'IsAuditEnabled'.<br />
        /// Enable or disable auditing of changes.
        /// </summary>
		[AttributeLogicalName("isauditenabled")]
		public bool? IsAuditingEnabled
		{
			get
			{
				var value = GetAttributeValue<bool?>("isauditenabled");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("isauditenabled"))
				    value = (bool?) backupAttributeCollection["isauditenabled"];
			    return value;
			}
			set
			{
				OnPropertyChanging("IsAuditingEnabled");
					SetAttributeValue("isauditenabled", value);
				OnPropertyChanged("IsAuditingEnabled");
			}
		}

        /// <summary>
        ///  
		/// 'IsAutoDataCaptureEnabled'.<br />
        /// Indicates whether the feature Auto Capture should be enabled for the organization.
        /// </summary>
		[AttributeLogicalName("isautodatacaptureenabled")]
		public bool? EnableAutoCaptureforthisOrganization
		{
			get
			{
				var value = GetAttributeValue<bool?>("isautodatacaptureenabled");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("isautodatacaptureenabled"))
				    value = (bool?) backupAttributeCollection["isautodatacaptureenabled"];
			    return value;
			}
			set
			{
				OnPropertyChanging("EnableAutoCaptureforthisOrganization");
					SetAttributeValue("isautodatacaptureenabled", value);
				OnPropertyChanged("EnableAutoCaptureforthisOrganization");
			}
		}

        /// <summary>
        ///  
		/// 'IsAutoSaveEnabled'.<br />
        /// Information on whether auto save is enabled.
        /// </summary>
		[AttributeLogicalName("isautosaveenabled")]
		public bool? AutoSaveEnabled
		{
			get
			{
				var value = GetAttributeValue<bool?>("isautosaveenabled");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("isautosaveenabled"))
				    value = (bool?) backupAttributeCollection["isautosaveenabled"];
			    return value;
			}
			set
			{
				OnPropertyChanging("AutoSaveEnabled");
					SetAttributeValue("isautosaveenabled", value);
				OnPropertyChanged("AutoSaveEnabled");
			}
		}

        /// <summary>
        ///  
		/// 'IsConflictDetectionEnabledForMobileClient'.<br />
        /// Information that specifies whether conflict detection for mobile client is enabled.
        /// </summary>
		[AttributeLogicalName("isconflictdetectionenabledformobileclient")]
		public bool? IsConflictDetectionforMobileClientenabled
		{
			get
			{
				var value = GetAttributeValue<bool?>("isconflictdetectionenabledformobileclient");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("isconflictdetectionenabledformobileclient"))
				    value = (bool?) backupAttributeCollection["isconflictdetectionenabledformobileclient"];
			    return value;
			}
			set
			{
				OnPropertyChanging("IsConflictDetectionforMobileClientenabled");
					SetAttributeValue("isconflictdetectionenabledformobileclient", value);
				OnPropertyChanged("IsConflictDetectionforMobileClientenabled");
			}
		}

        /// <summary>
        ///  
		/// 'IsContactMailingAddressSyncEnabled'.<br />
        /// Enable or disable mailing address sync for outlook and exchange.
        /// </summary>
		[AttributeLogicalName("iscontactmailingaddresssyncenabled")]
		public bool? IsMailingAddressSyncEnabled
		{
			get
			{
				var value = GetAttributeValue<bool?>("iscontactmailingaddresssyncenabled");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("iscontactmailingaddresssyncenabled"))
				    value = (bool?) backupAttributeCollection["iscontactmailingaddresssyncenabled"];
			    return value;
			}
			set
			{
				OnPropertyChanging("IsMailingAddressSyncEnabled");
					SetAttributeValue("iscontactmailingaddresssyncenabled", value);
				OnPropertyChanged("IsMailingAddressSyncEnabled");
			}
		}

        /// <summary>
        ///  
		/// 'IsDefaultCountryCodeCheckEnabled'.<br />
        /// Enable or disable country code selection.
        /// </summary>
		[AttributeLogicalName("isdefaultcountrycodecheckenabled")]
		public bool? Enableordisablecountrycodeselection
		{
			get
			{
				var value = GetAttributeValue<bool?>("isdefaultcountrycodecheckenabled");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("isdefaultcountrycodecheckenabled"))
				    value = (bool?) backupAttributeCollection["isdefaultcountrycodecheckenabled"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Enableordisablecountrycodeselection");
					SetAttributeValue("isdefaultcountrycodecheckenabled", value);
				OnPropertyChanged("Enableordisablecountrycodeselection");
			}
		}

        /// <summary>
        ///  
		/// 'IsDelegateAccessEnabled'.<br />
        /// Enable Delegation Access content
        /// </summary>
		[AttributeLogicalName("isdelegateaccessenabled")]
		public bool? IsDelegationAccessEnabled
		{
			get
			{
				var value = GetAttributeValue<bool?>("isdelegateaccessenabled");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("isdelegateaccessenabled"))
				    value = (bool?) backupAttributeCollection["isdelegateaccessenabled"];
			    return value;
			}
			set
			{
				OnPropertyChanging("IsDelegationAccessEnabled");
					SetAttributeValue("isdelegateaccessenabled", value);
				OnPropertyChanged("IsDelegationAccessEnabled");
			}
		}

        /// <summary>
        ///  
		/// 'IsDelveActionHubIntegrationEnabled'.<br />
        /// Indicates whether the feature Action Hub should be enabled for the organization.
        /// </summary>
		[AttributeLogicalName("isdelveactionhubintegrationenabled")]
		public bool? EnableActionHubforthisOrganization
		{
			get
			{
				var value = GetAttributeValue<bool?>("isdelveactionhubintegrationenabled");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("isdelveactionhubintegrationenabled"))
				    value = (bool?) backupAttributeCollection["isdelveactionhubintegrationenabled"];
			    return value;
			}
			set
			{
				OnPropertyChanging("EnableActionHubforthisOrganization");
					SetAttributeValue("isdelveactionhubintegrationenabled", value);
				OnPropertyChanged("EnableActionHubforthisOrganization");
			}
		}

        /// <summary>
        ///  
		/// 'IsDisabled'.<br />
        /// Information that specifies whether the organization is disabled.
        /// </summary>
		[AttributeLogicalName("isdisabled")]
		public bool? IsOrganizationDisabled
		{
			get
			{
				var value = GetAttributeValue<bool?>("isdisabled");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("isdisabled"))
				    value = (bool?) backupAttributeCollection["isdisabled"];
			    return value;
			}
			set
			{
				OnPropertyChanging("IsOrganizationDisabled");
					SetAttributeValue("isdisabled", value);
				OnPropertyChanged("IsOrganizationDisabled");
			}
		}

        /// <summary>
        ///  
		/// 'IsDuplicateDetectionEnabled'.<br />
        /// Indicates whether duplicate detection of records is enabled.
        /// </summary>
		[AttributeLogicalName("isduplicatedetectionenabled")]
		public bool? IsDuplicateDetectionEnabled
		{
			get
			{
				var value = GetAttributeValue<bool?>("isduplicatedetectionenabled");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("isduplicatedetectionenabled"))
				    value = (bool?) backupAttributeCollection["isduplicatedetectionenabled"];
			    return value;
			}
			set
			{
				OnPropertyChanging("IsDuplicateDetectionEnabled");
					SetAttributeValue("isduplicatedetectionenabled", value);
				OnPropertyChanged("IsDuplicateDetectionEnabled");
			}
		}

        /// <summary>
        ///  
		/// 'IsDuplicateDetectionEnabledForImport'.<br />
        /// Indicates whether duplicate detection of records during import is enabled.
        /// </summary>
		[AttributeLogicalName("isduplicatedetectionenabledforimport")]
		public bool? IsDuplicateDetectionEnabledForImport
		{
			get
			{
				var value = GetAttributeValue<bool?>("isduplicatedetectionenabledforimport");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("isduplicatedetectionenabledforimport"))
				    value = (bool?) backupAttributeCollection["isduplicatedetectionenabledforimport"];
			    return value;
			}
			set
			{
				OnPropertyChanging("IsDuplicateDetectionEnabledForImport");
					SetAttributeValue("isduplicatedetectionenabledforimport", value);
				OnPropertyChanged("IsDuplicateDetectionEnabledForImport");
			}
		}

        /// <summary>
        ///  
		/// 'IsDuplicateDetectionEnabledForOfflineSync'.<br />
        /// Indicates whether duplicate detection of records during offline synchronization is enabled.
        /// </summary>
		[AttributeLogicalName("isduplicatedetectionenabledforofflinesync")]
		public bool? IsDuplicateDetectionEnabledForOfflineSynchronization
		{
			get
			{
				var value = GetAttributeValue<bool?>("isduplicatedetectionenabledforofflinesync");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("isduplicatedetectionenabledforofflinesync"))
				    value = (bool?) backupAttributeCollection["isduplicatedetectionenabledforofflinesync"];
			    return value;
			}
			set
			{
				OnPropertyChanging("IsDuplicateDetectionEnabledForOfflineSynchronization");
					SetAttributeValue("isduplicatedetectionenabledforofflinesync", value);
				OnPropertyChanged("IsDuplicateDetectionEnabledForOfflineSynchronization");
			}
		}

        /// <summary>
        ///  
		/// 'IsDuplicateDetectionEnabledForOnlineCreateUpdate'.<br />
        /// Indicates whether duplicate detection during online create or update is enabled.
        /// </summary>
		[AttributeLogicalName("isduplicatedetectionenabledforonlinecreateupdate")]
		public bool? IsDuplicateDetectionEnabledforOnlineCreateUpdate
		{
			get
			{
				var value = GetAttributeValue<bool?>("isduplicatedetectionenabledforonlinecreateupdate");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("isduplicatedetectionenabledforonlinecreateupdate"))
				    value = (bool?) backupAttributeCollection["isduplicatedetectionenabledforonlinecreateupdate"];
			    return value;
			}
			set
			{
				OnPropertyChanging("IsDuplicateDetectionEnabledforOnlineCreateUpdate");
					SetAttributeValue("isduplicatedetectionenabledforonlinecreateupdate", value);
				OnPropertyChanged("IsDuplicateDetectionEnabledforOnlineCreateUpdate");
			}
		}

        /// <summary>
        ///  
		/// 'IsEmailMonitoringAllowed'.<br />
        /// Allow tracking recipient activity on sent emails.
        /// </summary>
		[AttributeLogicalName("isemailmonitoringallowed")]
		public bool? Allowtrackingrecipientactivityonsentemails
		{
			get
			{
				var value = GetAttributeValue<bool?>("isemailmonitoringallowed");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("isemailmonitoringallowed"))
				    value = (bool?) backupAttributeCollection["isemailmonitoringallowed"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Allowtrackingrecipientactivityonsentemails");
					SetAttributeValue("isemailmonitoringallowed", value);
				OnPropertyChanged("Allowtrackingrecipientactivityonsentemails");
			}
		}

        /// <summary>
        ///  
		/// 'IsEmailServerProfileContentFilteringEnabled'.<br />
        /// Enable Email Server Profile content filtering
        /// </summary>
		[AttributeLogicalName("isemailserverprofilecontentfilteringenabled")]
		public bool? IsEmailServerProfileContentFilteringEnabled
		{
			get
			{
				var value = GetAttributeValue<bool?>("isemailserverprofilecontentfilteringenabled");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("isemailserverprofilecontentfilteringenabled"))
				    value = (bool?) backupAttributeCollection["isemailserverprofilecontentfilteringenabled"];
			    return value;
			}
			set
			{
				OnPropertyChanging("IsEmailServerProfileContentFilteringEnabled");
					SetAttributeValue("isemailserverprofilecontentfilteringenabled", value);
				OnPropertyChanged("IsEmailServerProfileContentFilteringEnabled");
			}
		}

        /// <summary>
        ///  
		/// 'IsEnabledForAllRoles'.<br />
        /// Indicates whether appmodule is enabled for all roles
        /// </summary>
		[AttributeLogicalName("isenabledforallroles")]
		public bool? optionsetvaluesforisenabledforallroles
		{
			get
			{
				var value = GetAttributeValue<bool?>("isenabledforallroles");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("isenabledforallroles"))
				    value = (bool?) backupAttributeCollection["isenabledforallroles"];
			    return value;
			}
			set
			{
				OnPropertyChanging("optionsetvaluesforisenabledforallroles");
					SetAttributeValue("isenabledforallroles", value);
				OnPropertyChanged("optionsetvaluesforisenabledforallroles");
			}
		}

        /// <summary>
        ///  
		/// 'IsExternalSearchIndexEnabled'.<br />
        /// Select whether data can be synchronized with an external search index.
        /// </summary>
		[AttributeLogicalName("isexternalsearchindexenabled")]
		public bool? Enableexternalsearchdatasyncing
		{
			get
			{
				var value = GetAttributeValue<bool?>("isexternalsearchindexenabled");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("isexternalsearchindexenabled"))
				    value = (bool?) backupAttributeCollection["isexternalsearchindexenabled"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Enableexternalsearchdatasyncing");
					SetAttributeValue("isexternalsearchindexenabled", value);
				OnPropertyChanged("Enableexternalsearchdatasyncing");
			}
		}

        /// <summary>
        ///  
		/// 'IsFiscalPeriodMonthBased'.<br />
        /// Indicates whether the fiscal period is displayed as the month number.
        /// </summary>
		[AttributeLogicalName("isfiscalperiodmonthbased")]
		public bool? IsFiscalPeriodMonthly
		{
			get
			{
				var value = GetAttributeValue<bool?>("isfiscalperiodmonthbased");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("isfiscalperiodmonthbased"))
				    value = (bool?) backupAttributeCollection["isfiscalperiodmonthbased"];
			    return value;
			}
			set
			{
				OnPropertyChanging("IsFiscalPeriodMonthly");
					SetAttributeValue("isfiscalperiodmonthbased", value);
				OnPropertyChanged("IsFiscalPeriodMonthly");
			}
		}

        /// <summary>
        ///  
		/// 'IsFolderAutoCreatedonSP'.<br />
        /// Select whether folders should be automatically created on SharePoint.
        /// </summary>
		[AttributeLogicalName("isfolderautocreatedonsp")]
		public bool? Automaticallycreatefolders
		{
			get
			{
				var value = GetAttributeValue<bool?>("isfolderautocreatedonsp");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("isfolderautocreatedonsp"))
				    value = (bool?) backupAttributeCollection["isfolderautocreatedonsp"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Automaticallycreatefolders");
					SetAttributeValue("isfolderautocreatedonsp", value);
				OnPropertyChanged("Automaticallycreatefolders");
			}
		}

        /// <summary>
        ///  
		/// 'IsFolderBasedTrackingEnabled'.<br />
        /// Enable or disable folder based tracking for Server Side Sync.
        /// </summary>
		[AttributeLogicalName("isfolderbasedtrackingenabled")]
		public bool? IsFolderBasedTrackingEnabled
		{
			get
			{
				var value = GetAttributeValue<bool?>("isfolderbasedtrackingenabled");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("isfolderbasedtrackingenabled"))
				    value = (bool?) backupAttributeCollection["isfolderbasedtrackingenabled"];
			    return value;
			}
			set
			{
				OnPropertyChanging("IsFolderBasedTrackingEnabled");
					SetAttributeValue("isfolderbasedtrackingenabled", value);
				OnPropertyChanged("IsFolderBasedTrackingEnabled");
			}
		}

        /// <summary>
        ///  
		/// 'IsFullTextSearchEnabled'.<br />
        /// Indicates whether full-text search for Quick Find entities should be enabled for the organization.
        /// </summary>
		[AttributeLogicalName("isfulltextsearchenabled")]
		public bool? EnableFulltextsearchforQuickFind
		{
			get
			{
				var value = GetAttributeValue<bool?>("isfulltextsearchenabled");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("isfulltextsearchenabled"))
				    value = (bool?) backupAttributeCollection["isfulltextsearchenabled"];
			    return value;
			}
			set
			{
				OnPropertyChanging("EnableFulltextsearchforQuickFind");
					SetAttributeValue("isfulltextsearchenabled", value);
				OnPropertyChanged("EnableFulltextsearchforQuickFind");
			}
		}

        /// <summary>
        ///  
		/// 'IsHierarchicalSecurityModelEnabled'.<br />
        /// Enable Hierarchical Security Model
        /// </summary>
		[AttributeLogicalName("ishierarchicalsecuritymodelenabled")]
		public bool? EnableHierarchicalSecurityModel
		{
			get
			{
				var value = GetAttributeValue<bool?>("ishierarchicalsecuritymodelenabled");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ishierarchicalsecuritymodelenabled"))
				    value = (bool?) backupAttributeCollection["ishierarchicalsecuritymodelenabled"];
			    return value;
			}
			set
			{
				OnPropertyChanging("EnableHierarchicalSecurityModel");
					SetAttributeValue("ishierarchicalsecuritymodelenabled", value);
				OnPropertyChanged("EnableHierarchicalSecurityModel");
			}
		}

        /// <summary>
        ///  
		/// 'IsMailboxForcedUnlockingEnabled'.<br />
        /// Enable or disable forced unlocking for Server Side Sync mailboxes.
        /// </summary>
		[AttributeLogicalName("ismailboxforcedunlockingenabled")]
		public bool? IsMailboxForcedUnlockingEnabled
		{
			get
			{
				var value = GetAttributeValue<bool?>("ismailboxforcedunlockingenabled");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ismailboxforcedunlockingenabled"))
				    value = (bool?) backupAttributeCollection["ismailboxforcedunlockingenabled"];
			    return value;
			}
			set
			{
				OnPropertyChanging("IsMailboxForcedUnlockingEnabled");
					SetAttributeValue("ismailboxforcedunlockingenabled", value);
				OnPropertyChanged("IsMailboxForcedUnlockingEnabled");
			}
		}

        /// <summary>
        ///  
		/// 'IsMailboxInactiveBackoffEnabled'.<br />
        /// Enable or disable mailbox keep alive for Server Side Sync.
        /// </summary>
		[AttributeLogicalName("ismailboxinactivebackoffenabled")]
		public bool? IsMailboxKeepAliveEnabled
		{
			get
			{
				var value = GetAttributeValue<bool?>("ismailboxinactivebackoffenabled");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ismailboxinactivebackoffenabled"))
				    value = (bool?) backupAttributeCollection["ismailboxinactivebackoffenabled"];
			    return value;
			}
			set
			{
				OnPropertyChanging("IsMailboxKeepAliveEnabled");
					SetAttributeValue("ismailboxinactivebackoffenabled", value);
				OnPropertyChanged("IsMailboxKeepAliveEnabled");
			}
		}

        /// <summary>
        ///  
		/// 'IsMobileClientOnDemandSyncEnabled'.<br />
        /// Information that specifies whether mobile client on demand sync is enabled.
        /// </summary>
		[AttributeLogicalName("ismobileclientondemandsyncenabled")]
		public bool? IsMobileClientOnDemandSyncenabled
		{
			get
			{
				var value = GetAttributeValue<bool?>("ismobileclientondemandsyncenabled");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ismobileclientondemandsyncenabled"))
				    value = (bool?) backupAttributeCollection["ismobileclientondemandsyncenabled"];
			    return value;
			}
			set
			{
				OnPropertyChanging("IsMobileClientOnDemandSyncenabled");
					SetAttributeValue("ismobileclientondemandsyncenabled", value);
				OnPropertyChanged("IsMobileClientOnDemandSyncenabled");
			}
		}

        /// <summary>
        ///  
		/// 'IsMobileOfflineEnabled'.<br />
        /// Indicates whether the feature MobileOffline should be enabled for the organization.
        /// </summary>
		[AttributeLogicalName("ismobileofflineenabled")]
		public bool? EnableMobileOfflineforthisOrganization
		{
			get
			{
				var value = GetAttributeValue<bool?>("ismobileofflineenabled");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ismobileofflineenabled"))
				    value = (bool?) backupAttributeCollection["ismobileofflineenabled"];
			    return value;
			}
			set
			{
				OnPropertyChanging("EnableMobileOfflineforthisOrganization");
					SetAttributeValue("ismobileofflineenabled", value);
				OnPropertyChanged("EnableMobileOfflineforthisOrganization");
			}
		}

        /// <summary>
        ///  
		/// 'IsOfficeGraphEnabled'.<br />
        /// Indicates whether the feature OfficeGraph should be enabled for the organization.
        /// </summary>
		[AttributeLogicalName("isofficegraphenabled")]
		public bool? EnableOfficeGraphforthisOrganization
		{
			get
			{
				var value = GetAttributeValue<bool?>("isofficegraphenabled");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("isofficegraphenabled"))
				    value = (bool?) backupAttributeCollection["isofficegraphenabled"];
			    return value;
			}
			set
			{
				OnPropertyChanging("EnableOfficeGraphforthisOrganization");
					SetAttributeValue("isofficegraphenabled", value);
				OnPropertyChanged("EnableOfficeGraphforthisOrganization");
			}
		}

        /// <summary>
        ///  
		/// 'IsOneDriveEnabled'.<br />
        /// Indicates whether the feature One Drive should be enabled for the organization.
        /// </summary>
		[AttributeLogicalName("isonedriveenabled")]
		public bool? EnableOneDriveforthisOrganization
		{
			get
			{
				var value = GetAttributeValue<bool?>("isonedriveenabled");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("isonedriveenabled"))
				    value = (bool?) backupAttributeCollection["isonedriveenabled"];
			    return value;
			}
			set
			{
				OnPropertyChanging("EnableOneDriveforthisOrganization");
					SetAttributeValue("isonedriveenabled", value);
				OnPropertyChanged("EnableOneDriveforthisOrganization");
			}
		}

        /// <summary>
        ///  
		/// 'IsPresenceEnabled'.<br />
        /// Information on whether IM presence is enabled.
        /// </summary>
		[AttributeLogicalName("ispresenceenabled")]
		public bool? PresenceEnabled
		{
			get
			{
				var value = GetAttributeValue<bool?>("ispresenceenabled");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ispresenceenabled"))
				    value = (bool?) backupAttributeCollection["ispresenceenabled"];
			    return value;
			}
			set
			{
				OnPropertyChanging("PresenceEnabled");
					SetAttributeValue("ispresenceenabled", value);
				OnPropertyChanged("PresenceEnabled");
			}
		}

        /// <summary>
        ///  
		/// 'IsPreviewEnabledForActionCard'.<br />
        /// Indicates whether the Preview feature for Action Card should be enabled for the organization.
        /// </summary>
		[AttributeLogicalName("ispreviewenabledforactioncard")]
		public bool? EnablePreviewActionCardfeatureforthisOrganization
		{
			get
			{
				var value = GetAttributeValue<bool?>("ispreviewenabledforactioncard");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ispreviewenabledforactioncard"))
				    value = (bool?) backupAttributeCollection["ispreviewenabledforactioncard"];
			    return value;
			}
			set
			{
				OnPropertyChanging("EnablePreviewActionCardfeatureforthisOrganization");
					SetAttributeValue("ispreviewenabledforactioncard", value);
				OnPropertyChanged("EnablePreviewActionCardfeatureforthisOrganization");
			}
		}

        /// <summary>
        ///  
		/// 'IsPreviewForAutoCaptureEnabled'.<br />
        /// Indicates whether the feature Auto Capture should be enabled for the organization at Preview Settings.
        /// </summary>
		[AttributeLogicalName("ispreviewforautocaptureenabled")]
		public bool? EnableAutoCaptureforthisOrganizationatPreviewSettings
		{
			get
			{
				var value = GetAttributeValue<bool?>("ispreviewforautocaptureenabled");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ispreviewforautocaptureenabled"))
				    value = (bool?) backupAttributeCollection["ispreviewforautocaptureenabled"];
			    return value;
			}
			set
			{
				OnPropertyChanging("EnableAutoCaptureforthisOrganizationatPreviewSettings");
					SetAttributeValue("ispreviewforautocaptureenabled", value);
				OnPropertyChanged("EnableAutoCaptureforthisOrganizationatPreviewSettings");
			}
		}

        /// <summary>
        ///  
		/// 'IsPreviewForEmailMonitoringAllowed'.<br />
        /// Is Preview For Email Monitoring Allowed.
        /// </summary>
		[AttributeLogicalName("ispreviewforemailmonitoringallowed")]
		public bool? AllowsPreviewForEmailMonitoring
		{
			get
			{
				var value = GetAttributeValue<bool?>("ispreviewforemailmonitoringallowed");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ispreviewforemailmonitoringallowed"))
				    value = (bool?) backupAttributeCollection["ispreviewforemailmonitoringallowed"];
			    return value;
			}
			set
			{
				OnPropertyChanging("AllowsPreviewForEmailMonitoring");
					SetAttributeValue("ispreviewforemailmonitoringallowed", value);
				OnPropertyChanged("AllowsPreviewForEmailMonitoring");
			}
		}

        /// <summary>
        ///  
		/// 'IsRelationshipInsightsEnabled'.<br />
        /// Indicates whether the feature Relationship Insights should be enabled for the organization.
        /// </summary>
		[AttributeLogicalName("isrelationshipinsightsenabled")]
		public bool? EnableRelationshipInsightsforthisOrganization
		{
			get
			{
				var value = GetAttributeValue<bool?>("isrelationshipinsightsenabled");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("isrelationshipinsightsenabled"))
				    value = (bool?) backupAttributeCollection["isrelationshipinsightsenabled"];
			    return value;
			}
			set
			{
				OnPropertyChanging("EnableRelationshipInsightsforthisOrganization");
					SetAttributeValue("isrelationshipinsightsenabled", value);
				OnPropertyChanged("EnableRelationshipInsightsforthisOrganization");
			}
		}

        /// <summary>
        ///  
		/// 'IsResourceBookingExchangeSyncEnabled'.<br />
        /// Indicates if the synchronization of user resource booking with Exchange is enabled at organization level.
        /// </summary>
		[AttributeLogicalName("isresourcebookingexchangesyncenabled")]
		public bool? Resourcebookingsynchronizationenabled
		{
			get
			{
				var value = GetAttributeValue<bool?>("isresourcebookingexchangesyncenabled");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("isresourcebookingexchangesyncenabled"))
				    value = (bool?) backupAttributeCollection["isresourcebookingexchangesyncenabled"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Resourcebookingsynchronizationenabled");
					SetAttributeValue("isresourcebookingexchangesyncenabled", value);
				OnPropertyChanged("Resourcebookingsynchronizationenabled");
			}
		}

        /// <summary>
        ///  
		/// 'IsSOPIntegrationEnabled'.<br />
        /// Enable sales order processing integration.
        /// </summary>
		[AttributeLogicalName("issopintegrationenabled")]
		public bool? IsSalesOrderIntegrationEnabled
		{
			get
			{
				var value = GetAttributeValue<bool?>("issopintegrationenabled");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("issopintegrationenabled"))
				    value = (bool?) backupAttributeCollection["issopintegrationenabled"];
			    return value;
			}
			set
			{
				OnPropertyChanging("IsSalesOrderIntegrationEnabled");
					SetAttributeValue("issopintegrationenabled", value);
				OnPropertyChanged("IsSalesOrderIntegrationEnabled");
			}
		}

        /// <summary>
        ///  
		/// 'IsUserAccessAuditEnabled'.<br />
        /// Enable or disable auditing of user access.
        /// </summary>
		[AttributeLogicalName("isuseraccessauditenabled")]
		public bool? IsUserAccessAuditingEnabled
		{
			get
			{
				var value = GetAttributeValue<bool?>("isuseraccessauditenabled");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("isuseraccessauditenabled"))
				    value = (bool?) backupAttributeCollection["isuseraccessauditenabled"];
			    return value;
			}
			set
			{
				OnPropertyChanging("IsUserAccessAuditingEnabled");
					SetAttributeValue("isuseraccessauditenabled", value);
				OnPropertyChanged("IsUserAccessAuditingEnabled");
			}
		}

        /// <summary>
        ///  
		/// 'ISVIntegrationCode'.<br />
        /// Indicates whether loading of Microsoft Dynamics 365 in a browser window that does not have address, tool, and menu bars is enabled.
        /// </summary>
		[AttributeLogicalName("isvintegrationcode")]
		[Obsolete]
		public ISVIntegrationModeEnum? ISVIntegrationMode
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("isvintegrationcode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("isvintegrationcode"))
				    value = (OptionSetValue) backupAttributeCollection["isvintegrationcode"];
                return value == null ? (ISVIntegrationModeEnum?) null : (ISVIntegrationModeEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("ISVIntegrationMode");
                if (value != null)
				    SetAttributeValue("isvintegrationcode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("isvintegrationcode", value);
				OnPropertyChanged("ISVIntegrationMode");
			}
		}

        /// <summary>
        /// [MaximumLength=20] 
		/// 'KaPrefix'.<br />
        /// Type the prefix to use for all knowledge articles in Microsoft Dynamics 365.
        /// </summary>
		[AttributeLogicalName("kaprefix"), MaxLength(20)]
		public string KnowledgeArticlePrefix
		{
			get
			{
				var value = GetAttributeValue<string>("kaprefix");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("kaprefix"))
				    value = (string) backupAttributeCollection["kaprefix"];
			    return value;
			}
			set
			{
				OnPropertyChanging("KnowledgeArticlePrefix");
					SetAttributeValue("kaprefix", value);
				OnPropertyChanged("KnowledgeArticlePrefix");
			}
		}

        /// <summary>
        /// [MaximumLength=20] 
		/// 'KbPrefix'.<br />
        /// Prefix to use for all articles in Microsoft Dynamics 365.
        /// </summary>
		[AttributeLogicalName("kbprefix"), MaxLength(20)]
		public string ArticlePrefix
		{
			get
			{
				var value = GetAttributeValue<string>("kbprefix");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("kbprefix"))
				    value = (string) backupAttributeCollection["kbprefix"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ArticlePrefix");
					SetAttributeValue("kbprefix", value);
				OnPropertyChanged("ArticlePrefix");
			}
		}

        /// <summary>
        /// [MaximumLength=1073741823] 
		/// 'KMSettings'.<br />
        /// XML string containing the Knowledge Management settings that are applied in Knowledge Management Wizard.
        /// </summary>
		[AttributeLogicalName("kmsettings"), MaxLength(1073741823)]
		public string KnowledgeManagementSettings
		{
			get
			{
				var value = GetAttributeValue<string>("kmsettings");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("kmsettings"))
				    value = (string) backupAttributeCollection["kmsettings"];
			    return value;
			}
			set
			{
				OnPropertyChanging("KnowledgeManagementSettings");
					SetAttributeValue("kmsettings", value);
				OnPropertyChanged("KnowledgeManagementSettings");
			}
		}

        /// <summary>
        /// [Range(0, 2147483647)] 
		/// 'LanguageCode'.<br />
        /// Preferred language for the organization.
        /// </summary>
		[AttributeLogicalName("languagecode"), InRange("0", "2147483647", typeof(int))]
		public int? Language
		{
			get
			{
				var value = GetAttributeValue<int?>("languagecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("languagecode"))
				    value = (int?) backupAttributeCollection["languagecode"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Language");
					SetAttributeValue("languagecode", value);
				OnPropertyChanged("Language");
			}
		}

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'LocaleId'.<br />
        /// Unique identifier of the locale of the organization.
        /// </summary>
		[AttributeLogicalName("localeid"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? Locale
		{
			get
			{
				var value = GetAttributeValue<int?>("localeid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("localeid"))
				    value = (int?) backupAttributeCollection["localeid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Locale");
					SetAttributeValue("localeid", value);
				OnPropertyChanged("Locale");
			}
		}

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'LongDateFormatCode'.<br />
        /// Information that specifies how the Long Date format is displayed in Microsoft Dynamics 365.
        /// </summary>
		[AttributeLogicalName("longdateformatcode"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? LongDateFormat
		{
			get
			{
				var value = GetAttributeValue<int?>("longdateformatcode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("longdateformatcode"))
				    value = (int?) backupAttributeCollection["longdateformatcode"];
			    return value;
			}
			set
			{
				OnPropertyChanging("LongDateFormat");
					SetAttributeValue("longdateformatcode", value);
				OnPropertyChanged("LongDateFormat");
			}
		}

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'MailboxIntermittentIssueMinRange'.<br />
        /// Lower Threshold For Mailbox Intermittent Issue.
        /// </summary>
		[AttributeLogicalName("mailboxintermittentissueminrange"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? LowerThresholdForMailboxIntermittentIssue
		{
			get
			{
				var value = GetAttributeValue<int?>("mailboxintermittentissueminrange");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("mailboxintermittentissueminrange"))
				    value = (int?) backupAttributeCollection["mailboxintermittentissueminrange"];
			    return value;
			}
			set
			{
				OnPropertyChanging("LowerThresholdForMailboxIntermittentIssue");
					SetAttributeValue("mailboxintermittentissueminrange", value);
				OnPropertyChanged("LowerThresholdForMailboxIntermittentIssue");
			}
		}

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'MailboxPermanentIssueMinRange'.<br />
        /// Lower Threshold For Mailbox Permanent Issue.
        /// </summary>
		[AttributeLogicalName("mailboxpermanentissueminrange"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? LowerThresholdForMailboxPermanentIssue
		{
			get
			{
				var value = GetAttributeValue<int?>("mailboxpermanentissueminrange");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("mailboxpermanentissueminrange"))
				    value = (int?) backupAttributeCollection["mailboxpermanentissueminrange"];
			    return value;
			}
			set
			{
				OnPropertyChanging("LowerThresholdForMailboxPermanentIssue");
					SetAttributeValue("mailboxpermanentissueminrange", value);
				OnPropertyChanged("LowerThresholdForMailboxPermanentIssue");
			}
		}

        /// <summary>
        /// [Range(0, 2147483647)] 
		/// 'MaxAppointmentDurationDays'.<br />
        /// Maximum number of days an appointment can last.
        /// </summary>
		[AttributeLogicalName("maxappointmentdurationdays"), InRange("0", "2147483647", typeof(int))]
		public int? MaxAppointmentDuration
		{
			get
			{
				var value = GetAttributeValue<int?>("maxappointmentdurationdays");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("maxappointmentdurationdays"))
				    value = (int?) backupAttributeCollection["maxappointmentdurationdays"];
			    return value;
			}
			set
			{
				OnPropertyChanging("MaxAppointmentDuration");
					SetAttributeValue("maxappointmentdurationdays", value);
				OnPropertyChanged("MaxAppointmentDuration");
			}
		}

        /// <summary>
        /// [Range(0, 2147483647)] 
		/// 'MaxConditionsForMobileOfflineFilters'.<br />
        /// Maximum number of conditions allowed for mobile offline filters
        /// </summary>
		[AttributeLogicalName("maxconditionsformobileofflinefilters"), InRange("0", "2147483647", typeof(int))]
		public int? Maximumnumberofconditionsallowedformobileofflinefilters
		{
			get
			{
				var value = GetAttributeValue<int?>("maxconditionsformobileofflinefilters");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("maxconditionsformobileofflinefilters"))
				    value = (int?) backupAttributeCollection["maxconditionsformobileofflinefilters"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Maximumnumberofconditionsallowedformobileofflinefilters");
					SetAttributeValue("maxconditionsformobileofflinefilters", value);
				OnPropertyChanged("Maximumnumberofconditionsallowedformobileofflinefilters");
			}
		}

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'MaxDepthForHierarchicalSecurityModel'.<br />
        /// Maximum depth for hierarchy security propagation.
        /// </summary>
		[AttributeLogicalName("maxdepthforhierarchicalsecuritymodel"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? Maximumdepthforhierarchysecuritypropagation
		{
			get
			{
				var value = GetAttributeValue<int?>("maxdepthforhierarchicalsecuritymodel");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("maxdepthforhierarchicalsecuritymodel"))
				    value = (int?) backupAttributeCollection["maxdepthforhierarchicalsecuritymodel"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Maximumdepthforhierarchysecuritypropagation");
					SetAttributeValue("maxdepthforhierarchicalsecuritymodel", value);
				OnPropertyChanged("Maximumdepthforhierarchysecuritypropagation");
			}
		}

        /// <summary>
        /// [Range(1, 25)] 
		/// 'MaxFolderBasedTrackingMappings'.<br />
        /// Maximum number of Folder Based Tracking mappings user can add
        /// </summary>
		[AttributeLogicalName("maxfolderbasedtrackingmappings"), InRange("1", "25", typeof(int))]
		public int? MaxFolderBasedTrackingMappings
		{
			get
			{
				var value = GetAttributeValue<int?>("maxfolderbasedtrackingmappings");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("maxfolderbasedtrackingmappings"))
				    value = (int?) backupAttributeCollection["maxfolderbasedtrackingmappings"];
			    return value;
			}
			set
			{
				OnPropertyChanging("MaxFolderBasedTrackingMappings");
					SetAttributeValue("maxfolderbasedtrackingmappings", value);
				OnPropertyChanged("MaxFolderBasedTrackingMappings");
			}
		}

        /// <summary>
        /// [Range(1, 2147483647)] 
		/// 'MaximumActiveBusinessProcessFlowsAllowedPerEntity'.<br />
        /// Maximum number of active business process flows allowed per entity
        /// </summary>
		[AttributeLogicalName("maximumactivebusinessprocessflowsallowedperentity"), InRange("1", "2147483647", typeof(int))]
		public int? Maximumactivebusinessprocessflowsperentity
		{
			get
			{
				var value = GetAttributeValue<int?>("maximumactivebusinessprocessflowsallowedperentity");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("maximumactivebusinessprocessflowsallowedperentity"))
				    value = (int?) backupAttributeCollection["maximumactivebusinessprocessflowsallowedperentity"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Maximumactivebusinessprocessflowsperentity");
					SetAttributeValue("maximumactivebusinessprocessflowsallowedperentity", value);
				OnPropertyChanged("Maximumactivebusinessprocessflowsperentity");
			}
		}

        /// <summary>
        /// [Range(0, 2147483647)] 
		/// 'MaximumDynamicPropertiesAllowed'.<br />
        /// Restrict the maximum number of product properties for a product family/bundle
        /// </summary>
		[AttributeLogicalName("maximumdynamicpropertiesallowed"), InRange("0", "2147483647", typeof(int))]
		public int? ProductPropertiesItemLimit
		{
			get
			{
				var value = GetAttributeValue<int?>("maximumdynamicpropertiesallowed");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("maximumdynamicpropertiesallowed"))
				    value = (int?) backupAttributeCollection["maximumdynamicpropertiesallowed"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ProductPropertiesItemLimit");
					SetAttributeValue("maximumdynamicpropertiesallowed", value);
				OnPropertyChanged("ProductPropertiesItemLimit");
			}
		}

        /// <summary>
        /// [Range(0, 2147483647)] 
		/// 'MaximumEntitiesWithActiveSLA'.<br />
        /// Maximum number of active SLA allowed per entity in online
        /// </summary>
		[AttributeLogicalName("maximumentitieswithactivesla"), InRange("0", "2147483647", typeof(int))]
		public int? MaximumnumberofactiveSLAallowedperentityinonline
		{
			get
			{
				var value = GetAttributeValue<int?>("maximumentitieswithactivesla");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("maximumentitieswithactivesla"))
				    value = (int?) backupAttributeCollection["maximumentitieswithactivesla"];
			    return value;
			}
			set
			{
				OnPropertyChanging("MaximumnumberofactiveSLAallowedperentityinonline");
					SetAttributeValue("maximumentitieswithactivesla", value);
				OnPropertyChanged("MaximumnumberofactiveSLAallowedperentityinonline");
			}
		}

        /// <summary>
        /// [Range(0, 2147483647)] 
		/// 'MaximumSLAKPIPerEntityWithActiveSLA'.<br />
        /// Maximum number of SLA KPI per active SLA allowed for entity in online
        /// </summary>
		[AttributeLogicalName("maximumslakpiperentitywithactivesla"), InRange("0", "2147483647", typeof(int))]
		public int? MaximumnumberofactiveSLAKPIallowedperentityinonline
		{
			get
			{
				var value = GetAttributeValue<int?>("maximumslakpiperentitywithactivesla");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("maximumslakpiperentitywithactivesla"))
				    value = (int?) backupAttributeCollection["maximumslakpiperentitywithactivesla"];
			    return value;
			}
			set
			{
				OnPropertyChanging("MaximumnumberofactiveSLAKPIallowedperentityinonline");
					SetAttributeValue("maximumslakpiperentitywithactivesla", value);
				OnPropertyChanged("MaximumnumberofactiveSLAKPIallowedperentityinonline");
			}
		}

        /// <summary>
        /// [Range(0, 2147483647)] 
		/// 'MaximumTrackingNumber'.<br />
        /// Maximum tracking number before recycling takes place.
        /// </summary>
		[AttributeLogicalName("maximumtrackingnumber"), InRange("0", "2147483647", typeof(int))]
		public int? MaxTrackingNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("maximumtrackingnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("maximumtrackingnumber"))
				    value = (int?) backupAttributeCollection["maximumtrackingnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("MaxTrackingNumber");
					SetAttributeValue("maximumtrackingnumber", value);
				OnPropertyChanged("MaxTrackingNumber");
			}
		}

        /// <summary>
        /// [Range(0, 2147483647)] 
		/// 'MaxProductsInBundle'.<br />
        /// Restrict the maximum no of items in a bundle
        /// </summary>
		[AttributeLogicalName("maxproductsinbundle"), InRange("0", "2147483647", typeof(int))]
		public int? BundleItemLimit
		{
			get
			{
				var value = GetAttributeValue<int?>("maxproductsinbundle");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("maxproductsinbundle"))
				    value = (int?) backupAttributeCollection["maxproductsinbundle"];
			    return value;
			}
			set
			{
				OnPropertyChanging("BundleItemLimit");
					SetAttributeValue("maxproductsinbundle", value);
				OnPropertyChanged("BundleItemLimit");
			}
		}

        /// <summary>
        /// [Range(0, 2147483647)] 
		/// 'MaxRecordsForExportToExcel'.<br />
        /// Maximum number of records that will be exported to a static Microsoft Office Excel worksheet when exporting from the grid.
        /// </summary>
		[AttributeLogicalName("maxrecordsforexporttoexcel"), InRange("0", "2147483647", typeof(int))]
		public int? MaxRecordsForExcelExport
		{
			get
			{
				var value = GetAttributeValue<int?>("maxrecordsforexporttoexcel");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("maxrecordsforexporttoexcel"))
				    value = (int?) backupAttributeCollection["maxrecordsforexporttoexcel"];
			    return value;
			}
			set
			{
				OnPropertyChanging("MaxRecordsForExcelExport");
					SetAttributeValue("maxrecordsforexporttoexcel", value);
				OnPropertyChanged("MaxRecordsForExcelExport");
			}
		}

        /// <summary>
        /// [Range(0, 2147483647)] 
		/// 'MaxRecordsForLookupFilters'.<br />
        /// Maximum number of lookup and picklist records that can be selected by user for filtering.
        /// </summary>
		[AttributeLogicalName("maxrecordsforlookupfilters"), InRange("0", "2147483647", typeof(int))]
		public int? MaxRecordsFilterSelection
		{
			get
			{
				var value = GetAttributeValue<int?>("maxrecordsforlookupfilters");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("maxrecordsforlookupfilters"))
				    value = (int?) backupAttributeCollection["maxrecordsforlookupfilters"];
			    return value;
			}
			set
			{
				OnPropertyChanging("MaxRecordsFilterSelection");
					SetAttributeValue("maxrecordsforlookupfilters", value);
				OnPropertyChanged("MaxRecordsFilterSelection");
			}
		}

        /// <summary>
        /// [Range(0, 2147483647)] 
		/// 'MaxSupportedInternetExplorerVersion'.<br />
        /// The maximum version of IE to run browser emulation for in Outlook client
        /// </summary>
		[AttributeLogicalName("maxsupportedinternetexplorerversion"), InRange("0", "2147483647", typeof(int))]
		public int? MaxsupportedIEversion
		{
			get
			{
				var value = GetAttributeValue<int?>("maxsupportedinternetexplorerversion");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("maxsupportedinternetexplorerversion"))
				    value = (int?) backupAttributeCollection["maxsupportedinternetexplorerversion"];
			    return value;
			}
			set
			{
				OnPropertyChanging("MaxsupportedIEversion");
					SetAttributeValue("maxsupportedinternetexplorerversion", value);
				OnPropertyChanged("MaxsupportedIEversion");
			}
		}

        /// <summary>
        /// [Range(0, 2147483647)] 
		/// 'MaxUploadFileSize'.<br />
        /// Maximum allowed size of an attachment.
        /// </summary>
		[AttributeLogicalName("maxuploadfilesize"), InRange("0", "2147483647", typeof(int))]
		public int? MaxUploadFileSize
		{
			get
			{
				var value = GetAttributeValue<int?>("maxuploadfilesize");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("maxuploadfilesize"))
				    value = (int?) backupAttributeCollection["maxuploadfilesize"];
			    return value;
			}
			set
			{
				OnPropertyChanging("MaxUploadFileSize");
					SetAttributeValue("maxuploadfilesize", value);
				OnPropertyChanged("MaxUploadFileSize");
			}
		}

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'MaxVerboseLoggingMailbox'.<br />
        /// Maximum number of mailboxes that can be toggled for verbose logging
        /// </summary>
		[AttributeLogicalName("maxverboseloggingmailbox"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? MaxNoOfMailboxesToEnableForVerboseLogging
		{
			get
			{
				var value = GetAttributeValue<int?>("maxverboseloggingmailbox");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("maxverboseloggingmailbox"))
				    value = (int?) backupAttributeCollection["maxverboseloggingmailbox"];
			    return value;
			}
			set
			{
				OnPropertyChanging("MaxNoOfMailboxesToEnableForVerboseLogging");
					SetAttributeValue("maxverboseloggingmailbox", value);
				OnPropertyChanged("MaxNoOfMailboxesToEnableForVerboseLogging");
			}
		}

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'MaxVerboseLoggingSyncCycles'.<br />
        /// Maximum number of sync cycles for which verbose logging will be enabled by default
        /// </summary>
		[AttributeLogicalName("maxverboseloggingsynccycles"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? Maximumnumberofsynccyclesforwhichverboseloggingwillbeenabledbydefault
		{
			get
			{
				var value = GetAttributeValue<int?>("maxverboseloggingsynccycles");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("maxverboseloggingsynccycles"))
				    value = (int?) backupAttributeCollection["maxverboseloggingsynccycles"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Maximumnumberofsynccyclesforwhichverboseloggingwillbeenabledbydefault");
					SetAttributeValue("maxverboseloggingsynccycles", value);
				OnPropertyChanged("Maximumnumberofsynccyclesforwhichverboseloggingwillbeenabledbydefault");
			}
		}

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'MinAddressBookSyncInterval'.<br />
        /// Normal polling frequency used for address book synchronization in Microsoft Office Outlook.
        /// </summary>
		[AttributeLogicalName("minaddressbooksyncinterval"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? MinAddressSynchronizationFrequency
		{
			get
			{
				var value = GetAttributeValue<int?>("minaddressbooksyncinterval");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("minaddressbooksyncinterval"))
				    value = (int?) backupAttributeCollection["minaddressbooksyncinterval"];
			    return value;
			}
			set
			{
				OnPropertyChanging("MinAddressSynchronizationFrequency");
					SetAttributeValue("minaddressbooksyncinterval", value);
				OnPropertyChanged("MinAddressSynchronizationFrequency");
			}
		}

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'MinOfflineSyncInterval'.<br />
        /// Normal polling frequency used for background offline synchronization in Microsoft Office Outlook.
        /// </summary>
		[AttributeLogicalName("minofflinesyncinterval"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? MinOfflineSynchronizationFrequency
		{
			get
			{
				var value = GetAttributeValue<int?>("minofflinesyncinterval");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("minofflinesyncinterval"))
				    value = (int?) backupAttributeCollection["minofflinesyncinterval"];
			    return value;
			}
			set
			{
				OnPropertyChanging("MinOfflineSynchronizationFrequency");
					SetAttributeValue("minofflinesyncinterval", value);
				OnPropertyChanged("MinOfflineSynchronizationFrequency");
			}
		}

        /// <summary>
        /// [Range(0, 2147483647)] 
		/// 'MinOutlookSyncInterval'.<br />
        /// Minimum allowed time between scheduled Outlook synchronizations.
        /// </summary>
		[AttributeLogicalName("minoutlooksyncinterval"), InRange("0", "2147483647", typeof(int))]
		public int? MinSynchronizationFrequency
		{
			get
			{
				var value = GetAttributeValue<int?>("minoutlooksyncinterval");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("minoutlooksyncinterval"))
				    value = (int?) backupAttributeCollection["minoutlooksyncinterval"];
			    return value;
			}
			set
			{
				OnPropertyChanging("MinSynchronizationFrequency");
					SetAttributeValue("minoutlooksyncinterval", value);
				OnPropertyChanged("MinSynchronizationFrequency");
			}
		}

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'MobileOfflineMinLicenseProd'.<br />
        /// Minimum number of user license required for mobile offline service by production/preview organization
        /// </summary>
		[AttributeLogicalName("mobileofflineminlicenseprod"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? Minimumnumberofuserlicenserequiredformobileofflineservicebyproductionprevieworganization
		{
			get
			{
				var value = GetAttributeValue<int?>("mobileofflineminlicenseprod");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("mobileofflineminlicenseprod"))
				    value = (int?) backupAttributeCollection["mobileofflineminlicenseprod"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Minimumnumberofuserlicenserequiredformobileofflineservicebyproductionprevieworganization");
					SetAttributeValue("mobileofflineminlicenseprod", value);
				OnPropertyChanged("Minimumnumberofuserlicenserequiredformobileofflineservicebyproductionprevieworganization");
			}
		}

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'MobileOfflineMinLicenseTrial'.<br />
        /// Minimum number of user license required for mobile offline service by trial organization
        /// </summary>
		[AttributeLogicalName("mobileofflineminlicensetrial"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? Minimumnumberofuserlicenserequiredformobileofflineservicebytrialorganization
		{
			get
			{
				var value = GetAttributeValue<int?>("mobileofflineminlicensetrial");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("mobileofflineminlicensetrial"))
				    value = (int?) backupAttributeCollection["mobileofflineminlicensetrial"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Minimumnumberofuserlicenserequiredformobileofflineservicebytrialorganization");
					SetAttributeValue("mobileofflineminlicensetrial", value);
				OnPropertyChanged("Minimumnumberofuserlicenserequiredformobileofflineservicebytrialorganization");
			}
		}

        /// <summary>
        /// [Range(0, 2147483647)] 
		/// 'MobileOfflineSyncInterval'.<br />
        /// Sync interval for mobile offline.
        /// </summary>
		[AttributeLogicalName("mobileofflinesyncinterval"), InRange("0", "2147483647", typeof(int))]
		public int? Syncintervalformobileoffline
		{
			get
			{
				var value = GetAttributeValue<int?>("mobileofflinesyncinterval");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("mobileofflinesyncinterval"))
				    value = (int?) backupAttributeCollection["mobileofflinesyncinterval"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Syncintervalformobileoffline");
					SetAttributeValue("mobileofflinesyncinterval", value);
				OnPropertyChanged("Syncintervalformobileoffline");
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedBy'.<br />
        /// Unique identifier of the user who last modified the organization.
        /// </summary>
		[AttributeLogicalName("modifiedby")]
		public Guid? ModifiedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedby"))
				    value = (EntityReference) backupAttributeCollection["modifiedby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ModifiedBy");
                if (value != null)
				    SetAttributeValue("modifiedby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("modifiedby", value);
				OnPropertyChanged("ModifiedBy");
			}
		}

        public string ModifiedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedby"))
				    value = (EntityReference) backupAttributeCollection["modifiedby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'ModifiedOn'.<br />
        /// Date and time when the organization was last modified.
        /// </summary>
		[AttributeLogicalName("modifiedon")]
		public DateTime? ModifiedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("modifiedon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedon"))
				    value = (DateTime?) backupAttributeCollection["modifiedon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ModifiedOn");
					SetAttributeValue("modifiedon", value);
				OnPropertyChanged("ModifiedOn");
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who last modified the organization.
        /// </summary>
		[AttributeLogicalName("modifiedonbehalfby")]
		public Guid? ModifiedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["modifiedonbehalfby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ModifiedByDelegate");
                if (value != null)
				    SetAttributeValue("modifiedonbehalfby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("modifiedonbehalfby", value);
				OnPropertyChanged("ModifiedByDelegate");
			}
		}

        public string ModifiedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["modifiedonbehalfby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        /// [MaximumLength=160] 
		/// 'Name'.<br />
        /// Name of the organization. The name is set when Microsoft CRM is installed and should not be changed.
        /// </summary>
		[AttributeLogicalName("name"), MaxLength(160)]
		public string OrganizationName
		{
			get
			{
				var value = GetAttributeValue<string>("name");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("name"))
				    value = (string) backupAttributeCollection["name"];
			    return value;
			}
			set
			{
				OnPropertyChanging("OrganizationName");
					SetAttributeValue("name", value);
				OnPropertyChanged("OrganizationName");
			}
		}

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'NegativeCurrencyFormatCode'.<br />
        /// Information that specifies how negative currency numbers are displayed throughout Microsoft Dynamics 365.
        /// </summary>
		[AttributeLogicalName("negativecurrencyformatcode"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? NegativeCurrencyFormat
		{
			get
			{
				var value = GetAttributeValue<int?>("negativecurrencyformatcode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("negativecurrencyformatcode"))
				    value = (int?) backupAttributeCollection["negativecurrencyformatcode"];
			    return value;
			}
			set
			{
				OnPropertyChanging("NegativeCurrencyFormat");
					SetAttributeValue("negativecurrencyformatcode", value);
				OnPropertyChanged("NegativeCurrencyFormat");
			}
		}

        /// <summary>
        ///  
		/// 'NegativeFormatCode'.<br />
        /// Information that specifies how negative numbers are displayed throughout Microsoft CRM.
        /// </summary>
		[AttributeLogicalName("negativeformatcode")]
		public NegativeFormatEnum? NegativeFormat
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("negativeformatcode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("negativeformatcode"))
				    value = (OptionSetValue) backupAttributeCollection["negativeformatcode"];
                return value == null ? (NegativeFormatEnum?) null : (NegativeFormatEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("NegativeFormat");
                if (value != null)
				    SetAttributeValue("negativeformatcode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("negativeformatcode", value);
				OnPropertyChanged("NegativeFormat");
			}
		}

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'NextTrackingNumber'.<br />
        /// Next token to be placed on the subject line of an email message.
        /// </summary>
		[AttributeLogicalName("nexttrackingnumber"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? NextTrackingNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("nexttrackingnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("nexttrackingnumber"))
				    value = (int?) backupAttributeCollection["nexttrackingnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("NextTrackingNumber");
					SetAttributeValue("nexttrackingnumber", value);
				OnPropertyChanged("NextTrackingNumber");
			}
		}

        /// <summary>
        ///  
		/// 'NotifyMailboxOwnerOfEmailServerLevelAlerts'.<br />
        /// Indicates whether mailbox owners will be notified of email server profile level alerts.
        /// </summary>
		[AttributeLogicalName("notifymailboxownerofemailserverlevelalerts")]
		public bool? NotifyMailboxOwnerOfEmailServerLevelAlerts
		{
			get
			{
				var value = GetAttributeValue<bool?>("notifymailboxownerofemailserverlevelalerts");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("notifymailboxownerofemailserverlevelalerts"))
				    value = (bool?) backupAttributeCollection["notifymailboxownerofemailserverlevelalerts"];
			    return value;
			}
			set
			{
				OnPropertyChanging("NotifyMailboxOwnerOfEmailServerLevelAlerts");
					SetAttributeValue("notifymailboxownerofemailserverlevelalerts", value);
				OnPropertyChanged("NotifyMailboxOwnerOfEmailServerLevelAlerts");
			}
		}

        /// <summary>
        /// [MaximumLength=2] 
		/// 'NumberFormat'.<br />
        /// Specification of how numbers are displayed throughout Microsoft CRM.
        /// </summary>
		[AttributeLogicalName("numberformat"), MaxLength(2)]
		public string NumberFormat
		{
			get
			{
				var value = GetAttributeValue<string>("numberformat");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("numberformat"))
				    value = (string) backupAttributeCollection["numberformat"];
			    return value;
			}
			set
			{
				OnPropertyChanging("NumberFormat");
					SetAttributeValue("numberformat", value);
				OnPropertyChanged("NumberFormat");
			}
		}

        /// <summary>
        /// [MaximumLength=50] 
		/// 'NumberGroupFormat'.<br />
        /// Specifies how numbers are grouped in Microsoft Dynamics 365.
        /// </summary>
		[AttributeLogicalName("numbergroupformat"), MaxLength(50)]
		public string NumberGroupingFormat
		{
			get
			{
				var value = GetAttributeValue<string>("numbergroupformat");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("numbergroupformat"))
				    value = (string) backupAttributeCollection["numbergroupformat"];
			    return value;
			}
			set
			{
				OnPropertyChanging("NumberGroupingFormat");
					SetAttributeValue("numbergroupformat", value);
				OnPropertyChanged("NumberGroupingFormat");
			}
		}

        /// <summary>
        /// [MaximumLength=5] 
		/// 'NumberSeparator'.<br />
        /// Symbol used for number separation in Microsoft Dynamics 365.
        /// </summary>
		[AttributeLogicalName("numberseparator"), MaxLength(5)]
		public string NumberSeparator
		{
			get
			{
				var value = GetAttributeValue<string>("numberseparator");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("numberseparator"))
				    value = (string) backupAttributeCollection["numberseparator"];
			    return value;
			}
			set
			{
				OnPropertyChanging("NumberSeparator");
					SetAttributeValue("numberseparator", value);
				OnPropertyChanged("NumberSeparator");
			}
		}

        /// <summary>
        ///  
		/// 'OfficeAppsAutoDeploymentEnabled'.<br />
        /// Indicates whether the Office Apps auto deployment is enabled for the organization.
        /// </summary>
		[AttributeLogicalName("officeappsautodeploymentenabled")]
		public bool? EnableOfficeAppsAutoDeploymentforthisOrganization
		{
			get
			{
				var value = GetAttributeValue<bool?>("officeappsautodeploymentenabled");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("officeappsautodeploymentenabled"))
				    value = (bool?) backupAttributeCollection["officeappsautodeploymentenabled"];
			    return value;
			}
			set
			{
				OnPropertyChanging("EnableOfficeAppsAutoDeploymentforthisOrganization");
					SetAttributeValue("officeappsautodeploymentenabled", value);
				OnPropertyChanged("EnableOfficeAppsAutoDeploymentforthisOrganization");
			}
		}

        /// <summary>
        /// [MaximumLength=1000] 
		/// 'OfficeGraphDelveUrl'.<br />
        /// The url to open the Delve for the organization.
        /// </summary>
		[AttributeLogicalName("officegraphdelveurl"), MaxLength(1000)]
		public string TheurltoopentheDelve
		{
			get
			{
				var value = GetAttributeValue<string>("officegraphdelveurl");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("officegraphdelveurl"))
				    value = (string) backupAttributeCollection["officegraphdelveurl"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TheurltoopentheDelve");
					SetAttributeValue("officegraphdelveurl", value);
				OnPropertyChanged("TheurltoopentheDelve");
			}
		}

        /// <summary>
        ///  
		/// 'OOBPriceCalculationEnabled'.<br />
        /// Enable OOB pricing calculation logic for Opportunity, Quote, Order and Invoice entities.
        /// </summary>
		[AttributeLogicalName("oobpricecalculationenabled")]
		public bool? EnableOOBPricecalculation
		{
			get
			{
				var value = GetAttributeValue<bool?>("oobpricecalculationenabled");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("oobpricecalculationenabled"))
				    value = (bool?) backupAttributeCollection["oobpricecalculationenabled"];
			    return value;
			}
			set
			{
				OnPropertyChanging("EnableOOBPricecalculation");
					SetAttributeValue("oobpricecalculationenabled", value);
				OnPropertyChanged("EnableOOBPricecalculation");
			}
		}

        /// <summary>
        /// [MaximumLength=20] 
		/// 'OrderPrefix'.<br />
        /// Prefix to use for all orders throughout Microsoft Dynamics 365.
        /// </summary>
		[AttributeLogicalName("orderprefix"), MaxLength(20)]
		public string OrderPrefix
		{
			get
			{
				var value = GetAttributeValue<string>("orderprefix");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("orderprefix"))
				    value = (string) backupAttributeCollection["orderprefix"];
			    return value;
			}
			set
			{
				OnPropertyChanging("OrderPrefix");
					SetAttributeValue("orderprefix", value);
				OnPropertyChanged("OrderPrefix");
			}
		}

        /// <summary>
        ///  
		/// 'OrganizationId'.<br />
        /// Unique identifier of the organization.
        /// </summary>
		[AttributeLogicalName("organizationid")]
		public Guid? OrganizationId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("organizationid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("organizationid"))
				    value = (Guid?) backupAttributeCollection["organizationid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("OrganizationId");
                if (value != null)
					SetAttributeValue("organizationid", value);
				if (value != null)
					base.Id = value.Value;
				else
					Id = System.Guid.Empty;
				OnPropertyChanged("OrganizationId");
			}
		}

        /// <summary>
        /// [MaximumLength=1073741823] 
		/// 'OrgDbOrgSettings'.<br />
        /// Organization settings stored in Organization Database.
        /// </summary>
		[AttributeLogicalName("orgdborgsettings"), MaxLength(1073741823)]
		public string OrganizationDatabaseOrganizationSettings
		{
			get
			{
				var value = GetAttributeValue<string>("orgdborgsettings");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("orgdborgsettings"))
				    value = (string) backupAttributeCollection["orgdborgsettings"];
			    return value;
			}
			set
			{
				OnPropertyChanging("OrganizationDatabaseOrganizationSettings");
					SetAttributeValue("orgdborgsettings", value);
				OnPropertyChanged("OrganizationDatabaseOrganizationSettings");
			}
		}

        /// <summary>
        ///  
		/// 'OrgInsightsEnabled'.<br />
        /// Select whether to turn on OrgInsights for the organization.
        /// </summary>
		[AttributeLogicalName("orginsightsenabled")]
		public bool? EnableOrgInsightsforthisOrganization
		{
			get
			{
				var value = GetAttributeValue<bool?>("orginsightsenabled");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("orginsightsenabled"))
				    value = (bool?) backupAttributeCollection["orginsightsenabled"];
			    return value;
			}
			set
			{
				OnPropertyChanging("EnableOrgInsightsforthisOrganization");
					SetAttributeValue("orginsightsenabled", value);
				OnPropertyChanged("EnableOrgInsightsforthisOrganization");
			}
		}

        /// <summary>
        /// [MaximumLength=20] 
		/// 'ParsedTableColumnPrefix'.<br />
        /// Prefix used for parsed table columns.
        /// </summary>
		[AttributeLogicalName("parsedtablecolumnprefix"), MaxLength(20)]
		public string ParsedTableColumnPrefix
		{
			get
			{
				var value = GetAttributeValue<string>("parsedtablecolumnprefix");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("parsedtablecolumnprefix"))
				    value = (string) backupAttributeCollection["parsedtablecolumnprefix"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ParsedTableColumnPrefix");
					SetAttributeValue("parsedtablecolumnprefix", value);
				OnPropertyChanged("ParsedTableColumnPrefix");
			}
		}

        /// <summary>
        /// [MaximumLength=20] 
		/// 'ParsedTablePrefix'.<br />
        /// Prefix used for parsed tables.
        /// </summary>
		[AttributeLogicalName("parsedtableprefix"), MaxLength(20)]
		public string ParsedTablePrefix
		{
			get
			{
				var value = GetAttributeValue<string>("parsedtableprefix");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("parsedtableprefix"))
				    value = (string) backupAttributeCollection["parsedtableprefix"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ParsedTablePrefix");
					SetAttributeValue("parsedtableprefix", value);
				OnPropertyChanged("ParsedTablePrefix");
			}
		}

        /// <summary>
        /// [Range(1, 120)] 
		/// 'PastExpansionWindow'.<br />
        /// Specifies the maximum number of months in past for which the recurring activities can be created.
        /// </summary>
		[AttributeLogicalName("pastexpansionwindow"), InRange("1", "120", typeof(int))]
		public int? PastExpansionWindow
		{
			get
			{
				var value = GetAttributeValue<int?>("pastexpansionwindow");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("pastexpansionwindow"))
				    value = (int?) backupAttributeCollection["pastexpansionwindow"];
			    return value;
			}
			set
			{
				OnPropertyChanging("PastExpansionWindow");
					SetAttributeValue("pastexpansionwindow", value);
				OnPropertyChanged("PastExpansionWindow");
			}
		}

        /// <summary>
        /// [MaximumLength=1073741823] 
		/// 'Picture'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("picture"), MaxLength(1073741823)]
		public string Picture
		{
			get
			{
				var value = GetAttributeValue<string>("picture");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("picture"))
				    value = (string) backupAttributeCollection["picture"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Picture");
					SetAttributeValue("picture", value);
				OnPropertyChanged("Picture");
			}
		}

		[AttributeLogicalName("pinpointlanguagecode"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? PinpointLanguageCode
		{
			get
			{
				var value = GetAttributeValue<int?>("pinpointlanguagecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("pinpointlanguagecode"))
				    value = (int?) backupAttributeCollection["pinpointlanguagecode"];
			    return value;
			}
			set
			{
				OnPropertyChanging("PinpointLanguageCode");
					SetAttributeValue("pinpointlanguagecode", value);
				OnPropertyChanged("PinpointLanguageCode");
			}
		}

        /// <summary>
        ///  
		/// 'PluginTraceLogSetting'.<br />
        /// Plug-in Trace Log Setting for the Organization.
        /// </summary>
		[AttributeLogicalName("plugintracelogsetting")]
		public PluginTraceLogSettingEnum? PluginTraceLogSetting
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("plugintracelogsetting");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("plugintracelogsetting"))
				    value = (OptionSetValue) backupAttributeCollection["plugintracelogsetting"];
                return value == null ? (PluginTraceLogSettingEnum?) null : (PluginTraceLogSettingEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("PluginTraceLogSetting");
                if (value != null)
				    SetAttributeValue("plugintracelogsetting", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("plugintracelogsetting", value);
				OnPropertyChanged("PluginTraceLogSetting");
			}
		}

        /// <summary>
        /// [MaximumLength=25] 
		/// 'PMDesignator'.<br />
        /// PM designator to use throughout Microsoft Dynamics 365.
        /// </summary>
		[AttributeLogicalName("pmdesignator"), MaxLength(25)]
		public string PMDesignator
		{
			get
			{
				var value = GetAttributeValue<string>("pmdesignator");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("pmdesignator"))
				    value = (string) backupAttributeCollection["pmdesignator"];
			    return value;
			}
			set
			{
				OnPropertyChanging("PMDesignator");
					SetAttributeValue("pmdesignator", value);
				OnPropertyChanged("PMDesignator");
			}
		}

        /// <summary>
        /// [MaximumLength=500] 
		/// 'PostMessageWhitelistDomains'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("postmessagewhitelistdomains"), MaxLength(500)]
		public string Forinternaluseonly_PostMessageWhitelistDomains
		{
			get
			{
				var value = GetAttributeValue<string>("postmessagewhitelistdomains");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("postmessagewhitelistdomains"))
				    value = (string) backupAttributeCollection["postmessagewhitelistdomains"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Forinternaluseonly_PostMessageWhitelistDomains");
					SetAttributeValue("postmessagewhitelistdomains", value);
				OnPropertyChanged("Forinternaluseonly_PostMessageWhitelistDomains");
			}
		}

        /// <summary>
        ///  
		/// 'PowerBiFeatureEnabled'.<br />
        /// Indicates whether the Power BI feature should be enabled for the organization.
        /// </summary>
		[AttributeLogicalName("powerbifeatureenabled")]
		public bool? EnablePowerBIfeatureforthisOrganization
		{
			get
			{
				var value = GetAttributeValue<bool?>("powerbifeatureenabled");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("powerbifeatureenabled"))
				    value = (bool?) backupAttributeCollection["powerbifeatureenabled"];
			    return value;
			}
			set
			{
				OnPropertyChanging("EnablePowerBIfeatureforthisOrganization");
					SetAttributeValue("powerbifeatureenabled", value);
				OnPropertyChanged("EnablePowerBIfeatureforthisOrganization");
			}
		}

        /// <summary>
        /// [Range(0, 4)] 
		/// 'PricingDecimalPrecision'.<br />
        /// Number of decimal places that can be used for prices.
        /// </summary>
		[AttributeLogicalName("pricingdecimalprecision"), InRange("0", "4", typeof(int))]
		public int? PricingDecimalPrecision
		{
			get
			{
				var value = GetAttributeValue<int?>("pricingdecimalprecision");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("pricingdecimalprecision"))
				    value = (int?) backupAttributeCollection["pricingdecimalprecision"];
			    return value;
			}
			set
			{
				OnPropertyChanging("PricingDecimalPrecision");
					SetAttributeValue("pricingdecimalprecision", value);
				OnPropertyChanged("PricingDecimalPrecision");
			}
		}

        /// <summary>
        /// [MaximumLength=500] 
		/// 'PrivacyStatementUrl'.<br />
        /// Privacy Statement URL
        /// </summary>
		[AttributeLogicalName("privacystatementurl"), MaxLength(500)]
		public string PrivacyStatementURL
		{
			get
			{
				var value = GetAttributeValue<string>("privacystatementurl");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("privacystatementurl"))
				    value = (string) backupAttributeCollection["privacystatementurl"];
			    return value;
			}
			set
			{
				OnPropertyChanging("PrivacyStatementURL");
					SetAttributeValue("privacystatementurl", value);
				OnPropertyChanged("PrivacyStatementURL");
			}
		}

        /// <summary>
        ///  
		/// 'PrivilegeUserGroupId'.<br />
        /// Unique identifier of the default privilege for users in the organization.
        /// </summary>
		[AttributeLogicalName("privilegeusergroupid")]
		public Guid? PrivilegeUserGroup
		{
			get
			{
				var value = GetAttributeValue<Guid?>("privilegeusergroupid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("privilegeusergroupid"))
				    value = (Guid?) backupAttributeCollection["privilegeusergroupid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("PrivilegeUserGroup");
					SetAttributeValue("privilegeusergroupid", value);
				OnPropertyChanged("PrivilegeUserGroup");
			}
		}

        /// <summary>
        ///  
		/// 'PrivReportingGroupId'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("privreportinggroupid")]
		public Guid? PrivilegeReportingGroup
		{
			get
			{
				var value = GetAttributeValue<Guid?>("privreportinggroupid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("privreportinggroupid"))
				    value = (Guid?) backupAttributeCollection["privreportinggroupid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("PrivilegeReportingGroup");
					SetAttributeValue("privreportinggroupid", value);
				OnPropertyChanged("PrivilegeReportingGroup");
			}
		}

        /// <summary>
        /// [MaximumLength=256] 
		/// 'PrivReportingGroupName'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("privreportinggroupname"), MaxLength(256)]
		public string PrivilegeReportingGroupName
		{
			get
			{
				var value = GetAttributeValue<string>("privreportinggroupname");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("privreportinggroupname"))
				    value = (string) backupAttributeCollection["privreportinggroupname"];
			    return value;
			}
			set
			{
				OnPropertyChanging("PrivilegeReportingGroupName");
					SetAttributeValue("privreportinggroupname", value);
				OnPropertyChanged("PrivilegeReportingGroupName");
			}
		}

        /// <summary>
        ///  
		/// 'ProductRecommendationsEnabled'.<br />
        /// Select whether to turn on product recommendations for the organization.
        /// </summary>
		[AttributeLogicalName("productrecommendationsenabled")]
		public bool? EnableProductRecommendationsforthisOrganization
		{
			get
			{
				var value = GetAttributeValue<bool?>("productrecommendationsenabled");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("productrecommendationsenabled"))
				    value = (bool?) backupAttributeCollection["productrecommendationsenabled"];
			    return value;
			}
			set
			{
				OnPropertyChanging("EnableProductRecommendationsforthisOrganization");
					SetAttributeValue("productrecommendationsenabled", value);
				OnPropertyChanged("EnableProductRecommendationsforthisOrganization");
			}
		}

        /// <summary>
        ///  
		/// 'QuickFindRecordLimitEnabled'.<br />
        /// Indicates whether a quick find record limit should be enabled for this organization (allows for faster Quick Find queries but prevents overly broad searches).
        /// </summary>
		[AttributeLogicalName("quickfindrecordlimitenabled")]
		public bool? QuickFindRecordLimitEnabled
		{
			get
			{
				var value = GetAttributeValue<bool?>("quickfindrecordlimitenabled");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("quickfindrecordlimitenabled"))
				    value = (bool?) backupAttributeCollection["quickfindrecordlimitenabled"];
			    return value;
			}
			set
			{
				OnPropertyChanging("QuickFindRecordLimitEnabled");
					SetAttributeValue("quickfindrecordlimitenabled", value);
				OnPropertyChanged("QuickFindRecordLimitEnabled");
			}
		}

        /// <summary>
        /// [MaximumLength=20] 
		/// 'QuotePrefix'.<br />
        /// Prefix to use for all quotes throughout Microsoft Dynamics 365.
        /// </summary>
		[AttributeLogicalName("quoteprefix"), MaxLength(20)]
		public string QuotePrefix
		{
			get
			{
				var value = GetAttributeValue<string>("quoteprefix");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("quoteprefix"))
				    value = (string) backupAttributeCollection["quoteprefix"];
			    return value;
			}
			set
			{
				OnPropertyChanging("QuotePrefix");
					SetAttributeValue("quoteprefix", value);
				OnPropertyChanged("QuotePrefix");
			}
		}

        /// <summary>
        /// [Range(1, 999)] 
		/// 'RecurrenceDefaultNumberOfOccurrences'.<br />
        /// Specifies the default value for number of occurrences field in the recurrence dialog.
        /// </summary>
		[AttributeLogicalName("recurrencedefaultnumberofoccurrences"), InRange("1", "999", typeof(int))]
		public int? RecurrenceDefaultNumberofOccurrences
		{
			get
			{
				var value = GetAttributeValue<int?>("recurrencedefaultnumberofoccurrences");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("recurrencedefaultnumberofoccurrences"))
				    value = (int?) backupAttributeCollection["recurrencedefaultnumberofoccurrences"];
			    return value;
			}
			set
			{
				OnPropertyChanging("RecurrenceDefaultNumberofOccurrences");
					SetAttributeValue("recurrencedefaultnumberofoccurrences", value);
				OnPropertyChanged("RecurrenceDefaultNumberofOccurrences");
			}
		}

        /// <summary>
        /// [Range(0, 2147483647)] 
		/// 'RecurrenceExpansionJobBatchInterval'.<br />
        /// Specifies the interval (in seconds) for pausing expansion job.
        /// </summary>
		[AttributeLogicalName("recurrenceexpansionjobbatchinterval"), InRange("0", "2147483647", typeof(int))]
		public int? RecurrenceExpansionJobBatchInterval
		{
			get
			{
				var value = GetAttributeValue<int?>("recurrenceexpansionjobbatchinterval");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("recurrenceexpansionjobbatchinterval"))
				    value = (int?) backupAttributeCollection["recurrenceexpansionjobbatchinterval"];
			    return value;
			}
			set
			{
				OnPropertyChanging("RecurrenceExpansionJobBatchInterval");
					SetAttributeValue("recurrenceexpansionjobbatchinterval", value);
				OnPropertyChanged("RecurrenceExpansionJobBatchInterval");
			}
		}

        /// <summary>
        /// [Range(0, 2147483647)] 
		/// 'RecurrenceExpansionJobBatchSize'.<br />
        /// Specifies the value for number of instances created in on demand job in one shot.
        /// </summary>
		[AttributeLogicalName("recurrenceexpansionjobbatchsize"), InRange("0", "2147483647", typeof(int))]
		public int? RecurrenceExpansionOnDemandJobBatchSize
		{
			get
			{
				var value = GetAttributeValue<int?>("recurrenceexpansionjobbatchsize");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("recurrenceexpansionjobbatchsize"))
				    value = (int?) backupAttributeCollection["recurrenceexpansionjobbatchsize"];
			    return value;
			}
			set
			{
				OnPropertyChanging("RecurrenceExpansionOnDemandJobBatchSize");
					SetAttributeValue("recurrenceexpansionjobbatchsize", value);
				OnPropertyChanged("RecurrenceExpansionOnDemandJobBatchSize");
			}
		}

        /// <summary>
        /// [Range(1, 1000)] 
		/// 'RecurrenceExpansionSynchCreateMax'.<br />
        /// Specifies the maximum number of instances to be created synchronously after creating a recurring appointment.
        /// </summary>
		[AttributeLogicalName("recurrenceexpansionsynchcreatemax"), InRange("1", "1000", typeof(int))]
		public int? RecurrenceExpansionSynchronizationCreateMaximum
		{
			get
			{
				var value = GetAttributeValue<int?>("recurrenceexpansionsynchcreatemax");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("recurrenceexpansionsynchcreatemax"))
				    value = (int?) backupAttributeCollection["recurrenceexpansionsynchcreatemax"];
			    return value;
			}
			set
			{
				OnPropertyChanging("RecurrenceExpansionSynchronizationCreateMaximum");
					SetAttributeValue("recurrenceexpansionsynchcreatemax", value);
				OnPropertyChanged("RecurrenceExpansionSynchronizationCreateMaximum");
			}
		}

        /// <summary>
        /// [MaximumLength=1073741823] 
		/// 'ReferenceSiteMapXml'.<br />
        /// XML string that defines the navigation structure for the application. This is the site map from the previously upgraded build and is used in a 3-way merge during upgrade.
        /// </summary>
		[AttributeLogicalName("referencesitemapxml"), MaxLength(1073741823)]
		[Obsolete]
		public string ReferenceSiteMapXML
		{
			get
			{
				var value = GetAttributeValue<string>("referencesitemapxml");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("referencesitemapxml"))
				    value = (string) backupAttributeCollection["referencesitemapxml"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ReferenceSiteMapXML");
					SetAttributeValue("referencesitemapxml", value);
				OnPropertyChanged("ReferenceSiteMapXML");
			}
		}

        /// <summary>
        ///  
		/// 'RenderSecureIFrameForEmail'.<br />
        /// Flag to render the body of email in the Web form in an IFRAME with the security='restricted' attribute set. This is additional security but can cause a credentials prompt.
        /// </summary>
		[AttributeLogicalName("rendersecureiframeforemail")]
		public bool? RenderSecureFrameForEmail
		{
			get
			{
				var value = GetAttributeValue<bool?>("rendersecureiframeforemail");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("rendersecureiframeforemail"))
				    value = (bool?) backupAttributeCollection["rendersecureiframeforemail"];
			    return value;
			}
			set
			{
				OnPropertyChanging("RenderSecureFrameForEmail");
					SetAttributeValue("rendersecureiframeforemail", value);
				OnPropertyChanged("RenderSecureFrameForEmail");
			}
		}

        /// <summary>
        ///  
		/// 'ReportingGroupId'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("reportinggroupid")]
		public Guid? ReportingGroup
		{
			get
			{
				var value = GetAttributeValue<Guid?>("reportinggroupid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("reportinggroupid"))
				    value = (Guid?) backupAttributeCollection["reportinggroupid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ReportingGroup");
					SetAttributeValue("reportinggroupid", value);
				OnPropertyChanged("ReportingGroup");
			}
		}

        /// <summary>
        /// [MaximumLength=256] 
		/// 'ReportingGroupName'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("reportinggroupname"), MaxLength(256)]
		public string ReportingGroupName
		{
			get
			{
				var value = GetAttributeValue<string>("reportinggroupname");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("reportinggroupname"))
				    value = (string) backupAttributeCollection["reportinggroupname"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ReportingGroupName");
					SetAttributeValue("reportinggroupname", value);
				OnPropertyChanged("ReportingGroupName");
			}
		}

        /// <summary>
        ///  
		/// 'ReportScriptErrors'.<br />
        /// Picklist for selecting the organization preference for reporting scripting errors.
        /// </summary>
		[AttributeLogicalName("reportscripterrors")]
		public ReportScriptErrorsEnum? ReportScriptErrors
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("reportscripterrors");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("reportscripterrors"))
				    value = (OptionSetValue) backupAttributeCollection["reportscripterrors"];
                return value == null ? (ReportScriptErrorsEnum?) null : (ReportScriptErrorsEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("ReportScriptErrors");
                if (value != null)
				    SetAttributeValue("reportscripterrors", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("reportscripterrors", value);
				OnPropertyChanged("ReportScriptErrors");
			}
		}

        /// <summary>
        ///  
		/// 'RequireApprovalForQueueEmail'.<br />
        /// Indicates whether Send As Other User privilege is enabled.
        /// </summary>
		[AttributeLogicalName("requireapprovalforqueueemail")]
		public bool? IsApprovalForQueueEmailRequired
		{
			get
			{
				var value = GetAttributeValue<bool?>("requireapprovalforqueueemail");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("requireapprovalforqueueemail"))
				    value = (bool?) backupAttributeCollection["requireapprovalforqueueemail"];
			    return value;
			}
			set
			{
				OnPropertyChanging("IsApprovalForQueueEmailRequired");
					SetAttributeValue("requireapprovalforqueueemail", value);
				OnPropertyChanged("IsApprovalForQueueEmailRequired");
			}
		}

        /// <summary>
        ///  
		/// 'RequireApprovalForUserEmail'.<br />
        /// Indicates whether Send As Other User privilege is enabled.
        /// </summary>
		[AttributeLogicalName("requireapprovalforuseremail")]
		public bool? IsApprovalForUserEmailRequired
		{
			get
			{
				var value = GetAttributeValue<bool?>("requireapprovalforuseremail");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("requireapprovalforuseremail"))
				    value = (bool?) backupAttributeCollection["requireapprovalforuseremail"];
			    return value;
			}
			set
			{
				OnPropertyChanging("IsApprovalForUserEmailRequired");
					SetAttributeValue("requireapprovalforuseremail", value);
				OnPropertyChanged("IsApprovalForUserEmailRequired");
			}
		}

        /// <summary>
        ///  
		/// 'RestrictStatusUpdate'.<br />
        /// Flag to restrict Update on incident.
        /// </summary>
		[AttributeLogicalName("restrictstatusupdate")]
		public bool? RestrictStatusUpdate
		{
			get
			{
				var value = GetAttributeValue<bool?>("restrictstatusupdate");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("restrictstatusupdate"))
				    value = (bool?) backupAttributeCollection["restrictstatusupdate"];
			    return value;
			}
			set
			{
				OnPropertyChanging("RestrictStatusUpdate");
					SetAttributeValue("restrictstatusupdate", value);
				OnPropertyChanged("RestrictStatusUpdate");
			}
		}

        /// <summary>
        /// [Range(0, 2147483647)] 
		/// 'RiErrorStatus'.<br />
        /// Error status of Relationship Insights provisioning.
        /// </summary>
		[AttributeLogicalName("rierrorstatus"), InRange("0", "2147483647", typeof(int))]
		public int? ErrorstatusofRelationshipInsightsprovisioning
		{
			get
			{
				var value = GetAttributeValue<int?>("rierrorstatus");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("rierrorstatus"))
				    value = (int?) backupAttributeCollection["rierrorstatus"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ErrorstatusofRelationshipInsightsprovisioning");
					SetAttributeValue("rierrorstatus", value);
				OnPropertyChanged("ErrorstatusofRelationshipInsightsprovisioning");
			}
		}

        /// <summary>
        ///  
		/// 'SampleDataImportId'.<br />
        /// Unique identifier of the sample data import job.
        /// </summary>
		[AttributeLogicalName("sampledataimportid")]
		public Guid? SampleDataImport
		{
			get
			{
				var value = GetAttributeValue<Guid?>("sampledataimportid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("sampledataimportid"))
				    value = (Guid?) backupAttributeCollection["sampledataimportid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("SampleDataImport");
					SetAttributeValue("sampledataimportid", value);
				OnPropertyChanged("SampleDataImport");
			}
		}

        /// <summary>
        /// [MaximumLength=8] 
		/// 'SchemaNamePrefix'.<br />
        /// Prefix used for custom entities and attributes.
        /// </summary>
		[AttributeLogicalName("schemanameprefix"), MaxLength(8)]
		public string CustomizationNamePrefix
		{
			get
			{
				var value = GetAttributeValue<string>("schemanameprefix");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("schemanameprefix"))
				    value = (string) backupAttributeCollection["schemanameprefix"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CustomizationNamePrefix");
					SetAttributeValue("schemanameprefix", value);
				OnPropertyChanged("CustomizationNamePrefix");
			}
		}

        /// <summary>
        ///  
		/// 'SharePointDeploymentType'.<br />
        /// Indicates which SharePoint deployment type is configured for Server to Server. (Online or On-Premises)
        /// </summary>
		[AttributeLogicalName("sharepointdeploymenttype")]
		public ChooseSharePointDeploymentTypeEnum? ChooseSharePointDeploymentType
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("sharepointdeploymenttype");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("sharepointdeploymenttype"))
				    value = (OptionSetValue) backupAttributeCollection["sharepointdeploymenttype"];
                return value == null ? (ChooseSharePointDeploymentTypeEnum?) null : (ChooseSharePointDeploymentTypeEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("ChooseSharePointDeploymentType");
                if (value != null)
				    SetAttributeValue("sharepointdeploymenttype", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("sharepointdeploymenttype", value);
				OnPropertyChanged("ChooseSharePointDeploymentType");
			}
		}

        /// <summary>
        ///  
		/// 'ShareToPreviousOwnerOnAssign'.<br />
        /// Information that specifies whether to share to previous owner on assign.
        /// </summary>
		[AttributeLogicalName("sharetopreviousowneronassign")]
		public bool? ShareToPreviousOwnerOnAssign
		{
			get
			{
				var value = GetAttributeValue<bool?>("sharetopreviousowneronassign");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("sharetopreviousowneronassign"))
				    value = (bool?) backupAttributeCollection["sharetopreviousowneronassign"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ShareToPreviousOwnerOnAssign");
					SetAttributeValue("sharetopreviousowneronassign", value);
				OnPropertyChanged("ShareToPreviousOwnerOnAssign");
			}
		}

        /// <summary>
        ///  
		/// 'ShowKBArticleDeprecationNotification'.<br />
        /// Select whether to display a KB article deprecation notification to the user.
        /// </summary>
		[AttributeLogicalName("showkbarticledeprecationnotification")]
		public bool? ShowKBArticledeprecationmessagetouser
		{
			get
			{
				var value = GetAttributeValue<bool?>("showkbarticledeprecationnotification");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("showkbarticledeprecationnotification"))
				    value = (bool?) backupAttributeCollection["showkbarticledeprecationnotification"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ShowKBArticledeprecationmessagetouser");
					SetAttributeValue("showkbarticledeprecationnotification", value);
				OnPropertyChanged("ShowKBArticledeprecationmessagetouser");
			}
		}

        /// <summary>
        ///  
		/// 'ShowWeekNumber'.<br />
        /// Information that specifies whether to display the week number in calendar displays throughout Microsoft CRM.
        /// </summary>
		[AttributeLogicalName("showweeknumber")]
		public bool? ShowWeekNumber
		{
			get
			{
				var value = GetAttributeValue<bool?>("showweeknumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("showweeknumber"))
				    value = (bool?) backupAttributeCollection["showweeknumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ShowWeekNumber");
					SetAttributeValue("showweeknumber", value);
				OnPropertyChanged("ShowWeekNumber");
			}
		}

        /// <summary>
        /// [MaximumLength=200] 
		/// 'SignupOutlookDownloadFWLink'.<br />
        /// CRM for Outlook Download URL
        /// </summary>
		[AttributeLogicalName("signupoutlookdownloadfwlink"), MaxLength(200)]
		public string CRMForOutlookDownloadURL
		{
			get
			{
				var value = GetAttributeValue<string>("signupoutlookdownloadfwlink");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("signupoutlookdownloadfwlink"))
				    value = (string) backupAttributeCollection["signupoutlookdownloadfwlink"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CRMForOutlookDownloadURL");
					SetAttributeValue("signupoutlookdownloadfwlink", value);
				OnPropertyChanged("CRMForOutlookDownloadURL");
			}
		}

        /// <summary>
        /// [MaximumLength=1073741823] 
		/// 'SiteMapXml'.<br />
        /// XML string that defines the navigation structure for the application.
        /// </summary>
		[AttributeLogicalName("sitemapxml"), MaxLength(1073741823)]
		[Obsolete]
		public string SiteMapXML
		{
			get
			{
				var value = GetAttributeValue<string>("sitemapxml");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("sitemapxml"))
				    value = (string) backupAttributeCollection["sitemapxml"];
			    return value;
			}
			set
			{
				OnPropertyChanging("SiteMapXML");
					SetAttributeValue("sitemapxml", value);
				OnPropertyChanged("SiteMapXML");
			}
		}

        /// <summary>
        /// [MaximumLength=1073741823] 
		/// 'SlaPauseStates'.<br />
        /// Contains the on hold case status values.
        /// </summary>
		[AttributeLogicalName("slapausestates"), MaxLength(1073741823)]
		public string SLApausestates
		{
			get
			{
				var value = GetAttributeValue<string>("slapausestates");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("slapausestates"))
				    value = (string) backupAttributeCollection["slapausestates"];
			    return value;
			}
			set
			{
				OnPropertyChanging("SLApausestates");
					SetAttributeValue("slapausestates", value);
				OnPropertyChanged("SLApausestates");
			}
		}

        /// <summary>
        ///  
		/// 'SocialInsightsEnabled'.<br />
        /// Flag for whether the organization is using Social Insights.
        /// </summary>
		[AttributeLogicalName("socialinsightsenabled")]
		public bool? SocialInsightsEnabled
		{
			get
			{
				var value = GetAttributeValue<bool?>("socialinsightsenabled");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("socialinsightsenabled"))
				    value = (bool?) backupAttributeCollection["socialinsightsenabled"];
			    return value;
			}
			set
			{
				OnPropertyChanging("SocialInsightsEnabled");
					SetAttributeValue("socialinsightsenabled", value);
				OnPropertyChanged("SocialInsightsEnabled");
			}
		}

        /// <summary>
        /// [MaximumLength=2048] 
		/// 'SocialInsightsInstance'.<br />
        /// Identifier for the Social Insights instance for the organization.
        /// </summary>
		[AttributeLogicalName("socialinsightsinstance"), MaxLength(2048)]
		public string SocialInsightsinstanceidentifier
		{
			get
			{
				var value = GetAttributeValue<string>("socialinsightsinstance");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("socialinsightsinstance"))
				    value = (string) backupAttributeCollection["socialinsightsinstance"];
			    return value;
			}
			set
			{
				OnPropertyChanging("SocialInsightsinstanceidentifier");
					SetAttributeValue("socialinsightsinstance", value);
				OnPropertyChanged("SocialInsightsinstanceidentifier");
			}
		}

        /// <summary>
        ///  
		/// 'SocialInsightsTermsAccepted'.<br />
        /// Flag for whether the organization has accepted the Social Insights terms of use.
        /// </summary>
		[AttributeLogicalName("socialinsightstermsaccepted")]
		public bool? SocialInsightsTermsofUse
		{
			get
			{
				var value = GetAttributeValue<bool?>("socialinsightstermsaccepted");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("socialinsightstermsaccepted"))
				    value = (bool?) backupAttributeCollection["socialinsightstermsaccepted"];
			    return value;
			}
			set
			{
				OnPropertyChanging("SocialInsightsTermsofUse");
					SetAttributeValue("socialinsightstermsaccepted", value);
				OnPropertyChanged("SocialInsightsTermsofUse");
			}
		}

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'SortId'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("sortid"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? Sort
		{
			get
			{
				var value = GetAttributeValue<int?>("sortid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("sortid"))
				    value = (int?) backupAttributeCollection["sortid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Sort");
					SetAttributeValue("sortid", value);
				OnPropertyChanged("Sort");
			}
		}

        /// <summary>
        ///  
		/// 'SqlAccessGroupId'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("sqlaccessgroupid")]
		public Guid? SQLAccessGroup
		{
			get
			{
				var value = GetAttributeValue<Guid?>("sqlaccessgroupid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("sqlaccessgroupid"))
				    value = (Guid?) backupAttributeCollection["sqlaccessgroupid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("SQLAccessGroup");
					SetAttributeValue("sqlaccessgroupid", value);
				OnPropertyChanged("SQLAccessGroup");
			}
		}

        /// <summary>
        /// [MaximumLength=256] 
		/// 'SqlAccessGroupName'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("sqlaccessgroupname"), MaxLength(256)]
		public string SQLAccessGroupName
		{
			get
			{
				var value = GetAttributeValue<string>("sqlaccessgroupname");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("sqlaccessgroupname"))
				    value = (string) backupAttributeCollection["sqlaccessgroupname"];
			    return value;
			}
			set
			{
				OnPropertyChanging("SQLAccessGroupName");
					SetAttributeValue("sqlaccessgroupname", value);
				OnPropertyChanged("SQLAccessGroupName");
			}
		}

        /// <summary>
        ///  
		/// 'SQMEnabled'.<br />
        /// Setting for SQM data collection, 0 no, 1 yes enabled
        /// </summary>
		[AttributeLogicalName("sqmenabled")]
		public bool? IsSQMEnabled
		{
			get
			{
				var value = GetAttributeValue<bool?>("sqmenabled");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("sqmenabled"))
				    value = (bool?) backupAttributeCollection["sqmenabled"];
			    return value;
			}
			set
			{
				OnPropertyChanging("IsSQMEnabled");
					SetAttributeValue("sqmenabled", value);
				OnPropertyChanged("IsSQMEnabled");
			}
		}

        /// <summary>
        ///  
		/// 'SupportUserId'.<br />
        /// Unique identifier of the support user for the organization.
        /// </summary>
		[AttributeLogicalName("supportuserid")]
		public Guid? SupportUser
		{
			get
			{
				var value = GetAttributeValue<Guid?>("supportuserid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("supportuserid"))
				    value = (Guid?) backupAttributeCollection["supportuserid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("SupportUser");
					SetAttributeValue("supportuserid", value);
				OnPropertyChanged("SupportUser");
			}
		}

        /// <summary>
        ///  
		/// 'SuppressSLA'.<br />
        /// Indicates whether SLA is suppressed.
        /// </summary>
		[AttributeLogicalName("suppresssla")]
		public bool? IsSLAsuppressed
		{
			get
			{
				var value = GetAttributeValue<bool?>("suppresssla");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("suppresssla"))
				    value = (bool?) backupAttributeCollection["suppresssla"];
			    return value;
			}
			set
			{
				OnPropertyChanging("IsSLAsuppressed");
					SetAttributeValue("suppresssla", value);
				OnPropertyChanged("IsSLAsuppressed");
			}
		}

        /// <summary>
        ///  
		/// 'SystemUserId'.<br />
        /// Unique identifier of the system user for the organization.
        /// </summary>
		[AttributeLogicalName("systemuserid")]
		public Guid? SystemUser
		{
			get
			{
				var value = GetAttributeValue<Guid?>("systemuserid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("systemuserid"))
				    value = (Guid?) backupAttributeCollection["systemuserid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("SystemUser");
					SetAttributeValue("systemuserid", value);
				OnPropertyChanged("SystemUser");
			}
		}

        /// <summary>
        ///  
		/// 'TagMaxAggressiveCycles'.<br />
        /// Maximum number of aggressive polling cycles executed for email auto-tagging when a new email is received.
        /// </summary>
		[AttributeLogicalName("tagmaxaggressivecycles")]
		public int? AutoTagMaxCycles
		{
			get
			{
				var value = GetAttributeValue<int?>("tagmaxaggressivecycles");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("tagmaxaggressivecycles"))
				    value = (int?) backupAttributeCollection["tagmaxaggressivecycles"];
			    return value;
			}
			set
			{
				OnPropertyChanging("AutoTagMaxCycles");
					SetAttributeValue("tagmaxaggressivecycles", value);
				OnPropertyChanged("AutoTagMaxCycles");
			}
		}

        /// <summary>
        /// [Range(0, 2147483647)] 
		/// 'TagPollingPeriod'.<br />
        /// Normal polling frequency used for email receive auto-tagging in outlook.
        /// </summary>
		[AttributeLogicalName("tagpollingperiod"), InRange("0", "2147483647", typeof(int))]
		public int? AutoTagInterval
		{
			get
			{
				var value = GetAttributeValue<int?>("tagpollingperiod");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("tagpollingperiod"))
				    value = (int?) backupAttributeCollection["tagpollingperiod"];
			    return value;
			}
			set
			{
				OnPropertyChanging("AutoTagInterval");
					SetAttributeValue("tagpollingperiod", value);
				OnPropertyChanged("AutoTagInterval");
			}
		}

        /// <summary>
        ///  
		/// 'TaskBasedFlowEnabled'.<br />
        /// Select whether to turn on task flows for the organization.
        /// </summary>
		[AttributeLogicalName("taskbasedflowenabled")]
		public bool? EnableTaskFlowprocessesforthisOrganization
		{
			get
			{
				var value = GetAttributeValue<bool?>("taskbasedflowenabled");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("taskbasedflowenabled"))
				    value = (bool?) backupAttributeCollection["taskbasedflowenabled"];
			    return value;
			}
			set
			{
				OnPropertyChanging("EnableTaskFlowprocessesforthisOrganization");
					SetAttributeValue("taskbasedflowenabled", value);
				OnPropertyChanged("EnableTaskFlowprocessesforthisOrganization");
			}
		}

        /// <summary>
        ///  
		/// 'TextAnalyticsEnabled'.<br />
        /// Select whether to turn on text analytics for the organization.
        /// </summary>
		[AttributeLogicalName("textanalyticsenabled")]
		public bool? EnableTextAnalyticsforthisOrganization
		{
			get
			{
				var value = GetAttributeValue<bool?>("textanalyticsenabled");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("textanalyticsenabled"))
				    value = (bool?) backupAttributeCollection["textanalyticsenabled"];
			    return value;
			}
			set
			{
				OnPropertyChanging("EnableTextAnalyticsforthisOrganization");
					SetAttributeValue("textanalyticsenabled", value);
				OnPropertyChanged("EnableTextAnalyticsforthisOrganization");
			}
		}

        /// <summary>
        ///  
		/// 'TimeFormatCode'.<br />
        /// Information that specifies how the time is displayed throughout Microsoft CRM.
        /// </summary>
		[AttributeLogicalName("timeformatcode")]
		public TimeFormatCodeEnum? TimeFormatCode
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("timeformatcode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("timeformatcode"))
				    value = (OptionSetValue) backupAttributeCollection["timeformatcode"];
                return value == null ? (TimeFormatCodeEnum?) null : (TimeFormatCodeEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("TimeFormatCode");
                if (value != null)
				    SetAttributeValue("timeformatcode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("timeformatcode", value);
				OnPropertyChanged("TimeFormatCode");
			}
		}

        /// <summary>
        /// [MaximumLength=255] 
		/// 'TimeFormatString'.<br />
        /// Text for how time is displayed in Microsoft Dynamics 365.
        /// </summary>
		[AttributeLogicalName("timeformatstring"), MaxLength(255)]
		public string TimeFormatString
		{
			get
			{
				var value = GetAttributeValue<string>("timeformatstring");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("timeformatstring"))
				    value = (string) backupAttributeCollection["timeformatstring"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TimeFormatString");
					SetAttributeValue("timeformatstring", value);
				OnPropertyChanged("TimeFormatString");
			}
		}

        /// <summary>
        /// [MaximumLength=5] 
		/// 'TimeSeparator'.<br />
        /// Text for how the time separator is displayed throughout Microsoft Dynamics 365.
        /// </summary>
		[AttributeLogicalName("timeseparator"), MaxLength(5)]
		public string TimeSeparator
		{
			get
			{
				var value = GetAttributeValue<string>("timeseparator");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("timeseparator"))
				    value = (string) backupAttributeCollection["timeseparator"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TimeSeparator");
					SetAttributeValue("timeseparator", value);
				OnPropertyChanged("TimeSeparator");
			}
		}

        /// <summary>
        /// [Range(-1, 2147483647)] 
		/// 'TimeZoneRuleVersionNumber'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("timezoneruleversionnumber"), InRange("-1", "2147483647", typeof(int))]
		public int? TimeZoneRuleVersionNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("timezoneruleversionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("timezoneruleversionnumber"))
				    value = (int?) backupAttributeCollection["timezoneruleversionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TimeZoneRuleVersionNumber");
					SetAttributeValue("timezoneruleversionnumber", value);
				OnPropertyChanged("TimeZoneRuleVersionNumber");
			}
		}

        /// <summary>
        ///  
		/// 'TokenExpiry'.<br />
        /// Duration used for token expiration.
        /// </summary>
		[AttributeLogicalName("tokenexpiry")]
		public int? TokenExpirationDuration
		{
			get
			{
				var value = GetAttributeValue<int?>("tokenexpiry");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("tokenexpiry"))
				    value = (int?) backupAttributeCollection["tokenexpiry"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TokenExpirationDuration");
					SetAttributeValue("tokenexpiry", value);
				OnPropertyChanged("TokenExpirationDuration");
			}
		}

        /// <summary>
        /// [MaximumLength=256] 
		/// 'TrackingPrefix'.<br />
        /// History list of tracking token prefixes.
        /// </summary>
		[AttributeLogicalName("trackingprefix"), MaxLength(256)]
		public string TrackingPrefix
		{
			get
			{
				var value = GetAttributeValue<string>("trackingprefix");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("trackingprefix"))
				    value = (string) backupAttributeCollection["trackingprefix"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TrackingPrefix");
					SetAttributeValue("trackingprefix", value);
				OnPropertyChanged("TrackingPrefix");
			}
		}

        /// <summary>
        /// [Range(0, 2147483647)] 
		/// 'TrackingTokenIdBase'.<br />
        /// Base number used to provide separate tracking token identifiers to users belonging to different deployments.
        /// </summary>
		[AttributeLogicalName("trackingtokenidbase"), InRange("0", "2147483647", typeof(int))]
		public int? TrackingTokenBase
		{
			get
			{
				var value = GetAttributeValue<int?>("trackingtokenidbase");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("trackingtokenidbase"))
				    value = (int?) backupAttributeCollection["trackingtokenidbase"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TrackingTokenBase");
					SetAttributeValue("trackingtokenidbase", value);
				OnPropertyChanged("TrackingTokenBase");
			}
		}

        /// <summary>
        ///  
		/// 'TrackingTokenIdDigits'.<br />
        /// Number of digits used to represent a tracking token identifier.
        /// </summary>
		[AttributeLogicalName("trackingtokeniddigits")]
		public int? TrackingTokenDigits
		{
			get
			{
				var value = GetAttributeValue<int?>("trackingtokeniddigits");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("trackingtokeniddigits"))
				    value = (int?) backupAttributeCollection["trackingtokeniddigits"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TrackingTokenDigits");
					SetAttributeValue("trackingtokeniddigits", value);
				OnPropertyChanged("TrackingTokenDigits");
			}
		}

        /// <summary>
        /// [Range(4, 6)] 
		/// 'UniqueSpecifierLength'.<br />
        /// Number of characters appended to invoice, quote, and order numbers.
        /// </summary>
		[AttributeLogicalName("uniquespecifierlength"), InRange("4", "6", typeof(int))]
		public int? UniqueStringLength
		{
			get
			{
				var value = GetAttributeValue<int?>("uniquespecifierlength");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("uniquespecifierlength"))
				    value = (int?) backupAttributeCollection["uniquespecifierlength"];
			    return value;
			}
			set
			{
				OnPropertyChanging("UniqueStringLength");
					SetAttributeValue("uniquespecifierlength", value);
				OnPropertyChanged("UniqueStringLength");
			}
		}

        /// <summary>
        ///  
		/// 'UnresolveEmailAddressIfMultipleMatch'.<br />
        /// Indicates whether email address should be unresolved if multiple matches are found
        /// </summary>
		[AttributeLogicalName("unresolveemailaddressifmultiplematch")]
		public bool? SetToccbccfieldsasunresolvedifmultiplematchesarefound
		{
			get
			{
				var value = GetAttributeValue<bool?>("unresolveemailaddressifmultiplematch");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("unresolveemailaddressifmultiplematch"))
				    value = (bool?) backupAttributeCollection["unresolveemailaddressifmultiplematch"];
			    return value;
			}
			set
			{
				OnPropertyChanging("SetToccbccfieldsasunresolvedifmultiplematchesarefound");
					SetAttributeValue("unresolveemailaddressifmultiplematch", value);
				OnPropertyChanged("SetToccbccfieldsasunresolvedifmultiplematchesarefound");
			}
		}

        /// <summary>
        ///  
		/// 'UseInbuiltRuleForDefaultPricelistSelection'.<br />
        /// Flag indicates whether to Use Inbuilt Rule For DefaultPricelist.
        /// </summary>
		[AttributeLogicalName("useinbuiltrulefordefaultpricelistselection")]
		public bool? UseInbuiltRuleForDefaultPricelistSelection
		{
			get
			{
				var value = GetAttributeValue<bool?>("useinbuiltrulefordefaultpricelistselection");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("useinbuiltrulefordefaultpricelistselection"))
				    value = (bool?) backupAttributeCollection["useinbuiltrulefordefaultpricelistselection"];
			    return value;
			}
			set
			{
				OnPropertyChanging("UseInbuiltRuleForDefaultPricelistSelection");
					SetAttributeValue("useinbuiltrulefordefaultpricelistselection", value);
				OnPropertyChanged("UseInbuiltRuleForDefaultPricelistSelection");
			}
		}

        /// <summary>
        ///  
		/// 'UseLegacyRendering'.<br />
        /// Select whether to use legacy form rendering.
        /// </summary>
		[AttributeLogicalName("uselegacyrendering")]
		public bool? LegacyFormRendering
		{
			get
			{
				var value = GetAttributeValue<bool?>("uselegacyrendering");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("uselegacyrendering"))
				    value = (bool?) backupAttributeCollection["uselegacyrendering"];
			    return value;
			}
			set
			{
				OnPropertyChanging("LegacyFormRendering");
					SetAttributeValue("uselegacyrendering", value);
				OnPropertyChanged("LegacyFormRendering");
			}
		}

        /// <summary>
        ///  
		/// 'UsePositionHierarchy'.<br />
        /// Use position hierarchy
        /// </summary>
		[AttributeLogicalName("usepositionhierarchy")]
		public bool? Usepositionhierarchy
		{
			get
			{
				var value = GetAttributeValue<bool?>("usepositionhierarchy");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("usepositionhierarchy"))
				    value = (bool?) backupAttributeCollection["usepositionhierarchy"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Usepositionhierarchy");
					SetAttributeValue("usepositionhierarchy", value);
				OnPropertyChanged("Usepositionhierarchy");
			}
		}

        /// <summary>
        /// [Range(0, 2147483647)] 
		/// 'UserAccessAuditingInterval'.<br />
        /// The interval at which user access is checked for auditing.
        /// </summary>
		[AttributeLogicalName("useraccessauditinginterval"), InRange("0", "2147483647", typeof(int))]
		public int? UserAuthenticationAuditingInterval
		{
			get
			{
				var value = GetAttributeValue<int?>("useraccessauditinginterval");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("useraccessauditinginterval"))
				    value = (int?) backupAttributeCollection["useraccessauditinginterval"];
			    return value;
			}
			set
			{
				OnPropertyChanging("UserAuthenticationAuditingInterval");
					SetAttributeValue("useraccessauditinginterval", value);
				OnPropertyChanged("UserAuthenticationAuditingInterval");
			}
		}

        /// <summary>
        ///  
		/// 'UseReadForm'.<br />
        /// Indicates whether the read-optimized form should be enabled for this organization.
        /// </summary>
		[AttributeLogicalName("usereadform")]
		public bool? UseReadOptimizedForm
		{
			get
			{
				var value = GetAttributeValue<bool?>("usereadform");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("usereadform"))
				    value = (bool?) backupAttributeCollection["usereadform"];
			    return value;
			}
			set
			{
				OnPropertyChanging("UseReadOptimizedForm");
					SetAttributeValue("usereadform", value);
				OnPropertyChanged("UseReadOptimizedForm");
			}
		}

        /// <summary>
        ///  
		/// 'UserGroupId'.<br />
        /// Unique identifier of the default group of users in the organization.
        /// </summary>
		[AttributeLogicalName("usergroupid")]
		public Guid? UserGroup
		{
			get
			{
				var value = GetAttributeValue<Guid?>("usergroupid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("usergroupid"))
				    value = (Guid?) backupAttributeCollection["usergroupid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("UserGroup");
					SetAttributeValue("usergroupid", value);
				OnPropertyChanged("UserGroup");
			}
		}

        /// <summary>
        ///  
		/// 'UseSkypeProtocol'.<br />
        /// Indicates default protocol selected for organization.
        /// </summary>
		[AttributeLogicalName("useskypeprotocol")]
		public bool? UserSkypeProtocol
		{
			get
			{
				var value = GetAttributeValue<bool?>("useskypeprotocol");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("useskypeprotocol"))
				    value = (bool?) backupAttributeCollection["useskypeprotocol"];
			    return value;
			}
			set
			{
				OnPropertyChanging("UserSkypeProtocol");
					SetAttributeValue("useskypeprotocol", value);
				OnPropertyChanged("UserSkypeProtocol");
			}
		}

        /// <summary>
        /// [Range(-1, 2147483647)] 
		/// 'UTCConversionTimeZoneCode'.<br />
        /// Time zone code that was in use when the record was created.
        /// </summary>
		[AttributeLogicalName("utcconversiontimezonecode"), InRange("-1", "2147483647", typeof(int))]
		public int? UTCConversionTimeZoneCode
		{
			get
			{
				var value = GetAttributeValue<int?>("utcconversiontimezonecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("utcconversiontimezonecode"))
				    value = (int?) backupAttributeCollection["utcconversiontimezonecode"];
			    return value;
			}
			set
			{
				OnPropertyChanging("UTCConversionTimeZoneCode");
					SetAttributeValue("utcconversiontimezonecode", value);
				OnPropertyChanged("UTCConversionTimeZoneCode");
			}
		}

        /// <summary>
        /// [MaximumLength=256] 
		/// 'V3CalloutConfigHash'.<br />
        /// Hash of the V3 callout configuration file.
        /// </summary>
		[AttributeLogicalName("v3calloutconfighash"), MaxLength(256)]
		public string V3CalloutHash
		{
			get
			{
				var value = GetAttributeValue<string>("v3calloutconfighash");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("v3calloutconfighash"))
				    value = (string) backupAttributeCollection["v3calloutconfighash"];
			    return value;
			}
			set
			{
				OnPropertyChanging("V3CalloutHash");
					SetAttributeValue("v3calloutconfighash", value);
				OnPropertyChanged("V3CalloutHash");
			}
		}

        /// <summary>
        ///  
		/// 'VersionNumber'.<br />
        /// Version number of the organization.
        /// </summary>
		[AttributeLogicalName("versionnumber")]
		public long? VersionNumber
		{
			get
			{
				var value = GetAttributeValue<long?>("versionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("versionnumber"))
				    value = (long?) backupAttributeCollection["versionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("VersionNumber");
					SetAttributeValue("versionnumber", value);
				OnPropertyChanged("VersionNumber");
			}
		}

        /// <summary>
        /// [MaximumLength=100] 
		/// 'WebResourceHash'.<br />
        /// Hash value of web resources.
        /// </summary>
		[AttributeLogicalName("webresourcehash"), MaxLength(100)]
		public string Webresourcehash
		{
			get
			{
				var value = GetAttributeValue<string>("webresourcehash");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("webresourcehash"))
				    value = (string) backupAttributeCollection["webresourcehash"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Webresourcehash");
					SetAttributeValue("webresourcehash", value);
				OnPropertyChanged("Webresourcehash");
			}
		}

        /// <summary>
        ///  
		/// 'WeekStartDayCode'.<br />
        /// Designated first day of the week throughout Microsoft Dynamics 365.
        /// </summary>
		[AttributeLogicalName("weekstartdaycode")]
		public WeekStartDayCodeEnum? WeekStartDayCode
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("weekstartdaycode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("weekstartdaycode"))
				    value = (OptionSetValue) backupAttributeCollection["weekstartdaycode"];
                return value == null ? (WeekStartDayCodeEnum?) null : (WeekStartDayCodeEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("WeekStartDayCode");
                if (value != null)
				    SetAttributeValue("weekstartdaycode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("weekstartdaycode", value);
				OnPropertyChanged("WeekStartDayCode");
			}
		}

        /// <summary>
        /// [MaximumLength=100] 
		/// 'WidgetProperties'.<br />
        /// For Internal use only.
        /// </summary>
		[AttributeLogicalName("widgetproperties"), MaxLength(100)]
		public string ForInternaluseonly
		{
			get
			{
				var value = GetAttributeValue<string>("widgetproperties");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("widgetproperties"))
				    value = (string) backupAttributeCollection["widgetproperties"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ForInternaluseonly");
					SetAttributeValue("widgetproperties", value);
				OnPropertyChanged("ForInternaluseonly");
			}
		}

        /// <summary>
        /// [Range(0, 2147483647)] 
		/// 'YammerGroupId'.<br />
        /// Denotes the Yammer group ID
        /// </summary>
		[AttributeLogicalName("yammergroupid"), InRange("0", "2147483647", typeof(int))]
		public int? YammerGroupId
		{
			get
			{
				var value = GetAttributeValue<int?>("yammergroupid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("yammergroupid"))
				    value = (int?) backupAttributeCollection["yammergroupid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("YammerGroupId");
					SetAttributeValue("yammergroupid", value);
				OnPropertyChanged("YammerGroupId");
			}
		}

        /// <summary>
        /// [MaximumLength=100] 
		/// 'YammerNetworkPermalink'.<br />
        /// Denotes the Yammer network permalink
        /// </summary>
		[AttributeLogicalName("yammernetworkpermalink"), MaxLength(100)]
		public string YammerNetworkPermalink
		{
			get
			{
				var value = GetAttributeValue<string>("yammernetworkpermalink");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("yammernetworkpermalink"))
				    value = (string) backupAttributeCollection["yammernetworkpermalink"];
			    return value;
			}
			set
			{
				OnPropertyChanging("YammerNetworkPermalink");
					SetAttributeValue("yammernetworkpermalink", value);
				OnPropertyChanged("YammerNetworkPermalink");
			}
		}

        /// <summary>
        ///  
		/// 'YammerOAuthAccessTokenExpired'.<br />
        /// Denotes whether the OAuth access token for Yammer network has expired
        /// </summary>
		[AttributeLogicalName("yammeroauthaccesstokenexpired")]
		public bool? YammerOAuthAccessTokenExpired
		{
			get
			{
				var value = GetAttributeValue<bool?>("yammeroauthaccesstokenexpired");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("yammeroauthaccesstokenexpired"))
				    value = (bool?) backupAttributeCollection["yammeroauthaccesstokenexpired"];
			    return value;
			}
			set
			{
				OnPropertyChanging("YammerOAuthAccessTokenExpired");
					SetAttributeValue("yammeroauthaccesstokenexpired", value);
				OnPropertyChanged("YammerOAuthAccessTokenExpired");
			}
		}

        /// <summary>
        ///  
		/// 'YammerPostMethod'.<br />
        /// Internal Use Only
        /// </summary>
		[AttributeLogicalName("yammerpostmethod")]
		public InternalUseOnlyEnum? InternalUseOnly
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("yammerpostmethod");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("yammerpostmethod"))
				    value = (OptionSetValue) backupAttributeCollection["yammerpostmethod"];
                return value == null ? (InternalUseOnlyEnum?) null : (InternalUseOnlyEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("InternalUseOnly");
                if (value != null)
				    SetAttributeValue("yammerpostmethod", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("yammerpostmethod", value);
				OnPropertyChanged("InternalUseOnly");
			}
		}

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'YearStartWeekCode'.<br />
        /// Information that specifies how the first week of the year is specified in Microsoft Dynamics 365.
        /// </summary>
		[AttributeLogicalName("yearstartweekcode"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? YearStartWeekCode
		{
			get
			{
				var value = GetAttributeValue<int?>("yearstartweekcode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("yearstartweekcode"))
				    value = (int?) backupAttributeCollection["yearstartweekcode"];
			    return value;
			}
			set
			{
				OnPropertyChanging("YearStartWeekCode");
					SetAttributeValue("yearstartweekcode", value);
				OnPropertyChanged("YearStartWeekCode");
			}
		}

		#endregion

		#region Relationships

		
		/// <summary>
		/// 1:N, 'organization_system_users'
		/// </summary>
		[RelationshipSchemaName("organization_system_users")]
		public User[] UsersOfOrganization
		{
			get
			{
				var enumerable = GetRelatedEntities<User>("organization_system_users", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("UsersOfOrganization");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<User>("organization_system_users", null, value);
				OnPropertyChanged("UsersOfOrganization");
			}
		}
		
		/// <summary>
		/// 1:N, 'organization_systemforms'
		/// </summary>
		[RelationshipSchemaName("organization_systemforms")]
		public SystemForm[] SystemFormsOfOrganizationId
		{
			get
			{
				var enumerable = GetRelatedEntities<SystemForm>("organization_systemforms", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("SystemFormsOfOrganizationId");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<SystemForm>("organization_systemforms", null, value);
				OnPropertyChanged("SystemFormsOfOrganizationId");
			}
		}
		
		/// <summary>
		/// 1:N, 'organization_theme'
		/// </summary>
		[RelationshipSchemaName("organization_theme")]
		public Theme[] ThemesOfOrganizationId
		{
			get
			{
				var enumerable = GetRelatedEntities<Theme>("organization_theme", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("ThemesOfOrganizationId");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<Theme>("organization_theme", null, value);
				OnPropertyChanged("ThemesOfOrganizationId");
			}
		}
		
		/// <summary>
		/// N:1, 'lk_organization_createdonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_organization_createdonbehalfby"), AttributeLogicalName("createdonbehalfby")]
		public User UserAsCreatedByDelegate
		{
			get
			{
				return GetRelatedEntity<User>("lk_organization_createdonbehalfby", null);
			}
			set
			{
				OnPropertyChanging("UserAsCreatedByDelegate");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_organization_createdonbehalfby", null, value);
				OnPropertyChanged("UserAsCreatedByDelegate");
			}
		}
		
		/// <summary>
		/// N:1, 'lk_organization_modifiedonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_organization_modifiedonbehalfby"), AttributeLogicalName("modifiedonbehalfby")]
		public User UserAsModifiedByDelegate
		{
			get
			{
				return GetRelatedEntity<User>("lk_organization_modifiedonbehalfby", null);
			}
			set
			{
				OnPropertyChanging("UserAsModifiedByDelegate");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_organization_modifiedonbehalfby", null, value);
				OnPropertyChanged("UserAsModifiedByDelegate");
			}
		}
		
		/// <summary>
		/// N:1, 'lk_organizationbase_createdby'
		/// </summary>
		[RelationshipSchemaName("lk_organizationbase_createdby"), AttributeLogicalName("createdby")]
		public User UserAsCreatedBy
		{
			get
			{
				return GetRelatedEntity<User>("lk_organizationbase_createdby", null);
			}
			set
			{
				OnPropertyChanging("UserAsCreatedBy");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_organizationbase_createdby", null, value);
				OnPropertyChanged("UserAsCreatedBy");
			}
		}
		
		/// <summary>
		/// N:1, 'lk_organizationbase_modifiedby'
		/// </summary>
		[RelationshipSchemaName("lk_organizationbase_modifiedby"), AttributeLogicalName("modifiedby")]
		public User UserAsModifiedBy
		{
			get
			{
				return GetRelatedEntity<User>("lk_organizationbase_modifiedby", null);
			}
			set
			{
				OnPropertyChanging("UserAsModifiedBy");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_organizationbase_modifiedby", null, value);
				OnPropertyChanged("UserAsModifiedBy");
			}
		}
		
		public static class RelationNames {
			public static RelationName UsersOfOrganization = new RelationName("UsersOfOrganization");
			public static RelationName SystemFormsOfOrganizationId = new RelationName("SystemFormsOfOrganizationId");
			public static RelationName ThemesOfOrganizationId = new RelationName("ThemesOfOrganizationId");
			public static RelationName UserAsCreatedByDelegate = new RelationName("UserAsCreatedByDelegate");
			public static RelationName UserAsModifiedByDelegate = new RelationName("UserAsModifiedByDelegate");
			public static RelationName UserAsCreatedBy = new RelationName("UserAsCreatedBy");
			public static RelationName UserAsModifiedBy = new RelationName("UserAsModifiedBy");
		}


		protected override IDictionary<string, object[]> RelationProperties { get {
			if (relationProperties != null) return relationProperties;
			relationProperties = new Dictionary<string, object[]>();
			relationProperties["UsersOfOrganization"] = new object[] { "UsersOfOrganization", "systemuser", "organization", "organizationid", "organizationid", "organizationid", "organizationid", "organization_system_users", typeof (User[]) };
			relationProperties["SystemFormsOfOrganizationId"] = new object[] { "SystemFormsOfOrganizationId", "systemform", "organization", "organizationid", "organizationid", "organizationid", "organizationid", "organization_systemforms", typeof (SystemForm[]) };
			relationProperties["ThemesOfOrganizationId"] = new object[] { "ThemesOfOrganizationId", "theme", "organization", "organizationid", "organizationid", "organizationid", "organizationid", "organization_theme", typeof (Theme[]) };
			relationProperties["UserAsCreatedByDelegate"] = new object[] { "UserAsCreatedByDelegate", "systemuser", "organization", "systemuserid", "createdonbehalfby", "organizationid", "organizationid", "lk_organization_createdonbehalfby", typeof (User) };
			relationProperties["UserAsModifiedByDelegate"] = new object[] { "UserAsModifiedByDelegate", "systemuser", "organization", "systemuserid", "modifiedonbehalfby", "organizationid", "organizationid", "lk_organization_modifiedonbehalfby", typeof (User) };
			relationProperties["UserAsCreatedBy"] = new object[] { "UserAsCreatedBy", "systemuser", "organization", "systemuserid", "createdby", "organizationid", "organizationid", "lk_organizationbase_createdby", typeof (User) };
			relationProperties["UserAsModifiedBy"] = new object[] { "UserAsModifiedBy", "systemuser", "organization", "systemuserid", "modifiedby", "organizationid", "organizationid", "lk_organizationbase_modifiedby", typeof (User) };
			return relationProperties; } }


		#endregion

		/// <summary>
		/// Constructor for populating via LINQ queries given a LINQ anonymous type
		/// <param name="anonymousType">LINQ anonymous type.</param>
		/// </summary>
		public Organization(object anonymousType) : 
				this()
		{
            foreach (var p in anonymousType.GetType().GetProperties())
            {
                var value = p.GetValue(anonymousType, null);
                if (p.PropertyType == typeof(System.Guid))
                {
                    // Type is Guid, must be Id
                    base.Id = (System.Guid)value;
               }
                else if (p.Name == "FormattedValues")
                {
                    // Add Support for FormattedValues
                    FormattedValues.AddRange((FormattedValueCollection)value);
                }
                else
                {
                    Attributes[p.Name.ToLower()] = value;
                }
            }
		}


		#region Label/value pairs

		#region AllowAddressBookSynchronization

		public enum AllowAddressBookSynchronizationEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region AllowAutomaticResponseCreation

		public enum AllowAutomaticResponseCreationEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region AllowAutomaticUnsubscribe

		public enum AllowAutomaticUnsubscribeEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region AllowAutomaticUnsubscribeAcknowledgement

		public enum AllowAutomaticUnsubscribeAcknowledgementEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region AllowOutlookClientMessageBarAdvertisement

		public enum AllowOutlookClientMessageBarAdvertisementEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region AllowEntityLevelAuditing

		public enum AllowEntityLevelAuditingEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region AllowMarketingEmailExecution

		public enum AllowMarketingEmailExecutionEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region AllowOfflineScheduledSynchronization

		public enum AllowOfflineScheduledSynchronizationEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region AllowScheduledSynchronization

		public enum AllowScheduledSynchronizationEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region AllowUnresolvedAddressEmailSend

		public enum AllowUnresolvedAddressEmailSendEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region AllowUserFormModePreference

		public enum AllowUserFormModePreferenceEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region Allowtheshowingtabletapplicationnotificationbarsinabrowser

		public enum AllowtheshowingtabletapplicationnotificationbarsinabrowserEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region AllowExporttoExcel

		public enum AllowExporttoExcelEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region EnableAppDesignerExperienceforthisOrganization

		public enum EnableAppDesignerExperienceforthisOrganizationEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region AutoApplyDefaultEntitlementonCaseCreate

		public enum AutoApplyDefaultEntitlementonCaseCreateEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region AutoApplyDefaultEntitlementonCaseUpdate

		public enum AutoApplyDefaultEntitlementonCaseUpdateEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region IsAutoapplySLAAfterManuallyOverriding

		public enum IsAutoapplySLAAfterManuallyOverridingEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region CascadeStatusUpdate

		public enum CascadeStatusUpdateEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region EnableCortanaProactiveExperienceFlowprocessesforthisOrganization

		public enum EnableCortanaProactiveExperienceFlowprocessesforthisOrganizationEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region EnableActiveInitialProductState

		public enum EnableActiveInitialProductStateEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region DisplayCurrenciesUsing

		public enum DisplayCurrenciesUsingEnum
		{
			[EnumMember]Currencysymbol = 0,
			[EnumMember]Currencycode = 1,
		}

		#endregion
	
		#region CurrencyFormatCode

		public enum CurrencyFormatCodeEnum
		{
			[EnumMember]_123 = 0,
			[EnumMember]_123_2 = 1,
			[EnumMember]_123_3 = 2,
			[EnumMember]_123_4 = 3,
		}

		#endregion
	
		#region DateFormatCode

		public enum DateFormatCodeEnum
		{
		}

		#endregion
	
		#region DefaultRecurrenceEndRangeType

		public enum DefaultRecurrenceEndRangeTypeEnum
		{
			[EnumMember]NoEndDate = 1,
			[EnumMember]NumberofOccurrences = 2,
			[EnumMember]EndByDate = 3,
		}

		#endregion
	
		#region IsSocialCaredisabled

		public enum IsSocialCaredisabledEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region Discountcalculationmethod

		public enum DiscountcalculationmethodEnum
		{
			[EnumMember]Lineitem = 0,
			[EnumMember]Perunit = 1,
		}

		#endregion
	
		#region DisplayNavigationTour

		public enum DisplayNavigationTourEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region EmailConnectionChannel

		public enum EmailConnectionChannelEnum
		{
			[EnumMember]ServerSideSynchronization = 0,
			[EnumMember]MicrosoftDynamics365EmailRouter = 1,
		}

		#endregion
	
		#region UseEmailCorrelation

		public enum UseEmailCorrelationEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region EnableIntegrationwithBingMaps

		public enum EnableIntegrationwithBingMapsEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region EnableLearningPathAuthoring

		public enum EnableLearningPathAuthoringEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region EnableIntegrationwithMicrosoftFlow

		public enum EnableIntegrationwithMicrosoftFlowEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region EnablePricingOnCreate

		public enum EnablePricingOnCreateEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region EnableSmartMatching

		public enum EnableSmartMatchingEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region Organizationsettingtoenforcereadonlyplugins

		public enum OrganizationsettingtoenforcereadonlypluginsEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region FormatforFiscalPeriod

		public enum FormatforFiscalPeriodEnum
		{
			[EnumMember]Quarter0 = 1,
			[EnumMember]Q0 = 2,
			[EnumMember]P0 = 3,
			[EnumMember]Month0 = 4,
			[EnumMember]M0 = 5,
			[EnumMember]Semester0 = 6,
			[EnumMember]MonthName = 7,
		}

		#endregion
	
		#region IsFiscalSettingsUpdated

		public enum IsFiscalSettingsUpdatedEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region PrefixforFiscalYear

		public enum PrefixforFiscalYearEnum
		{
			[EnumMember]FY = 1,
			[EnumMember]Empty = 2,
		}

		#endregion
	
		#region SuffixforFiscalYear

		public enum SuffixforFiscalYearEnum
		{
			[EnumMember]FY = 1,
			[EnumMember]FiscalYear = 2,
			[EnumMember]Empty = 3,
		}

		#endregion
	
		#region FiscalYearFormatYear

		public enum FiscalYearFormatYearEnum
		{
			[EnumMember]YYYY = 1,
			[EnumMember]YY = 2,
			[EnumMember]GGYY = 3,
		}

		#endregion
	
		#region FullNameDisplayOrder

		public enum FullNameDisplayOrderEnum
		{
			[EnumMember]LastNameFirstName = 0,
			[EnumMember]FirstName = 1,
			[EnumMember]LastNameFirstNameMiddleInitial = 2,
			[EnumMember]FirstNameMiddleInitialLastName = 3,
			[EnumMember]LastNameFirstNameMiddleName = 4,
			[EnumMember]FirstNameMiddleNameLastName = 5,
			[EnumMember]LastNamespaceFirstName = 6,
			[EnumMember]LastNamenospaceFirstName = 7,
		}

		#endregion
	
		#region GenerateAlertsForErrors

		public enum GenerateAlertsForErrorsEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region GenerateAlertsForInformation

		public enum GenerateAlertsForInformationEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region GenerateAlertsForWarnings

		public enum GenerateAlertsForWarningsEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region IsGetStartedPaneContentEnabled

		public enum IsGetStartedPaneContentEnabledEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region IsAppendUrlParametersenabled

		public enum IsAppendUrlParametersenabledEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region IsCustomizableGlobalHelpenabled

		public enum IsCustomizableGlobalHelpenabledEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region GrantAccessToNetworkService

		public enum GrantAccessToNetworkServiceEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region IgnoreInternalEmail

		public enum IgnoreInternalEmailEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region EnableActionCardforthisOrganization

		public enum EnableActionCardforthisOrganizationEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region EnableRelationshipAnalyticsforthisOrganization

		public enum EnableRelationshipAnalyticsforthisOrganizationEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region IsApplicationModeEnabled

		public enum IsApplicationModeEnabledEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region IsAttachmentSyncEnabled

		public enum IsAttachmentSyncEnabledEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region IsAssignedTasksSyncEnabled

		public enum IsAssignedTasksSyncEnabledEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region IsAuditingEnabled

		public enum IsAuditingEnabledEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region EnableAutoCaptureforthisOrganization

		public enum EnableAutoCaptureforthisOrganizationEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region AutoSaveEnabled

		public enum AutoSaveEnabledEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region IsConflictDetectionforMobileClientenabled

		public enum IsConflictDetectionforMobileClientenabledEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region IsMailingAddressSyncEnabled

		public enum IsMailingAddressSyncEnabledEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region Enableordisablecountrycodeselection

		public enum EnableordisablecountrycodeselectionEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region IsDelegationAccessEnabled

		public enum IsDelegationAccessEnabledEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region EnableActionHubforthisOrganization

		public enum EnableActionHubforthisOrganizationEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region IsOrganizationDisabled

		public enum IsOrganizationDisabledEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region IsDuplicateDetectionEnabled

		public enum IsDuplicateDetectionEnabledEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region IsDuplicateDetectionEnabledForImport

		public enum IsDuplicateDetectionEnabledForImportEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region IsDuplicateDetectionEnabledForOfflineSynchronization

		public enum IsDuplicateDetectionEnabledForOfflineSynchronizationEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region IsDuplicateDetectionEnabledforOnlineCreateUpdate

		public enum IsDuplicateDetectionEnabledforOnlineCreateUpdateEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region Allowtrackingrecipientactivityonsentemails

		public enum AllowtrackingrecipientactivityonsentemailsEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region IsEmailServerProfileContentFilteringEnabled

		public enum IsEmailServerProfileContentFilteringEnabledEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region optionsetvaluesforisenabledforallroles

		public enum optionsetvaluesforisenabledforallrolesEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region Enableexternalsearchdatasyncing

		public enum EnableexternalsearchdatasyncingEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region IsFiscalPeriodMonthly

		public enum IsFiscalPeriodMonthlyEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region Automaticallycreatefolders

		public enum AutomaticallycreatefoldersEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region IsFolderBasedTrackingEnabled

		public enum IsFolderBasedTrackingEnabledEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region EnableFulltextsearchforQuickFind

		public enum EnableFulltextsearchforQuickFindEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region EnableHierarchicalSecurityModel

		public enum EnableHierarchicalSecurityModelEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region IsMailboxForcedUnlockingEnabled

		public enum IsMailboxForcedUnlockingEnabledEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region IsMailboxKeepAliveEnabled

		public enum IsMailboxKeepAliveEnabledEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region IsMobileClientOnDemandSyncenabled

		public enum IsMobileClientOnDemandSyncenabledEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region EnableMobileOfflineforthisOrganization

		public enum EnableMobileOfflineforthisOrganizationEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region EnableOfficeGraphforthisOrganization

		public enum EnableOfficeGraphforthisOrganizationEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region EnableOneDriveforthisOrganization

		public enum EnableOneDriveforthisOrganizationEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region PresenceEnabled

		public enum PresenceEnabledEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region EnablePreviewActionCardfeatureforthisOrganization

		public enum EnablePreviewActionCardfeatureforthisOrganizationEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region EnableAutoCaptureforthisOrganizationatPreviewSettings

		public enum EnableAutoCaptureforthisOrganizationatPreviewSettingsEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region AllowsPreviewForEmailMonitoring

		public enum AllowsPreviewForEmailMonitoringEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region EnableRelationshipInsightsforthisOrganization

		public enum EnableRelationshipInsightsforthisOrganizationEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region Resourcebookingsynchronizationenabled

		public enum ResourcebookingsynchronizationenabledEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region IsSalesOrderIntegrationEnabled

		public enum IsSalesOrderIntegrationEnabledEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region IsUserAccessAuditingEnabled

		public enum IsUserAccessAuditingEnabledEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region ISVIntegrationMode

		public enum ISVIntegrationModeEnum
		{
			[EnumMember]None = 0,
			[EnumMember]Web = 1,
			[EnumMember]OutlookWorkstationClient = 2,
			[EnumMember]WebOutlookWorkstationClient = 3,
			[EnumMember]OutlookLaptopClient = 4,
			[EnumMember]WebOutlookLaptopClient = 5,
			[EnumMember]Outlook = 6,
			[EnumMember]All = 7,
		}

		#endregion
	
		#region NegativeFormat

		public enum NegativeFormatEnum
		{
			[EnumMember]Brackets = 0,
			[EnumMember]Dash = 1,
			[EnumMember]DashplusSpace = 2,
			[EnumMember]TrailingDash = 3,
			[EnumMember]SpaceplusTrailingDash = 4,
		}

		#endregion
	
		#region NotifyMailboxOwnerOfEmailServerLevelAlerts

		public enum NotifyMailboxOwnerOfEmailServerLevelAlertsEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region EnableOfficeAppsAutoDeploymentforthisOrganization

		public enum EnableOfficeAppsAutoDeploymentforthisOrganizationEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region EnableOOBPricecalculation

		public enum EnableOOBPricecalculationEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region EnableOrgInsightsforthisOrganization

		public enum EnableOrgInsightsforthisOrganizationEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region PluginTraceLogSetting

		public enum PluginTraceLogSettingEnum
		{
			[EnumMember]Off = 0,
			[EnumMember]Exception = 1,
			[EnumMember]All = 2,
		}

		#endregion
	
		#region EnablePowerBIfeatureforthisOrganization

		public enum EnablePowerBIfeatureforthisOrganizationEnum
		{
			[EnumMember]Enable = 1,
			[EnumMember]Disable = 0,
		}

		#endregion
	
		#region EnableProductRecommendationsforthisOrganization

		public enum EnableProductRecommendationsforthisOrganizationEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region QuickFindRecordLimitEnabled

		public enum QuickFindRecordLimitEnabledEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region RenderSecureFrameForEmail

		public enum RenderSecureFrameForEmailEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region ReportScriptErrors

		public enum ReportScriptErrorsEnum
		{
			[EnumMember]NopreferenceforsendinganerrorreporttoMicrosoftaboutMicrosoftDynamics365 = 0,
			[EnumMember]AskmeforpermissiontosendanerrorreporttoMicrosoft = 1,
			[EnumMember]AutomaticallysendanerrorreporttoMicrosoftwithoutaskingmeforpermission = 2,
			[EnumMember]NeversendanerrorreporttoMicrosoftaboutMicrosoftDynamics365 = 3,
		}

		#endregion
	
		#region IsApprovalForQueueEmailRequired

		public enum IsApprovalForQueueEmailRequiredEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region IsApprovalForUserEmailRequired

		public enum IsApprovalForUserEmailRequiredEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region RestrictStatusUpdate

		public enum RestrictStatusUpdateEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region ChooseSharePointDeploymentType

		public enum ChooseSharePointDeploymentTypeEnum
		{
			[EnumMember]Online = 0,
			[EnumMember]OnPremises = 1,
		}

		#endregion
	
		#region ShareToPreviousOwnerOnAssign

		public enum ShareToPreviousOwnerOnAssignEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region ShowKBArticledeprecationmessagetouser

		public enum ShowKBArticledeprecationmessagetouserEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region ShowWeekNumber

		public enum ShowWeekNumberEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region SocialInsightsEnabled

		public enum SocialInsightsEnabledEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region SocialInsightsTermsofUse

		public enum SocialInsightsTermsofUseEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region IsSQMEnabled

		public enum IsSQMEnabledEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region IsSLAsuppressed

		public enum IsSLAsuppressedEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region EnableTaskFlowprocessesforthisOrganization

		public enum EnableTaskFlowprocessesforthisOrganizationEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region EnableTextAnalyticsforthisOrganization

		public enum EnableTextAnalyticsforthisOrganizationEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region TimeFormatCode

		public enum TimeFormatCodeEnum
		{
		}

		#endregion
	
		#region SetToccbccfieldsasunresolvedifmultiplematchesarefound

		public enum SetToccbccfieldsasunresolvedifmultiplematchesarefoundEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region UseInbuiltRuleForDefaultPricelistSelection

		public enum UseInbuiltRuleForDefaultPricelistSelectionEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region LegacyFormRendering

		public enum LegacyFormRenderingEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region Usepositionhierarchy

		public enum UsepositionhierarchyEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region UseReadOptimizedForm

		public enum UseReadOptimizedFormEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region UserSkypeProtocol

		public enum UserSkypeProtocolEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region WeekStartDayCode

		public enum WeekStartDayCodeEnum
		{
		}

		#endregion
	
		#region YammerOAuthAccessTokenExpired

		public enum YammerOAuthAccessTokenExpiredEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region InternalUseOnly

		public enum InternalUseOnlyEnum
		{
			[EnumMember]Public = 0,
			[EnumMember]Private = 1,
		}

		#endregion
	
		#endregion


		#region Metadata


		#region Enums

		public static class Enums
		{
			/// <summary>
			/// Gets the label corresponding to the option-set's value using its logical name,
			/// the value within, and the language code.
			/// </summary>
			/// <param name="logicalName">The logical name of the option-set in CRM</param>
			/// <param name="constant">The value from the option-set</param>
			/// <param name="languageCode">The language code from CRM</param>
			/// <returns></returns>
			public static string GetLabel(string logicalName, int constant, int languageCode = 1033)
			{
				return GeneratorHelpers.GetLabel(logicalName, constant, typeof(Enums), languageCode);
			}
			/// <summary>
			/// Gets the value corresponding to the option-set's label using its logical name,
			/// the value within, and the language code.
			/// </summary>
			/// <param name="logicalName">The logical name of the option-set in CRM</param>
			/// <param name="label">The label from the option-set</param>
			/// <param name="languageCode">The language code from CRM</param>
			/// <returns>The value corresponding to the label</returns>
			public static int GetValue(string logicalName, string label, int languageCode = 1033)
			{
				return GeneratorHelpers.GetValue(logicalName, label, typeof(Enums), languageCode);
			}

			#region Logical names

			public static class Names
			{
				public const string AllowAddressBookSynchronization = "allowaddressbooksyncs";
				public const string AllowAutomaticResponseCreation = "allowautoresponsecreation";
				public const string AllowAutomaticUnsubscribe = "allowautounsubscribe";
				public const string AllowAutomaticUnsubscribeAcknowledgement = "allowautounsubscribeacknowledgement";
				public const string AllowOutlookClientMessageBarAdvertisement = "allowclientmessagebarad";
				public const string AllowEntityLevelAuditing = "allowentityonlyaudit";
				public const string AllowMarketingEmailExecution = "allowmarketingemailexecution";
				public const string AllowOfflineScheduledSynchronization = "allowofflinescheduledsyncs";
				public const string AllowScheduledSynchronization = "allowoutlookscheduledsyncs";
				public const string AllowUnresolvedAddressEmailSend = "allowunresolvedpartiesonemailsend";
				public const string AllowUserFormModePreference = "allowuserformmodepreference";
				public const string Allowtheshowingtabletapplicationnotificationbarsinabrowser = "allowusersseeappdownloadmessage";
				public const string AllowExporttoExcel = "allowwebexcelexport";
				public const string EnableAppDesignerExperienceforthisOrganization = "appdesignerexperienceenabled";
				public const string AutoApplyDefaultEntitlementonCaseCreate = "autoapplydefaultoncasecreate";
				public const string AutoApplyDefaultEntitlementonCaseUpdate = "autoapplydefaultoncaseupdate";
				public const string IsAutoapplySLAAfterManuallyOverriding = "autoapplysla";
				public const string CascadeStatusUpdate = "cascadestatusupdate";
				public const string EnableCortanaProactiveExperienceFlowprocessesforthisOrganization = "cortanaproactiveexperienceenabled";
				public const string EnableActiveInitialProductState = "createproductswithoutparentinactivestate";
				public const string DisplayCurrenciesUsing = "currencydisplayoption";
				public const string CurrencyFormatCode = "currencyformatcode";
				public const string DateFormatCode = "dateformatcode";
				public const string DefaultRecurrenceEndRangeType = "defaultrecurrenceendrangetype";
				public const string IsSocialCaredisabled = "disablesocialcare";
				public const string Discountcalculationmethod = "discountcalculationmethod";
				public const string DisplayNavigationTour = "displaynavigationtour";
				public const string EmailConnectionChannel = "emailconnectionchannel";
				public const string UseEmailCorrelation = "emailcorrelationenabled";
				public const string EnableIntegrationwithBingMaps = "enablebingmapsintegration";
				public const string EnableLearningPathAuthoring = "enablelpauthoring";
				public const string EnableIntegrationwithMicrosoftFlow = "enablemicrosoftflowintegration";
				public const string EnablePricingOnCreate = "enablepricingoncreate";
				public const string EnableSmartMatching = "enablesmartmatching";
				public const string Organizationsettingtoenforcereadonlyplugins = "enforcereadonlyplugins";
				public const string FormatforFiscalPeriod = "fiscalperiodformatperiod";
				public const string IsFiscalSettingsUpdated = "fiscalsettingsupdated";
				public const string PrefixforFiscalYear = "fiscalyearformatprefix";
				public const string SuffixforFiscalYear = "fiscalyearformatsuffix";
				public const string FiscalYearFormatYear = "fiscalyearformatyear";
				public const string FullNameDisplayOrder = "fullnameconventioncode";
				public const string GenerateAlertsForErrors = "generatealertsforerrors";
				public const string GenerateAlertsForInformation = "generatealertsforinformation";
				public const string GenerateAlertsForWarnings = "generatealertsforwarnings";
				public const string IsGetStartedPaneContentEnabled = "getstartedpanecontentenabled";
				public const string IsAppendUrlParametersenabled = "globalappendurlparametersenabled";
				public const string IsCustomizableGlobalHelpenabled = "globalhelpurlenabled";
				public const string GrantAccessToNetworkService = "grantaccesstonetworkservice";
				public const string IgnoreInternalEmail = "ignoreinternalemail";
				public const string EnableActionCardforthisOrganization = "isactioncardenabled";
				public const string EnableRelationshipAnalyticsforthisOrganization = "isactivityanalysisenabled";
				public const string IsApplicationModeEnabled = "isappmode";
				public const string IsAttachmentSyncEnabled = "isappointmentattachmentsyncenabled";
				public const string IsAssignedTasksSyncEnabled = "isassignedtaskssyncenabled";
				public const string IsAuditingEnabled = "isauditenabled";
				public const string EnableAutoCaptureforthisOrganization = "isautodatacaptureenabled";
				public const string AutoSaveEnabled = "isautosaveenabled";
				public const string IsConflictDetectionforMobileClientenabled = "isconflictdetectionenabledformobileclient";
				public const string IsMailingAddressSyncEnabled = "iscontactmailingaddresssyncenabled";
				public const string Enableordisablecountrycodeselection = "isdefaultcountrycodecheckenabled";
				public const string IsDelegationAccessEnabled = "isdelegateaccessenabled";
				public const string EnableActionHubforthisOrganization = "isdelveactionhubintegrationenabled";
				public const string IsOrganizationDisabled = "isdisabled";
				public const string IsDuplicateDetectionEnabled = "isduplicatedetectionenabled";
				public const string IsDuplicateDetectionEnabledForImport = "isduplicatedetectionenabledforimport";
				public const string IsDuplicateDetectionEnabledForOfflineSynchronization = "isduplicatedetectionenabledforofflinesync";
				public const string IsDuplicateDetectionEnabledforOnlineCreateUpdate = "isduplicatedetectionenabledforonlinecreateupdate";
				public const string Allowtrackingrecipientactivityonsentemails = "isemailmonitoringallowed";
				public const string IsEmailServerProfileContentFilteringEnabled = "isemailserverprofilecontentfilteringenabled";
				public const string optionsetvaluesforisenabledforallroles = "isenabledforallroles";
				public const string Enableexternalsearchdatasyncing = "isexternalsearchindexenabled";
				public const string IsFiscalPeriodMonthly = "isfiscalperiodmonthbased";
				public const string Automaticallycreatefolders = "isfolderautocreatedonsp";
				public const string IsFolderBasedTrackingEnabled = "isfolderbasedtrackingenabled";
				public const string EnableFulltextsearchforQuickFind = "isfulltextsearchenabled";
				public const string EnableHierarchicalSecurityModel = "ishierarchicalsecuritymodelenabled";
				public const string IsMailboxForcedUnlockingEnabled = "ismailboxforcedunlockingenabled";
				public const string IsMailboxKeepAliveEnabled = "ismailboxinactivebackoffenabled";
				public const string IsMobileClientOnDemandSyncenabled = "ismobileclientondemandsyncenabled";
				public const string EnableMobileOfflineforthisOrganization = "ismobileofflineenabled";
				public const string EnableOfficeGraphforthisOrganization = "isofficegraphenabled";
				public const string EnableOneDriveforthisOrganization = "isonedriveenabled";
				public const string PresenceEnabled = "ispresenceenabled";
				public const string EnablePreviewActionCardfeatureforthisOrganization = "ispreviewenabledforactioncard";
				public const string EnableAutoCaptureforthisOrganizationatPreviewSettings = "ispreviewforautocaptureenabled";
				public const string AllowsPreviewForEmailMonitoring = "ispreviewforemailmonitoringallowed";
				public const string EnableRelationshipInsightsforthisOrganization = "isrelationshipinsightsenabled";
				public const string Resourcebookingsynchronizationenabled = "isresourcebookingexchangesyncenabled";
				public const string IsSalesOrderIntegrationEnabled = "issopintegrationenabled";
				public const string IsUserAccessAuditingEnabled = "isuseraccessauditenabled";
				public const string ISVIntegrationMode = "isvintegrationcode";
				public const string NegativeFormat = "negativeformatcode";
				public const string NotifyMailboxOwnerOfEmailServerLevelAlerts = "notifymailboxownerofemailserverlevelalerts";
				public const string EnableOfficeAppsAutoDeploymentforthisOrganization = "officeappsautodeploymentenabled";
				public const string EnableOOBPricecalculation = "oobpricecalculationenabled";
				public const string EnableOrgInsightsforthisOrganization = "orginsightsenabled";
				public const string PluginTraceLogSetting = "plugintracelogsetting";
				public const string EnablePowerBIfeatureforthisOrganization = "powerbifeatureenabled";
				public const string EnableProductRecommendationsforthisOrganization = "productrecommendationsenabled";
				public const string QuickFindRecordLimitEnabled = "quickfindrecordlimitenabled";
				public const string RenderSecureFrameForEmail = "rendersecureiframeforemail";
				public const string ReportScriptErrors = "reportscripterrors";
				public const string IsApprovalForQueueEmailRequired = "requireapprovalforqueueemail";
				public const string IsApprovalForUserEmailRequired = "requireapprovalforuseremail";
				public const string RestrictStatusUpdate = "restrictstatusupdate";
				public const string ChooseSharePointDeploymentType = "sharepointdeploymenttype";
				public const string ShareToPreviousOwnerOnAssign = "sharetopreviousowneronassign";
				public const string ShowKBArticledeprecationmessagetouser = "showkbarticledeprecationnotification";
				public const string ShowWeekNumber = "showweeknumber";
				public const string SocialInsightsEnabled = "socialinsightsenabled";
				public const string SocialInsightsTermsofUse = "socialinsightstermsaccepted";
				public const string IsSQMEnabled = "sqmenabled";
				public const string IsSLAsuppressed = "suppresssla";
				public const string EnableTaskFlowprocessesforthisOrganization = "taskbasedflowenabled";
				public const string EnableTextAnalyticsforthisOrganization = "textanalyticsenabled";
				public const string TimeFormatCode = "timeformatcode";
				public const string SetToccbccfieldsasunresolvedifmultiplematchesarefound = "unresolveemailaddressifmultiplematch";
				public const string UseInbuiltRuleForDefaultPricelistSelection = "useinbuiltrulefordefaultpricelistselection";
				public const string LegacyFormRendering = "uselegacyrendering";
				public const string Usepositionhierarchy = "usepositionhierarchy";
				public const string UseReadOptimizedForm = "usereadform";
				public const string UserSkypeProtocol = "useskypeprotocol";
				public const string WeekStartDayCode = "weekstartdaycode";
				public const string YammerOAuthAccessTokenExpired = "yammeroauthaccesstokenexpired";
				public const string InternalUseOnly = "yammerpostmethod";
			}

			#endregion

			#region Labels

			public static class Labels
			{
				public static class AllowAddressBookSynchronization 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(AllowAddressBookSynchronization), label, languageCode);
					}
				}

				public static class AllowAutomaticResponseCreation 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(AllowAutomaticResponseCreation), label, languageCode);
					}
				}

				public static class AllowAutomaticUnsubscribe 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(AllowAutomaticUnsubscribe), label, languageCode);
					}
				}

				public static class AllowAutomaticUnsubscribeAcknowledgement 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(AllowAutomaticUnsubscribeAcknowledgement), label, languageCode);
					}
				}

				public static class AllowOutlookClientMessageBarAdvertisement 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(AllowOutlookClientMessageBarAdvertisement), label, languageCode);
					}
				}

				public static class AllowEntityLevelAuditing 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(AllowEntityLevelAuditing), label, languageCode);
					}
				}

				public static class AllowMarketingEmailExecution 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(AllowMarketingEmailExecution), label, languageCode);
					}
				}

				public static class AllowOfflineScheduledSynchronization 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(AllowOfflineScheduledSynchronization), label, languageCode);
					}
				}

				public static class AllowScheduledSynchronization 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(AllowScheduledSynchronization), label, languageCode);
					}
				}

				public static class AllowUnresolvedAddressEmailSend 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(AllowUnresolvedAddressEmailSend), label, languageCode);
					}
				}

				public static class AllowUserFormModePreference 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(AllowUserFormModePreference), label, languageCode);
					}
				}

				public static class Allowtheshowingtabletapplicationnotificationbarsinabrowser 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(Allowtheshowingtabletapplicationnotificationbarsinabrowser), label, languageCode);
					}
				}

				public static class AllowExporttoExcel 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(AllowExporttoExcel), label, languageCode);
					}
				}

				public static class EnableAppDesignerExperienceforthisOrganization 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(EnableAppDesignerExperienceforthisOrganization), label, languageCode);
					}
				}

				public static class AutoApplyDefaultEntitlementonCaseCreate 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(AutoApplyDefaultEntitlementonCaseCreate), label, languageCode);
					}
				}

				public static class AutoApplyDefaultEntitlementonCaseUpdate 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(AutoApplyDefaultEntitlementonCaseUpdate), label, languageCode);
					}
				}

				public static class IsAutoapplySLAAfterManuallyOverriding 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(IsAutoapplySLAAfterManuallyOverriding), label, languageCode);
					}
				}

				public static class CascadeStatusUpdate 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(CascadeStatusUpdate), label, languageCode);
					}
				}

				public static class EnableCortanaProactiveExperienceFlowprocessesforthisOrganization 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(EnableCortanaProactiveExperienceFlowprocessesforthisOrganization), label, languageCode);
					}
				}

				public static class EnableActiveInitialProductState 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(EnableActiveInitialProductState), label, languageCode);
					}
				}

				public static class DisplayCurrenciesUsing 
				{
					public const string Currencysymbol_1033 = "Currency symbol";
					public const string Currencycode_1033 = "Currency code";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(DisplayCurrenciesUsing), label, languageCode);
					}
				}

				public static class CurrencyFormatCode 
				{
					public const string _123_1033 = "$123";
					public const string _123_2_1033 = "123$";
					public const string _123_3_1033 = "$ 123";
					public const string _123_4_1033 = "123 $";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(CurrencyFormatCode), label, languageCode);
					}
				}

				public static class DateFormatCode 
				{

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(DateFormatCode), label, languageCode);
					}
				}

				public static class DefaultRecurrenceEndRangeType 
				{
					public const string NoEndDate_1033 = "No End Date";
					public const string NumberofOccurrences_1033 = "Number of Occurrences";
					public const string EndByDate_1033 = "End By Date";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(DefaultRecurrenceEndRangeType), label, languageCode);
					}
				}

				public static class IsSocialCaredisabled 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(IsSocialCaredisabled), label, languageCode);
					}
				}

				public static class Discountcalculationmethod 
				{
					public const string Lineitem_1033 = "Line item";
					public const string Perunit_1033 = "Per unit";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(Discountcalculationmethod), label, languageCode);
					}
				}

				public static class DisplayNavigationTour 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(DisplayNavigationTour), label, languageCode);
					}
				}

				public static class EmailConnectionChannel 
				{
					public const string ServerSideSynchronization_1033 = "Server-Side Synchronization";
					public const string MicrosoftDynamics365EmailRouter_1033 = "Microsoft Dynamics 365 Email Router";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(EmailConnectionChannel), label, languageCode);
					}
				}

				public static class UseEmailCorrelation 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(UseEmailCorrelation), label, languageCode);
					}
				}

				public static class EnableIntegrationwithBingMaps 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(EnableIntegrationwithBingMaps), label, languageCode);
					}
				}

				public static class EnableLearningPathAuthoring 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(EnableLearningPathAuthoring), label, languageCode);
					}
				}

				public static class EnableIntegrationwithMicrosoftFlow 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(EnableIntegrationwithMicrosoftFlow), label, languageCode);
					}
				}

				public static class EnablePricingOnCreate 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(EnablePricingOnCreate), label, languageCode);
					}
				}

				public static class EnableSmartMatching 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(EnableSmartMatching), label, languageCode);
					}
				}

				public static class Organizationsettingtoenforcereadonlyplugins 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(Organizationsettingtoenforcereadonlyplugins), label, languageCode);
					}
				}

				public static class FormatforFiscalPeriod 
				{
					public const string Quarter0_1033 = "Quarter {0}";
					public const string Q0_1033 = "Q{0}";
					public const string P0_1033 = "P{0}";
					public const string Month0_1033 = "Month {0}";
					public const string M0_1033 = "M{0}";
					public const string Semester0_1033 = "Semester {0}";
					public const string MonthName_1033 = "Month Name";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(FormatforFiscalPeriod), label, languageCode);
					}
				}

				public static class IsFiscalSettingsUpdated 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(IsFiscalSettingsUpdated), label, languageCode);
					}
				}

				public static class PrefixforFiscalYear 
				{
					public const string FY_1033 = "FY";
					public const string Empty_1033 = "";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(PrefixforFiscalYear), label, languageCode);
					}
				}

				public static class SuffixforFiscalYear 
				{
					public const string FY_1033 = "FY";
					public const string FiscalYear_1033 = " Fiscal Year";
					public const string Empty_1033 = "";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(SuffixforFiscalYear), label, languageCode);
					}
				}

				public static class FiscalYearFormatYear 
				{
					public const string YYYY_1033 = "YYYY";
					public const string YY_1033 = "YY";
					public const string GGYY_1033 = "GGYY";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(FiscalYearFormatYear), label, languageCode);
					}
				}

				public static class FullNameDisplayOrder 
				{
					public const string LastNameFirstName_1033 = "Last Name, First Name";
					public const string FirstName_1033 = "First Name";
					public const string LastNameFirstNameMiddleInitial_1033 = "Last Name, First Name, Middle Initial";
					public const string FirstNameMiddleInitialLastName_1033 = "First Name, Middle Initial, Last Name";
					public const string LastNameFirstNameMiddleName_1033 = "Last Name, First Name, Middle Name";
					public const string FirstNameMiddleNameLastName_1033 = "First Name, Middle Name, Last Name";
					public const string LastNamespaceFirstName_1033 = "Last Name, space, First Name";
					public const string LastNamenospaceFirstName_1033 = "Last Name, no space, First Name";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(FullNameDisplayOrder), label, languageCode);
					}
				}

				public static class GenerateAlertsForErrors 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(GenerateAlertsForErrors), label, languageCode);
					}
				}

				public static class GenerateAlertsForInformation 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(GenerateAlertsForInformation), label, languageCode);
					}
				}

				public static class GenerateAlertsForWarnings 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(GenerateAlertsForWarnings), label, languageCode);
					}
				}

				public static class IsGetStartedPaneContentEnabled 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(IsGetStartedPaneContentEnabled), label, languageCode);
					}
				}

				public static class IsAppendUrlParametersenabled 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(IsAppendUrlParametersenabled), label, languageCode);
					}
				}

				public static class IsCustomizableGlobalHelpenabled 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(IsCustomizableGlobalHelpenabled), label, languageCode);
					}
				}

				public static class GrantAccessToNetworkService 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(GrantAccessToNetworkService), label, languageCode);
					}
				}

				public static class IgnoreInternalEmail 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(IgnoreInternalEmail), label, languageCode);
					}
				}

				public static class EnableActionCardforthisOrganization 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(EnableActionCardforthisOrganization), label, languageCode);
					}
				}

				public static class EnableRelationshipAnalyticsforthisOrganization 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(EnableRelationshipAnalyticsforthisOrganization), label, languageCode);
					}
				}

				public static class IsApplicationModeEnabled 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(IsApplicationModeEnabled), label, languageCode);
					}
				}

				public static class IsAttachmentSyncEnabled 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(IsAttachmentSyncEnabled), label, languageCode);
					}
				}

				public static class IsAssignedTasksSyncEnabled 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(IsAssignedTasksSyncEnabled), label, languageCode);
					}
				}

				public static class IsAuditingEnabled 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(IsAuditingEnabled), label, languageCode);
					}
				}

				public static class EnableAutoCaptureforthisOrganization 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(EnableAutoCaptureforthisOrganization), label, languageCode);
					}
				}

				public static class AutoSaveEnabled 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(AutoSaveEnabled), label, languageCode);
					}
				}

				public static class IsConflictDetectionforMobileClientenabled 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(IsConflictDetectionforMobileClientenabled), label, languageCode);
					}
				}

				public static class IsMailingAddressSyncEnabled 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(IsMailingAddressSyncEnabled), label, languageCode);
					}
				}

				public static class Enableordisablecountrycodeselection 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(Enableordisablecountrycodeselection), label, languageCode);
					}
				}

				public static class IsDelegationAccessEnabled 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(IsDelegationAccessEnabled), label, languageCode);
					}
				}

				public static class EnableActionHubforthisOrganization 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(EnableActionHubforthisOrganization), label, languageCode);
					}
				}

				public static class IsOrganizationDisabled 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(IsOrganizationDisabled), label, languageCode);
					}
				}

				public static class IsDuplicateDetectionEnabled 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(IsDuplicateDetectionEnabled), label, languageCode);
					}
				}

				public static class IsDuplicateDetectionEnabledForImport 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(IsDuplicateDetectionEnabledForImport), label, languageCode);
					}
				}

				public static class IsDuplicateDetectionEnabledForOfflineSynchronization 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(IsDuplicateDetectionEnabledForOfflineSynchronization), label, languageCode);
					}
				}

				public static class IsDuplicateDetectionEnabledforOnlineCreateUpdate 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(IsDuplicateDetectionEnabledforOnlineCreateUpdate), label, languageCode);
					}
				}

				public static class Allowtrackingrecipientactivityonsentemails 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(Allowtrackingrecipientactivityonsentemails), label, languageCode);
					}
				}

				public static class IsEmailServerProfileContentFilteringEnabled 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(IsEmailServerProfileContentFilteringEnabled), label, languageCode);
					}
				}

				public static class optionsetvaluesforisenabledforallroles 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(optionsetvaluesforisenabledforallroles), label, languageCode);
					}
				}

				public static class Enableexternalsearchdatasyncing 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(Enableexternalsearchdatasyncing), label, languageCode);
					}
				}

				public static class IsFiscalPeriodMonthly 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(IsFiscalPeriodMonthly), label, languageCode);
					}
				}

				public static class Automaticallycreatefolders 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(Automaticallycreatefolders), label, languageCode);
					}
				}

				public static class IsFolderBasedTrackingEnabled 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(IsFolderBasedTrackingEnabled), label, languageCode);
					}
				}

				public static class EnableFulltextsearchforQuickFind 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(EnableFulltextsearchforQuickFind), label, languageCode);
					}
				}

				public static class EnableHierarchicalSecurityModel 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(EnableHierarchicalSecurityModel), label, languageCode);
					}
				}

				public static class IsMailboxForcedUnlockingEnabled 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(IsMailboxForcedUnlockingEnabled), label, languageCode);
					}
				}

				public static class IsMailboxKeepAliveEnabled 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(IsMailboxKeepAliveEnabled), label, languageCode);
					}
				}

				public static class IsMobileClientOnDemandSyncenabled 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(IsMobileClientOnDemandSyncenabled), label, languageCode);
					}
				}

				public static class EnableMobileOfflineforthisOrganization 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(EnableMobileOfflineforthisOrganization), label, languageCode);
					}
				}

				public static class EnableOfficeGraphforthisOrganization 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(EnableOfficeGraphforthisOrganization), label, languageCode);
					}
				}

				public static class EnableOneDriveforthisOrganization 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(EnableOneDriveforthisOrganization), label, languageCode);
					}
				}

				public static class PresenceEnabled 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(PresenceEnabled), label, languageCode);
					}
				}

				public static class EnablePreviewActionCardfeatureforthisOrganization 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(EnablePreviewActionCardfeatureforthisOrganization), label, languageCode);
					}
				}

				public static class EnableAutoCaptureforthisOrganizationatPreviewSettings 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(EnableAutoCaptureforthisOrganizationatPreviewSettings), label, languageCode);
					}
				}

				public static class AllowsPreviewForEmailMonitoring 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(AllowsPreviewForEmailMonitoring), label, languageCode);
					}
				}

				public static class EnableRelationshipInsightsforthisOrganization 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(EnableRelationshipInsightsforthisOrganization), label, languageCode);
					}
				}

				public static class Resourcebookingsynchronizationenabled 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(Resourcebookingsynchronizationenabled), label, languageCode);
					}
				}

				public static class IsSalesOrderIntegrationEnabled 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(IsSalesOrderIntegrationEnabled), label, languageCode);
					}
				}

				public static class IsUserAccessAuditingEnabled 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(IsUserAccessAuditingEnabled), label, languageCode);
					}
				}

				public static class ISVIntegrationMode 
				{
					public const string None_1033 = "None";
					public const string Web_1033 = "Web";
					public const string OutlookWorkstationClient_1033 = "Outlook Workstation Client";
					public const string WebOutlookWorkstationClient_1033 = "Web; Outlook Workstation Client";
					public const string OutlookLaptopClient_1033 = "Outlook Laptop Client";
					public const string WebOutlookLaptopClient_1033 = "Web; Outlook Laptop Client";
					public const string Outlook_1033 = "Outlook";
					public const string All_1033 = "All";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(ISVIntegrationMode), label, languageCode);
					}
				}

				public static class NegativeFormat 
				{
					public const string Brackets_1033 = "Brackets";
					public const string Dash_1033 = "Dash";
					public const string DashplusSpace_1033 = "Dash plus Space";
					public const string TrailingDash_1033 = "Trailing Dash";
					public const string SpaceplusTrailingDash_1033 = "Space plus Trailing Dash";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(NegativeFormat), label, languageCode);
					}
				}

				public static class NotifyMailboxOwnerOfEmailServerLevelAlerts 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(NotifyMailboxOwnerOfEmailServerLevelAlerts), label, languageCode);
					}
				}

				public static class EnableOfficeAppsAutoDeploymentforthisOrganization 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(EnableOfficeAppsAutoDeploymentforthisOrganization), label, languageCode);
					}
				}

				public static class EnableOOBPricecalculation 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(EnableOOBPricecalculation), label, languageCode);
					}
				}

				public static class EnableOrgInsightsforthisOrganization 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(EnableOrgInsightsforthisOrganization), label, languageCode);
					}
				}

				public static class PluginTraceLogSetting 
				{
					public const string Off_1033 = "Off";
					public const string Exception_1033 = "Exception";
					public const string All_1033 = "All";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(PluginTraceLogSetting), label, languageCode);
					}
				}

				public static class EnablePowerBIfeatureforthisOrganization 
				{
					public const string Enable_1033 = "Enable";
					public const string Disable_1033 = "Disable";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(EnablePowerBIfeatureforthisOrganization), label, languageCode);
					}
				}

				public static class EnableProductRecommendationsforthisOrganization 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(EnableProductRecommendationsforthisOrganization), label, languageCode);
					}
				}

				public static class QuickFindRecordLimitEnabled 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(QuickFindRecordLimitEnabled), label, languageCode);
					}
				}

				public static class RenderSecureFrameForEmail 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(RenderSecureFrameForEmail), label, languageCode);
					}
				}

				public static class ReportScriptErrors 
				{
					public const string NopreferenceforsendinganerrorreporttoMicrosoftaboutMicrosoftDynamics365_1033 = "No preference for sending an error report to Microsoft about Microsoft Dynamics 3" +
    "65";
					public const string AskmeforpermissiontosendanerrorreporttoMicrosoft_1033 = "Ask me for permission to send an error report to Microsoft";
					public const string AutomaticallysendanerrorreporttoMicrosoftwithoutaskingmeforpermission_1033 = "Automatically send an error report to Microsoft without asking me for permission";
					public const string NeversendanerrorreporttoMicrosoftaboutMicrosoftDynamics365_1033 = "Never send an error report to Microsoft about Microsoft Dynamics 365";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(ReportScriptErrors), label, languageCode);
					}
				}

				public static class IsApprovalForQueueEmailRequired 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(IsApprovalForQueueEmailRequired), label, languageCode);
					}
				}

				public static class IsApprovalForUserEmailRequired 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(IsApprovalForUserEmailRequired), label, languageCode);
					}
				}

				public static class RestrictStatusUpdate 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(RestrictStatusUpdate), label, languageCode);
					}
				}

				public static class ChooseSharePointDeploymentType 
				{
					public const string Online_1033 = "Online";
					public const string OnPremises_1033 = "On-Premises";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(ChooseSharePointDeploymentType), label, languageCode);
					}
				}

				public static class ShareToPreviousOwnerOnAssign 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(ShareToPreviousOwnerOnAssign), label, languageCode);
					}
				}

				public static class ShowKBArticledeprecationmessagetouser 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(ShowKBArticledeprecationmessagetouser), label, languageCode);
					}
				}

				public static class ShowWeekNumber 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(ShowWeekNumber), label, languageCode);
					}
				}

				public static class SocialInsightsEnabled 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(SocialInsightsEnabled), label, languageCode);
					}
				}

				public static class SocialInsightsTermsofUse 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(SocialInsightsTermsofUse), label, languageCode);
					}
				}

				public static class IsSQMEnabled 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(IsSQMEnabled), label, languageCode);
					}
				}

				public static class IsSLAsuppressed 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(IsSLAsuppressed), label, languageCode);
					}
				}

				public static class EnableTaskFlowprocessesforthisOrganization 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(EnableTaskFlowprocessesforthisOrganization), label, languageCode);
					}
				}

				public static class EnableTextAnalyticsforthisOrganization 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(EnableTextAnalyticsforthisOrganization), label, languageCode);
					}
				}

				public static class TimeFormatCode 
				{

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(TimeFormatCode), label, languageCode);
					}
				}

				public static class SetToccbccfieldsasunresolvedifmultiplematchesarefound 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(SetToccbccfieldsasunresolvedifmultiplematchesarefound), label, languageCode);
					}
				}

				public static class UseInbuiltRuleForDefaultPricelistSelection 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(UseInbuiltRuleForDefaultPricelistSelection), label, languageCode);
					}
				}

				public static class LegacyFormRendering 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(LegacyFormRendering), label, languageCode);
					}
				}

				public static class Usepositionhierarchy 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(Usepositionhierarchy), label, languageCode);
					}
				}

				public static class UseReadOptimizedForm 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(UseReadOptimizedForm), label, languageCode);
					}
				}

				public static class UserSkypeProtocol 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(UserSkypeProtocol), label, languageCode);
					}
				}

				public static class WeekStartDayCode 
				{

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(WeekStartDayCode), label, languageCode);
					}
				}

				public static class YammerOAuthAccessTokenExpired 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(YammerOAuthAccessTokenExpired), label, languageCode);
					}
				}

				public static class InternalUseOnly 
				{
					public const string Public_1033 = "Public";
					public const string Private_1033 = "Private";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(InternalUseOnly), label, languageCode);
					}
				}

			}

			#endregion
		}

		#endregion

		#region Fields

		public static class Fields
		{
			#region Logical names

			public const string ACITenantURL = "aciwebendpointurl";
			public const string AcknowledgementTemplate = "acknowledgementtemplateid";
			public const string AllowAddressBookSynchronization = "allowaddressbooksyncs";
			public const string AllowAutomaticResponseCreation = "allowautoresponsecreation";
			public const string AllowAutomaticUnsubscribe = "allowautounsubscribe";
			public const string AllowAutomaticUnsubscribeAcknowledgement = "allowautounsubscribeacknowledgement";
			public const string AllowOutlookClientMessageBarAdvertisement = "allowclientmessagebarad";
			public const string AllowEntityLevelAuditing = "allowentityonlyaudit";
			public const string AllowMarketingEmailExecution = "allowmarketingemailexecution";
			public const string AllowOfflineScheduledSynchronization = "allowofflinescheduledsyncs";
			public const string AllowScheduledSynchronization = "allowoutlookscheduledsyncs";
			public const string AllowUnresolvedAddressEmailSend = "allowunresolvedpartiesonemailsend";
			public const string AllowUserFormModePreference = "allowuserformmodepreference";
			public const string Allowtheshowingtabletapplicationnotificationbarsinabrowser = "allowusersseeappdownloadmessage";
			public const string AllowExporttoExcel = "allowwebexcelexport";
			public const string AMDesignator = "amdesignator";
			public const string EnableAppDesignerExperienceforthisOrganization = "appdesignerexperienceenabled";
			public const string AutoApplyDefaultEntitlementonCaseCreate = "autoapplydefaultoncasecreate";
			public const string AutoApplyDefaultEntitlementonCaseUpdate = "autoapplydefaultoncaseupdate";
			public const string IsAutoapplySLAAfterManuallyOverriding = "autoapplysla";
			public const string Forinternaluseonly_AzureSchedulerJobCollectionName = "azureschedulerjobcollectionname";
			public const string Currency = "basecurrencyid";
			public const string BaseCurrencyPrecision = "basecurrencyprecision";
			public const string BaseCurrencySymbol = "basecurrencysymbol";
			public const string BingMapsAPIKey = "bingmapsapikey";
			public const string BlockAttachments = "blockedattachments";
			public const string BulkOperationPrefix = "bulkoperationprefix";
			public const string BusinessClosureCalendar = "businessclosurecalendarid";
			public const string CalendarType = "calendartype";
			public const string CampaignPrefix = "campaignprefix";
			public const string CascadeStatusUpdate = "cascadestatusupdate";
			public const string CasePrefix = "caseprefix";
			public const string CategoryPrefix = "categoryprefix";
			public const string ContractPrefix = "contractprefix";
			public const string EnableCortanaProactiveExperienceFlowprocessesforthisOrganization = "cortanaproactiveexperienceenabled";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedByDelegate = "createdonbehalfby";
			public const string EnableActiveInitialProductState = "createproductswithoutparentinactivestate";
			public const string CurrencyDecimalPrecision = "currencydecimalprecision";
			public const string DisplayCurrenciesUsing = "currencydisplayoption";
			public const string CurrencyFormatCode = "currencyformatcode";
			public const string CurrencySymbol = "currencysymbol";
			public const string CurrentBulkOperationNumber = "currentbulkoperationnumber";
			public const string CurrentCampaignNumber = "currentcampaignnumber";
			public const string CurrentCaseNumber = "currentcasenumber";
			public const string CurrentCategoryNumber = "currentcategorynumber";
			public const string CurrentContractNumber = "currentcontractnumber";
			public const string CurrentImportSequenceNumber = "currentimportsequencenumber";
			public const string CurrentInvoiceNumber = "currentinvoicenumber";
			public const string CurrentKnowledgeArticleNumber = "currentkanumber";
			public const string CurrentArticleNumber = "currentkbnumber";
			public const string CurrentOrderNumber = "currentordernumber";
			public const string CurrentParsedTableNumber = "currentparsedtablenumber";
			public const string CurrentQuoteNumber = "currentquotenumber";
			public const string DateFormatCode = "dateformatcode";
			public const string DateFormatString = "dateformatstring";
			public const string DateSeparator = "dateseparator";
			public const string MaxvalueofDayssincerecordlastmodified = "dayssincerecordlastmodifiedmaxvalue";
			public const string DecimalSymbol = "decimalsymbol";
			public const string DefaultCountryCode = "defaultcountrycode";
			public const string Nameofthedefaultapp = "defaultcrmcustomname";
			public const string EmailServerProfile = "defaultemailserverprofileid";
			public const string DefaultEmailSettings = "defaultemailsettings";
			public const string DefaultMobileOfflineProfile = "defaultmobileofflineprofileid";
			public const string DefaultRecurrenceEndRangeType = "defaultrecurrenceendrangetype";
			public const string DefaultThemeData = "defaultthemedata";
			public const string DelegatedAdmin = "delegatedadminuserid";
			public const string DisabledReason = "disabledreason";
			public const string IsSocialCaredisabled = "disablesocialcare";
			public const string Discountcalculationmethod = "discountcalculationmethod";
			public const string DisplayNavigationTour = "displaynavigationtour";
			public const string EmailConnectionChannel = "emailconnectionchannel";
			public const string UseEmailCorrelation = "emailcorrelationenabled";
			public const string EmailSendPollingFrequency = "emailsendpollingperiod";
			public const string EnableIntegrationwithBingMaps = "enablebingmapsintegration";
			public const string EnableLearningPathAuthoring = "enablelpauthoring";
			public const string EnableIntegrationwithMicrosoftFlow = "enablemicrosoftflowintegration";
			public const string EnablePricingOnCreate = "enablepricingoncreate";
			public const string EnableSmartMatching = "enablesmartmatching";
			public const string Organizationsettingtoenforcereadonlyplugins = "enforcereadonlyplugins";
			public const string EntityImageId = "entityimageid";
			public const string DaystoExpireChangeTrackingDeletedRecords = "expirechangetrackingindays";
			public const string DaystoExpireSubscriptions = "expiresubscriptionsindays";
			public const string ExternalBaseURL = "externalbaseurl";
			public const string ExternalPartyEnabledEntitiescorrelationKeys = "externalpartycorrelationkeys";
			public const string ExternalPartyEnabledEntitiesSettingsForinternaluseonly = "externalpartyentitysettings";
			public const string FeatureSet = "featureset";
			public const string FiscalCalendarStart = "fiscalcalendarstart";
			public const string FiscalPeriodFormat = "fiscalperiodformat";
			public const string FormatforFiscalPeriod = "fiscalperiodformatperiod";
			public const string FiscalPeriodType = "fiscalperiodtype";
			public const string IsFiscalSettingsUpdated = "fiscalsettingsupdated";
			public const string FiscalYearDisplay = "fiscalyeardisplaycode";
			public const string FiscalYearFormat = "fiscalyearformat";
			public const string PrefixforFiscalYear = "fiscalyearformatprefix";
			public const string SuffixforFiscalYear = "fiscalyearformatsuffix";
			public const string FiscalYearFormatYear = "fiscalyearformatyear";
			public const string FiscalYearPeriodConnector = "fiscalyearperiodconnect";
			public const string FullNameDisplayOrder = "fullnameconventioncode";
			public const string FutureExpansionWindow = "futureexpansionwindow";
			public const string GenerateAlertsForErrors = "generatealertsforerrors";
			public const string GenerateAlertsForInformation = "generatealertsforinformation";
			public const string GenerateAlertsForWarnings = "generatealertsforwarnings";
			public const string IsGetStartedPaneContentEnabled = "getstartedpanecontentenabled";
			public const string IsAppendUrlParametersenabled = "globalappendurlparametersenabled";
			public const string GlobalHelpURL = "globalhelpurl";
			public const string IsCustomizableGlobalHelpenabled = "globalhelpurlenabled";
			public const string RollupExpirationTimeforGoal = "goalrollupexpirytime";
			public const string AutomaticRollupFrequencyforGoal = "goalrollupfrequency";
			public const string GrantAccessToNetworkService = "grantaccesstonetworkservice";
			public const string HashDeltaSubjectCount = "hashdeltasubjectcount";
			public const string HashFilterKeywords = "hashfilterkeywords";
			public const string HashMaxCount = "hashmaxcount";
			public const string HashMinAddressCount = "hashminaddresscount";
			public const string HighcontrastThemeData = "highcontrastthemedata";
			public const string IgnoreInternalEmail = "ignoreinternalemail";
			public const string ExchangeEmailRetrievalBatchSize = "incomingemailexchangeemailretrievalbatchsize";
			public const string InitialVersion = "initialversion";
			public const string IntegrationUser = "integrationuserid";
			public const string InvoicePrefix = "invoiceprefix";
			public const string EnableActionCardforthisOrganization = "isactioncardenabled";
			public const string EnableRelationshipAnalyticsforthisOrganization = "isactivityanalysisenabled";
			public const string IsApplicationModeEnabled = "isappmode";
			public const string IsAttachmentSyncEnabled = "isappointmentattachmentsyncenabled";
			public const string IsAssignedTasksSyncEnabled = "isassignedtaskssyncenabled";
			public const string IsAuditingEnabled = "isauditenabled";
			public const string EnableAutoCaptureforthisOrganization = "isautodatacaptureenabled";
			public const string AutoSaveEnabled = "isautosaveenabled";
			public const string IsConflictDetectionforMobileClientenabled = "isconflictdetectionenabledformobileclient";
			public const string IsMailingAddressSyncEnabled = "iscontactmailingaddresssyncenabled";
			public const string Enableordisablecountrycodeselection = "isdefaultcountrycodecheckenabled";
			public const string IsDelegationAccessEnabled = "isdelegateaccessenabled";
			public const string EnableActionHubforthisOrganization = "isdelveactionhubintegrationenabled";
			public const string IsOrganizationDisabled = "isdisabled";
			public const string IsDuplicateDetectionEnabled = "isduplicatedetectionenabled";
			public const string IsDuplicateDetectionEnabledForImport = "isduplicatedetectionenabledforimport";
			public const string IsDuplicateDetectionEnabledForOfflineSynchronization = "isduplicatedetectionenabledforofflinesync";
			public const string IsDuplicateDetectionEnabledforOnlineCreateUpdate = "isduplicatedetectionenabledforonlinecreateupdate";
			public const string Allowtrackingrecipientactivityonsentemails = "isemailmonitoringallowed";
			public const string IsEmailServerProfileContentFilteringEnabled = "isemailserverprofilecontentfilteringenabled";
			public const string optionsetvaluesforisenabledforallroles = "isenabledforallroles";
			public const string Enableexternalsearchdatasyncing = "isexternalsearchindexenabled";
			public const string IsFiscalPeriodMonthly = "isfiscalperiodmonthbased";
			public const string Automaticallycreatefolders = "isfolderautocreatedonsp";
			public const string IsFolderBasedTrackingEnabled = "isfolderbasedtrackingenabled";
			public const string EnableFulltextsearchforQuickFind = "isfulltextsearchenabled";
			public const string EnableHierarchicalSecurityModel = "ishierarchicalsecuritymodelenabled";
			public const string IsMailboxForcedUnlockingEnabled = "ismailboxforcedunlockingenabled";
			public const string IsMailboxKeepAliveEnabled = "ismailboxinactivebackoffenabled";
			public const string IsMobileClientOnDemandSyncenabled = "ismobileclientondemandsyncenabled";
			public const string EnableMobileOfflineforthisOrganization = "ismobileofflineenabled";
			public const string EnableOfficeGraphforthisOrganization = "isofficegraphenabled";
			public const string EnableOneDriveforthisOrganization = "isonedriveenabled";
			public const string PresenceEnabled = "ispresenceenabled";
			public const string EnablePreviewActionCardfeatureforthisOrganization = "ispreviewenabledforactioncard";
			public const string EnableAutoCaptureforthisOrganizationatPreviewSettings = "ispreviewforautocaptureenabled";
			public const string AllowsPreviewForEmailMonitoring = "ispreviewforemailmonitoringallowed";
			public const string EnableRelationshipInsightsforthisOrganization = "isrelationshipinsightsenabled";
			public const string Resourcebookingsynchronizationenabled = "isresourcebookingexchangesyncenabled";
			public const string IsSalesOrderIntegrationEnabled = "issopintegrationenabled";
			public const string IsUserAccessAuditingEnabled = "isuseraccessauditenabled";
			public const string ISVIntegrationMode = "isvintegrationcode";
			public const string KnowledgeArticlePrefix = "kaprefix";
			public const string ArticlePrefix = "kbprefix";
			public const string KnowledgeManagementSettings = "kmsettings";
			public const string Language = "languagecode";
			public const string Locale = "localeid";
			public const string LongDateFormat = "longdateformatcode";
			public const string LowerThresholdForMailboxIntermittentIssue = "mailboxintermittentissueminrange";
			public const string LowerThresholdForMailboxPermanentIssue = "mailboxpermanentissueminrange";
			public const string MaxAppointmentDuration = "maxappointmentdurationdays";
			public const string Maximumnumberofconditionsallowedformobileofflinefilters = "maxconditionsformobileofflinefilters";
			public const string Maximumdepthforhierarchysecuritypropagation = "maxdepthforhierarchicalsecuritymodel";
			public const string MaxFolderBasedTrackingMappings = "maxfolderbasedtrackingmappings";
			public const string Maximumactivebusinessprocessflowsperentity = "maximumactivebusinessprocessflowsallowedperentity";
			public const string ProductPropertiesItemLimit = "maximumdynamicpropertiesallowed";
			public const string MaximumnumberofactiveSLAallowedperentityinonline = "maximumentitieswithactivesla";
			public const string MaximumnumberofactiveSLAKPIallowedperentityinonline = "maximumslakpiperentitywithactivesla";
			public const string MaxTrackingNumber = "maximumtrackingnumber";
			public const string BundleItemLimit = "maxproductsinbundle";
			public const string MaxRecordsForExcelExport = "maxrecordsforexporttoexcel";
			public const string MaxRecordsFilterSelection = "maxrecordsforlookupfilters";
			public const string MaxsupportedIEversion = "maxsupportedinternetexplorerversion";
			public const string MaxUploadFileSize = "maxuploadfilesize";
			public const string MaxNoOfMailboxesToEnableForVerboseLogging = "maxverboseloggingmailbox";
			public const string Maximumnumberofsynccyclesforwhichverboseloggingwillbeenabledbydefault = "maxverboseloggingsynccycles";
			public const string MinAddressSynchronizationFrequency = "minaddressbooksyncinterval";
			public const string MinOfflineSynchronizationFrequency = "minofflinesyncinterval";
			public const string MinSynchronizationFrequency = "minoutlooksyncinterval";
			public const string Minimumnumberofuserlicenserequiredformobileofflineservicebyproductionprevieworganization = "mobileofflineminlicenseprod";
			public const string Minimumnumberofuserlicenserequiredformobileofflineservicebytrialorganization = "mobileofflineminlicensetrial";
			public const string Syncintervalformobileoffline = "mobileofflinesyncinterval";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedByDelegate = "modifiedonbehalfby";
			public const string OrganizationName = "name";
			public const string NegativeCurrencyFormat = "negativecurrencyformatcode";
			public const string NegativeFormat = "negativeformatcode";
			public const string NextTrackingNumber = "nexttrackingnumber";
			public const string NotifyMailboxOwnerOfEmailServerLevelAlerts = "notifymailboxownerofemailserverlevelalerts";
			public const string NumberFormat = "numberformat";
			public const string NumberGroupingFormat = "numbergroupformat";
			public const string NumberSeparator = "numberseparator";
			public const string EnableOfficeAppsAutoDeploymentforthisOrganization = "officeappsautodeploymentenabled";
			public const string TheurltoopentheDelve = "officegraphdelveurl";
			public const string EnableOOBPricecalculation = "oobpricecalculationenabled";
			public const string OrderPrefix = "orderprefix";
			public const string OrganizationId = "organizationid";
			public const string OrganizationDatabaseOrganizationSettings = "orgdborgsettings";
			public const string EnableOrgInsightsforthisOrganization = "orginsightsenabled";
			public const string ParsedTableColumnPrefix = "parsedtablecolumnprefix";
			public const string ParsedTablePrefix = "parsedtableprefix";
			public const string PastExpansionWindow = "pastexpansionwindow";
			public const string Picture = "picture";
			public const string PinpointLanguageCode = "pinpointlanguagecode";
			public const string PluginTraceLogSetting = "plugintracelogsetting";
			public const string PMDesignator = "pmdesignator";
			public const string Forinternaluseonly_PostMessageWhitelistDomains = "postmessagewhitelistdomains";
			public const string EnablePowerBIfeatureforthisOrganization = "powerbifeatureenabled";
			public const string PricingDecimalPrecision = "pricingdecimalprecision";
			public const string PrivacyStatementURL = "privacystatementurl";
			public const string PrivilegeUserGroup = "privilegeusergroupid";
			public const string PrivilegeReportingGroup = "privreportinggroupid";
			public const string PrivilegeReportingGroupName = "privreportinggroupname";
			public const string EnableProductRecommendationsforthisOrganization = "productrecommendationsenabled";
			public const string QuickFindRecordLimitEnabled = "quickfindrecordlimitenabled";
			public const string QuotePrefix = "quoteprefix";
			public const string RecurrenceDefaultNumberofOccurrences = "recurrencedefaultnumberofoccurrences";
			public const string RecurrenceExpansionJobBatchInterval = "recurrenceexpansionjobbatchinterval";
			public const string RecurrenceExpansionOnDemandJobBatchSize = "recurrenceexpansionjobbatchsize";
			public const string RecurrenceExpansionSynchronizationCreateMaximum = "recurrenceexpansionsynchcreatemax";
			public const string ReferenceSiteMapXML = "referencesitemapxml";
			public const string RenderSecureFrameForEmail = "rendersecureiframeforemail";
			public const string ReportingGroup = "reportinggroupid";
			public const string ReportingGroupName = "reportinggroupname";
			public const string ReportScriptErrors = "reportscripterrors";
			public const string IsApprovalForQueueEmailRequired = "requireapprovalforqueueemail";
			public const string IsApprovalForUserEmailRequired = "requireapprovalforuseremail";
			public const string RestrictStatusUpdate = "restrictstatusupdate";
			public const string ErrorstatusofRelationshipInsightsprovisioning = "rierrorstatus";
			public const string SampleDataImport = "sampledataimportid";
			public const string CustomizationNamePrefix = "schemanameprefix";
			public const string ChooseSharePointDeploymentType = "sharepointdeploymenttype";
			public const string ShareToPreviousOwnerOnAssign = "sharetopreviousowneronassign";
			public const string ShowKBArticledeprecationmessagetouser = "showkbarticledeprecationnotification";
			public const string ShowWeekNumber = "showweeknumber";
			public const string CRMForOutlookDownloadURL = "signupoutlookdownloadfwlink";
			public const string SiteMapXML = "sitemapxml";
			public const string SLApausestates = "slapausestates";
			public const string SocialInsightsEnabled = "socialinsightsenabled";
			public const string SocialInsightsinstanceidentifier = "socialinsightsinstance";
			public const string SocialInsightsTermsofUse = "socialinsightstermsaccepted";
			public const string Sort = "sortid";
			public const string SQLAccessGroup = "sqlaccessgroupid";
			public const string SQLAccessGroupName = "sqlaccessgroupname";
			public const string IsSQMEnabled = "sqmenabled";
			public const string SupportUser = "supportuserid";
			public const string IsSLAsuppressed = "suppresssla";
			public const string SystemUser = "systemuserid";
			public const string AutoTagMaxCycles = "tagmaxaggressivecycles";
			public const string AutoTagInterval = "tagpollingperiod";
			public const string EnableTaskFlowprocessesforthisOrganization = "taskbasedflowenabled";
			public const string EnableTextAnalyticsforthisOrganization = "textanalyticsenabled";
			public const string TimeFormatCode = "timeformatcode";
			public const string TimeFormatString = "timeformatstring";
			public const string TimeSeparator = "timeseparator";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string TokenExpirationDuration = "tokenexpiry";
			public const string TrackingPrefix = "trackingprefix";
			public const string TrackingTokenBase = "trackingtokenidbase";
			public const string TrackingTokenDigits = "trackingtokeniddigits";
			public const string UniqueStringLength = "uniquespecifierlength";
			public const string SetToccbccfieldsasunresolvedifmultiplematchesarefound = "unresolveemailaddressifmultiplematch";
			public const string UseInbuiltRuleForDefaultPricelistSelection = "useinbuiltrulefordefaultpricelistselection";
			public const string LegacyFormRendering = "uselegacyrendering";
			public const string Usepositionhierarchy = "usepositionhierarchy";
			public const string UserAuthenticationAuditingInterval = "useraccessauditinginterval";
			public const string UseReadOptimizedForm = "usereadform";
			public const string UserGroup = "usergroupid";
			public const string UserSkypeProtocol = "useskypeprotocol";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string V3CalloutHash = "v3calloutconfighash";
			public const string VersionNumber = "versionnumber";
			public const string Webresourcehash = "webresourcehash";
			public const string WeekStartDayCode = "weekstartdaycode";
			public const string ForInternaluseonly = "widgetproperties";
			public const string YammerGroupId = "yammergroupid";
			public const string YammerNetworkPermalink = "yammernetworkpermalink";
			public const string YammerOAuthAccessTokenExpired = "yammeroauthaccesstokenexpired";
			public const string InternalUseOnly = "yammerpostmethod";
			public const string YearStartWeekCode = "yearstartweekcode";

			#endregion

			#region Schema names

			public static class Schema
			{
				public const string ACITenantURL = "ACIWebEndpointUrl";
				public const string AcknowledgementTemplate = "AcknowledgementTemplateId";
				public const string AllowAddressBookSynchronization = "AllowAddressBookSyncs";
				public const string AllowAutomaticResponseCreation = "AllowAutoResponseCreation";
				public const string AllowAutomaticUnsubscribe = "AllowAutoUnsubscribe";
				public const string AllowAutomaticUnsubscribeAcknowledgement = "AllowAutoUnsubscribeAcknowledgement";
				public const string AllowOutlookClientMessageBarAdvertisement = "AllowClientMessageBarAd";
				public const string AllowEntityLevelAuditing = "AllowEntityOnlyAudit";
				public const string AllowMarketingEmailExecution = "AllowMarketingEmailExecution";
				public const string AllowOfflineScheduledSynchronization = "AllowOfflineScheduledSyncs";
				public const string AllowScheduledSynchronization = "AllowOutlookScheduledSyncs";
				public const string AllowUnresolvedAddressEmailSend = "AllowUnresolvedPartiesOnEmailSend";
				public const string AllowUserFormModePreference = "AllowUserFormModePreference";
				public const string Allowtheshowingtabletapplicationnotificationbarsinabrowser = "AllowUsersSeeAppdownloadMessage";
				public const string AllowExporttoExcel = "AllowWebExcelExport";
				public const string AMDesignator = "AMDesignator";
				public const string EnableAppDesignerExperienceforthisOrganization = "AppDesignerExperienceEnabled";
				public const string AutoApplyDefaultEntitlementonCaseCreate = "AutoApplyDefaultonCaseCreate";
				public const string AutoApplyDefaultEntitlementonCaseUpdate = "AutoApplyDefaultonCaseUpdate";
				public const string IsAutoapplySLAAfterManuallyOverriding = "AutoApplySLA";
				public const string Forinternaluseonly_AzureSchedulerJobCollectionName = "AzureSchedulerJobCollectionName";
				public const string Currency = "BaseCurrencyId";
				public const string BaseCurrencyPrecision = "BaseCurrencyPrecision";
				public const string BaseCurrencySymbol = "BaseCurrencySymbol";
				public const string BingMapsAPIKey = "BingMapsApiKey";
				public const string BlockAttachments = "BlockedAttachments";
				public const string BulkOperationPrefix = "BulkOperationPrefix";
				public const string BusinessClosureCalendar = "BusinessClosureCalendarId";
				public const string CalendarType = "CalendarType";
				public const string CampaignPrefix = "CampaignPrefix";
				public const string CascadeStatusUpdate = "CascadeStatusUpdate";
				public const string CasePrefix = "CasePrefix";
				public const string CategoryPrefix = "CategoryPrefix";
				public const string ContractPrefix = "ContractPrefix";
				public const string EnableCortanaProactiveExperienceFlowprocessesforthisOrganization = "CortanaProactiveExperienceEnabled";
				public const string CreatedBy = "CreatedBy";
				public const string CreatedOn = "CreatedOn";
				public const string CreatedByDelegate = "CreatedOnBehalfBy";
				public const string EnableActiveInitialProductState = "CreateProductsWithoutParentInActiveState";
				public const string CurrencyDecimalPrecision = "CurrencyDecimalPrecision";
				public const string DisplayCurrenciesUsing = "CurrencyDisplayOption";
				public const string CurrencyFormatCode = "CurrencyFormatCode";
				public const string CurrencySymbol = "CurrencySymbol";
				public const string CurrentBulkOperationNumber = "CurrentBulkOperationNumber";
				public const string CurrentCampaignNumber = "CurrentCampaignNumber";
				public const string CurrentCaseNumber = "CurrentCaseNumber";
				public const string CurrentCategoryNumber = "CurrentCategoryNumber";
				public const string CurrentContractNumber = "CurrentContractNumber";
				public const string CurrentImportSequenceNumber = "CurrentImportSequenceNumber";
				public const string CurrentInvoiceNumber = "CurrentInvoiceNumber";
				public const string CurrentKnowledgeArticleNumber = "CurrentKaNumber";
				public const string CurrentArticleNumber = "CurrentKbNumber";
				public const string CurrentOrderNumber = "CurrentOrderNumber";
				public const string CurrentParsedTableNumber = "CurrentParsedTableNumber";
				public const string CurrentQuoteNumber = "CurrentQuoteNumber";
				public const string DateFormatCode = "DateFormatCode";
				public const string DateFormatString = "DateFormatString";
				public const string DateSeparator = "DateSeparator";
				public const string MaxvalueofDayssincerecordlastmodified = "DaysSinceRecordLastModifiedMaxValue";
				public const string DecimalSymbol = "DecimalSymbol";
				public const string DefaultCountryCode = "DefaultCountryCode";
				public const string Nameofthedefaultapp = "DefaultCrmCustomName";
				public const string EmailServerProfile = "DefaultEmailServerProfileId";
				public const string DefaultEmailSettings = "DefaultEmailSettings";
				public const string DefaultMobileOfflineProfile = "DefaultMobileOfflineProfileId";
				public const string DefaultRecurrenceEndRangeType = "DefaultRecurrenceEndRangeType";
				public const string DefaultThemeData = "DefaultThemeData";
				public const string DelegatedAdmin = "DelegatedAdminUserId";
				public const string DisabledReason = "DisabledReason";
				public const string IsSocialCaredisabled = "DisableSocialCare";
				public const string Discountcalculationmethod = "DiscountCalculationMethod";
				public const string DisplayNavigationTour = "DisplayNavigationTour";
				public const string EmailConnectionChannel = "EmailConnectionChannel";
				public const string UseEmailCorrelation = "EmailCorrelationEnabled";
				public const string EmailSendPollingFrequency = "EmailSendPollingPeriod";
				public const string EnableIntegrationwithBingMaps = "EnableBingMapsIntegration";
				public const string EnableLearningPathAuthoring = "EnableLPAuthoring";
				public const string EnableIntegrationwithMicrosoftFlow = "EnableMicrosoftFlowIntegration";
				public const string EnablePricingOnCreate = "EnablePricingOnCreate";
				public const string EnableSmartMatching = "EnableSmartMatching";
				public const string Organizationsettingtoenforcereadonlyplugins = "EnforceReadOnlyPlugins";
				public const string EntityImageId = "EntityImageId";
				public const string DaystoExpireChangeTrackingDeletedRecords = "ExpireChangeTrackingInDays";
				public const string DaystoExpireSubscriptions = "ExpireSubscriptionsInDays";
				public const string ExternalBaseURL = "ExternalBaseUrl";
				public const string ExternalPartyEnabledEntitiescorrelationKeys = "ExternalPartyCorrelationKeys";
				public const string ExternalPartyEnabledEntitiesSettingsForinternaluseonly = "ExternalPartyEntitySettings";
				public const string FeatureSet = "FeatureSet";
				public const string FiscalCalendarStart = "FiscalCalendarStart";
				public const string FiscalPeriodFormat = "FiscalPeriodFormat";
				public const string FormatforFiscalPeriod = "FiscalPeriodFormatPeriod";
				public const string FiscalPeriodType = "FiscalPeriodType";
				public const string IsFiscalSettingsUpdated = "FiscalSettingsUpdated";
				public const string FiscalYearDisplay = "FiscalYearDisplayCode";
				public const string FiscalYearFormat = "FiscalYearFormat";
				public const string PrefixforFiscalYear = "FiscalYearFormatPrefix";
				public const string SuffixforFiscalYear = "FiscalYearFormatSuffix";
				public const string FiscalYearFormatYear = "FiscalYearFormatYear";
				public const string FiscalYearPeriodConnector = "FiscalYearPeriodConnect";
				public const string FullNameDisplayOrder = "FullNameConventionCode";
				public const string FutureExpansionWindow = "FutureExpansionWindow";
				public const string GenerateAlertsForErrors = "GenerateAlertsForErrors";
				public const string GenerateAlertsForInformation = "GenerateAlertsForInformation";
				public const string GenerateAlertsForWarnings = "GenerateAlertsForWarnings";
				public const string IsGetStartedPaneContentEnabled = "GetStartedPaneContentEnabled";
				public const string IsAppendUrlParametersenabled = "GlobalAppendUrlParametersEnabled";
				public const string GlobalHelpURL = "GlobalHelpUrl";
				public const string IsCustomizableGlobalHelpenabled = "GlobalHelpUrlEnabled";
				public const string RollupExpirationTimeforGoal = "GoalRollupExpiryTime";
				public const string AutomaticRollupFrequencyforGoal = "GoalRollupFrequency";
				public const string GrantAccessToNetworkService = "GrantAccessToNetworkService";
				public const string HashDeltaSubjectCount = "HashDeltaSubjectCount";
				public const string HashFilterKeywords = "HashFilterKeywords";
				public const string HashMaxCount = "HashMaxCount";
				public const string HashMinAddressCount = "HashMinAddressCount";
				public const string HighcontrastThemeData = "HighContrastThemeData";
				public const string IgnoreInternalEmail = "IgnoreInternalEmail";
				public const string ExchangeEmailRetrievalBatchSize = "IncomingEmailExchangeEmailRetrievalBatchSize";
				public const string InitialVersion = "InitialVersion";
				public const string IntegrationUser = "IntegrationUserId";
				public const string InvoicePrefix = "InvoicePrefix";
				public const string EnableActionCardforthisOrganization = "IsActionCardEnabled";
				public const string EnableRelationshipAnalyticsforthisOrganization = "IsActivityAnalysisEnabled";
				public const string IsApplicationModeEnabled = "IsAppMode";
				public const string IsAttachmentSyncEnabled = "IsAppointmentAttachmentSyncEnabled";
				public const string IsAssignedTasksSyncEnabled = "IsAssignedTasksSyncEnabled";
				public const string IsAuditingEnabled = "IsAuditEnabled";
				public const string EnableAutoCaptureforthisOrganization = "IsAutoDataCaptureEnabled";
				public const string AutoSaveEnabled = "IsAutoSaveEnabled";
				public const string IsConflictDetectionforMobileClientenabled = "IsConflictDetectionEnabledForMobileClient";
				public const string IsMailingAddressSyncEnabled = "IsContactMailingAddressSyncEnabled";
				public const string Enableordisablecountrycodeselection = "IsDefaultCountryCodeCheckEnabled";
				public const string IsDelegationAccessEnabled = "IsDelegateAccessEnabled";
				public const string EnableActionHubforthisOrganization = "IsDelveActionHubIntegrationEnabled";
				public const string IsOrganizationDisabled = "IsDisabled";
				public const string IsDuplicateDetectionEnabled = "IsDuplicateDetectionEnabled";
				public const string IsDuplicateDetectionEnabledForImport = "IsDuplicateDetectionEnabledForImport";
				public const string IsDuplicateDetectionEnabledForOfflineSynchronization = "IsDuplicateDetectionEnabledForOfflineSync";
				public const string IsDuplicateDetectionEnabledforOnlineCreateUpdate = "IsDuplicateDetectionEnabledForOnlineCreateUpdate";
				public const string Allowtrackingrecipientactivityonsentemails = "IsEmailMonitoringAllowed";
				public const string IsEmailServerProfileContentFilteringEnabled = "IsEmailServerProfileContentFilteringEnabled";
				public const string optionsetvaluesforisenabledforallroles = "IsEnabledForAllRoles";
				public const string Enableexternalsearchdatasyncing = "IsExternalSearchIndexEnabled";
				public const string IsFiscalPeriodMonthly = "IsFiscalPeriodMonthBased";
				public const string Automaticallycreatefolders = "IsFolderAutoCreatedonSP";
				public const string IsFolderBasedTrackingEnabled = "IsFolderBasedTrackingEnabled";
				public const string EnableFulltextsearchforQuickFind = "IsFullTextSearchEnabled";
				public const string EnableHierarchicalSecurityModel = "IsHierarchicalSecurityModelEnabled";
				public const string IsMailboxForcedUnlockingEnabled = "IsMailboxForcedUnlockingEnabled";
				public const string IsMailboxKeepAliveEnabled = "IsMailboxInactiveBackoffEnabled";
				public const string IsMobileClientOnDemandSyncenabled = "IsMobileClientOnDemandSyncEnabled";
				public const string EnableMobileOfflineforthisOrganization = "IsMobileOfflineEnabled";
				public const string EnableOfficeGraphforthisOrganization = "IsOfficeGraphEnabled";
				public const string EnableOneDriveforthisOrganization = "IsOneDriveEnabled";
				public const string PresenceEnabled = "IsPresenceEnabled";
				public const string EnablePreviewActionCardfeatureforthisOrganization = "IsPreviewEnabledForActionCard";
				public const string EnableAutoCaptureforthisOrganizationatPreviewSettings = "IsPreviewForAutoCaptureEnabled";
				public const string AllowsPreviewForEmailMonitoring = "IsPreviewForEmailMonitoringAllowed";
				public const string EnableRelationshipInsightsforthisOrganization = "IsRelationshipInsightsEnabled";
				public const string Resourcebookingsynchronizationenabled = "IsResourceBookingExchangeSyncEnabled";
				public const string IsSalesOrderIntegrationEnabled = "IsSOPIntegrationEnabled";
				public const string IsUserAccessAuditingEnabled = "IsUserAccessAuditEnabled";
				public const string ISVIntegrationMode = "ISVIntegrationCode";
				public const string KnowledgeArticlePrefix = "KaPrefix";
				public const string ArticlePrefix = "KbPrefix";
				public const string KnowledgeManagementSettings = "KMSettings";
				public const string Language = "LanguageCode";
				public const string Locale = "LocaleId";
				public const string LongDateFormat = "LongDateFormatCode";
				public const string LowerThresholdForMailboxIntermittentIssue = "MailboxIntermittentIssueMinRange";
				public const string LowerThresholdForMailboxPermanentIssue = "MailboxPermanentIssueMinRange";
				public const string MaxAppointmentDuration = "MaxAppointmentDurationDays";
				public const string Maximumnumberofconditionsallowedformobileofflinefilters = "MaxConditionsForMobileOfflineFilters";
				public const string Maximumdepthforhierarchysecuritypropagation = "MaxDepthForHierarchicalSecurityModel";
				public const string MaxFolderBasedTrackingMappings = "MaxFolderBasedTrackingMappings";
				public const string Maximumactivebusinessprocessflowsperentity = "MaximumActiveBusinessProcessFlowsAllowedPerEntity";
				public const string ProductPropertiesItemLimit = "MaximumDynamicPropertiesAllowed";
				public const string MaximumnumberofactiveSLAallowedperentityinonline = "MaximumEntitiesWithActiveSLA";
				public const string MaximumnumberofactiveSLAKPIallowedperentityinonline = "MaximumSLAKPIPerEntityWithActiveSLA";
				public const string MaxTrackingNumber = "MaximumTrackingNumber";
				public const string BundleItemLimit = "MaxProductsInBundle";
				public const string MaxRecordsForExcelExport = "MaxRecordsForExportToExcel";
				public const string MaxRecordsFilterSelection = "MaxRecordsForLookupFilters";
				public const string MaxsupportedIEversion = "MaxSupportedInternetExplorerVersion";
				public const string MaxUploadFileSize = "MaxUploadFileSize";
				public const string MaxNoOfMailboxesToEnableForVerboseLogging = "MaxVerboseLoggingMailbox";
				public const string Maximumnumberofsynccyclesforwhichverboseloggingwillbeenabledbydefault = "MaxVerboseLoggingSyncCycles";
				public const string MinAddressSynchronizationFrequency = "MinAddressBookSyncInterval";
				public const string MinOfflineSynchronizationFrequency = "MinOfflineSyncInterval";
				public const string MinSynchronizationFrequency = "MinOutlookSyncInterval";
				public const string Minimumnumberofuserlicenserequiredformobileofflineservicebyproductionprevieworganization = "MobileOfflineMinLicenseProd";
				public const string Minimumnumberofuserlicenserequiredformobileofflineservicebytrialorganization = "MobileOfflineMinLicenseTrial";
				public const string Syncintervalformobileoffline = "MobileOfflineSyncInterval";
				public const string ModifiedBy = "ModifiedBy";
				public const string ModifiedOn = "ModifiedOn";
				public const string ModifiedByDelegate = "ModifiedOnBehalfBy";
				public const string OrganizationName = "Name";
				public const string NegativeCurrencyFormat = "NegativeCurrencyFormatCode";
				public const string NegativeFormat = "NegativeFormatCode";
				public const string NextTrackingNumber = "NextTrackingNumber";
				public const string NotifyMailboxOwnerOfEmailServerLevelAlerts = "NotifyMailboxOwnerOfEmailServerLevelAlerts";
				public const string NumberFormat = "NumberFormat";
				public const string NumberGroupingFormat = "NumberGroupFormat";
				public const string NumberSeparator = "NumberSeparator";
				public const string EnableOfficeAppsAutoDeploymentforthisOrganization = "OfficeAppsAutoDeploymentEnabled";
				public const string TheurltoopentheDelve = "OfficeGraphDelveUrl";
				public const string EnableOOBPricecalculation = "OOBPriceCalculationEnabled";
				public const string OrderPrefix = "OrderPrefix";
				public const string OrganizationId = "OrganizationId";
				public const string OrganizationDatabaseOrganizationSettings = "OrgDbOrgSettings";
				public const string EnableOrgInsightsforthisOrganization = "OrgInsightsEnabled";
				public const string ParsedTableColumnPrefix = "ParsedTableColumnPrefix";
				public const string ParsedTablePrefix = "ParsedTablePrefix";
				public const string PastExpansionWindow = "PastExpansionWindow";
				public const string Picture = "Picture";
				public const string PinpointLanguageCode = "PinpointLanguageCode";
				public const string PluginTraceLogSetting = "PluginTraceLogSetting";
				public const string PMDesignator = "PMDesignator";
				public const string Forinternaluseonly_PostMessageWhitelistDomains = "PostMessageWhitelistDomains";
				public const string EnablePowerBIfeatureforthisOrganization = "PowerBiFeatureEnabled";
				public const string PricingDecimalPrecision = "PricingDecimalPrecision";
				public const string PrivacyStatementURL = "PrivacyStatementUrl";
				public const string PrivilegeUserGroup = "PrivilegeUserGroupId";
				public const string PrivilegeReportingGroup = "PrivReportingGroupId";
				public const string PrivilegeReportingGroupName = "PrivReportingGroupName";
				public const string EnableProductRecommendationsforthisOrganization = "ProductRecommendationsEnabled";
				public const string QuickFindRecordLimitEnabled = "QuickFindRecordLimitEnabled";
				public const string QuotePrefix = "QuotePrefix";
				public const string RecurrenceDefaultNumberofOccurrences = "RecurrenceDefaultNumberOfOccurrences";
				public const string RecurrenceExpansionJobBatchInterval = "RecurrenceExpansionJobBatchInterval";
				public const string RecurrenceExpansionOnDemandJobBatchSize = "RecurrenceExpansionJobBatchSize";
				public const string RecurrenceExpansionSynchronizationCreateMaximum = "RecurrenceExpansionSynchCreateMax";
				public const string ReferenceSiteMapXML = "ReferenceSiteMapXml";
				public const string RenderSecureFrameForEmail = "RenderSecureIFrameForEmail";
				public const string ReportingGroup = "ReportingGroupId";
				public const string ReportingGroupName = "ReportingGroupName";
				public const string ReportScriptErrors = "ReportScriptErrors";
				public const string IsApprovalForQueueEmailRequired = "RequireApprovalForQueueEmail";
				public const string IsApprovalForUserEmailRequired = "RequireApprovalForUserEmail";
				public const string RestrictStatusUpdate = "RestrictStatusUpdate";
				public const string ErrorstatusofRelationshipInsightsprovisioning = "RiErrorStatus";
				public const string SampleDataImport = "SampleDataImportId";
				public const string CustomizationNamePrefix = "SchemaNamePrefix";
				public const string ChooseSharePointDeploymentType = "SharePointDeploymentType";
				public const string ShareToPreviousOwnerOnAssign = "ShareToPreviousOwnerOnAssign";
				public const string ShowKBArticledeprecationmessagetouser = "ShowKBArticleDeprecationNotification";
				public const string ShowWeekNumber = "ShowWeekNumber";
				public const string CRMForOutlookDownloadURL = "SignupOutlookDownloadFWLink";
				public const string SiteMapXML = "SiteMapXml";
				public const string SLApausestates = "SlaPauseStates";
				public const string SocialInsightsEnabled = "SocialInsightsEnabled";
				public const string SocialInsightsinstanceidentifier = "SocialInsightsInstance";
				public const string SocialInsightsTermsofUse = "SocialInsightsTermsAccepted";
				public const string Sort = "SortId";
				public const string SQLAccessGroup = "SqlAccessGroupId";
				public const string SQLAccessGroupName = "SqlAccessGroupName";
				public const string IsSQMEnabled = "SQMEnabled";
				public const string SupportUser = "SupportUserId";
				public const string IsSLAsuppressed = "SuppressSLA";
				public const string SystemUser = "SystemUserId";
				public const string AutoTagMaxCycles = "TagMaxAggressiveCycles";
				public const string AutoTagInterval = "TagPollingPeriod";
				public const string EnableTaskFlowprocessesforthisOrganization = "TaskBasedFlowEnabled";
				public const string EnableTextAnalyticsforthisOrganization = "TextAnalyticsEnabled";
				public const string TimeFormatCode = "TimeFormatCode";
				public const string TimeFormatString = "TimeFormatString";
				public const string TimeSeparator = "TimeSeparator";
				public const string TimeZoneRuleVersionNumber = "TimeZoneRuleVersionNumber";
				public const string TokenExpirationDuration = "TokenExpiry";
				public const string TrackingPrefix = "TrackingPrefix";
				public const string TrackingTokenBase = "TrackingTokenIdBase";
				public const string TrackingTokenDigits = "TrackingTokenIdDigits";
				public const string UniqueStringLength = "UniqueSpecifierLength";
				public const string SetToccbccfieldsasunresolvedifmultiplematchesarefound = "UnresolveEmailAddressIfMultipleMatch";
				public const string UseInbuiltRuleForDefaultPricelistSelection = "UseInbuiltRuleForDefaultPricelistSelection";
				public const string LegacyFormRendering = "UseLegacyRendering";
				public const string Usepositionhierarchy = "UsePositionHierarchy";
				public const string UserAuthenticationAuditingInterval = "UserAccessAuditingInterval";
				public const string UseReadOptimizedForm = "UseReadForm";
				public const string UserGroup = "UserGroupId";
				public const string UserSkypeProtocol = "UseSkypeProtocol";
				public const string UTCConversionTimeZoneCode = "UTCConversionTimeZoneCode";
				public const string V3CalloutHash = "V3CalloutConfigHash";
				public const string VersionNumber = "VersionNumber";
				public const string Webresourcehash = "WebResourceHash";
				public const string WeekStartDayCode = "WeekStartDayCode";
				public const string ForInternaluseonly = "WidgetProperties";
				public const string YammerGroupId = "YammerGroupId";
				public const string YammerNetworkPermalink = "YammerNetworkPermalink";
				public const string YammerOAuthAccessTokenExpired = "YammerOAuthAccessTokenExpired";
				public const string InternalUseOnly = "YammerPostMethod";
				public const string YearStartWeekCode = "YearStartWeekCode";
			}

			#endregion

			#region Labels

			public static class Labels
			{
				public static class ACITenantURL
				{
					public const string _1033 = "ACI Tenant URL.";
				}

				public static class AcknowledgementTemplate
				{
					public const string _1033 = "Acknowledgement Template";
				}

				public static class AllowAddressBookSynchronization
				{
					public const string _1033 = "Allow Address Book Synchronization";
				}

				public static class AllowAutomaticResponseCreation
				{
					public const string _1033 = "Allow Automatic Response Creation";
				}

				public static class AllowAutomaticUnsubscribe
				{
					public const string _1033 = "Allow Automatic Unsubscribe";
				}

				public static class AllowAutomaticUnsubscribeAcknowledgement
				{
					public const string _1033 = "Allow Automatic Unsubscribe Acknowledgement";
				}

				public static class AllowOutlookClientMessageBarAdvertisement
				{
					public const string _1033 = "Allow Outlook Client Message Bar Advertisement";
				}

				public static class AllowEntityLevelAuditing
				{
					public const string _1033 = "Allow Entity Level Auditing";
				}

				public static class AllowMarketingEmailExecution
				{
					public const string _1033 = "Allow Marketing Email Execution";
				}

				public static class AllowOfflineScheduledSynchronization
				{
					public const string _1033 = "Allow Offline Scheduled Synchronization";
				}

				public static class AllowScheduledSynchronization
				{
					public const string _1033 = "Allow Scheduled Synchronization";
				}

				public static class AllowUnresolvedAddressEmailSend
				{
					public const string _1033 = "Allow Unresolved Address Email Send";
				}

				public static class AllowUserFormModePreference
				{
					public const string _1033 = "Allow User Form Mode Preference";
				}

				public static class Allowtheshowingtabletapplicationnotificationbarsinabrowser
				{
					public const string _1033 = "Allow the showing tablet application notification bars in a browser.";
				}

				public static class AllowExporttoExcel
				{
					public const string _1033 = "Allow Export to Excel";
				}

				public static class AMDesignator
				{
					public const string _1033 = "AM Designator";
				}

				public static class EnableAppDesignerExperienceforthisOrganization
				{
					public const string _1033 = "Enable App Designer Experience for this Organization";
				}

				public static class AutoApplyDefaultEntitlementonCaseCreate
				{
					public const string _1033 = "Auto Apply Default Entitlement on Case Create";
				}

				public static class AutoApplyDefaultEntitlementonCaseUpdate
				{
					public const string _1033 = "Auto Apply Default Entitlement on Case Update";
				}

				public static class IsAutoapplySLAAfterManuallyOverriding
				{
					public const string _1033 = "Is Auto-apply SLA After Manually Over-riding";
				}

				public static class Forinternaluseonly_AzureSchedulerJobCollectionName
				{
					public const string _1033 = "For internal use only.";
				}

				public static class Currency
				{
					public const string _1033 = "Currency";
				}

				public static class BaseCurrencyPrecision
				{
					public const string _1033 = "Base Currency Precision";
				}

				public static class BaseCurrencySymbol
				{
					public const string _1033 = "Base Currency Symbol";
				}

				public static class BingMapsAPIKey
				{
					public const string _1033 = "Bing Maps API Key";
				}

				public static class BlockAttachments
				{
					public const string _1033 = "Block Attachments";
				}

				public static class BulkOperationPrefix
				{
					public const string _1033 = "Bulk Operation Prefix";
				}

				public static class BusinessClosureCalendar
				{
					public const string _1033 = "Business Closure Calendar";
				}

				public static class CalendarType
				{
					public const string _1033 = "Calendar Type";
				}

				public static class CampaignPrefix
				{
					public const string _1033 = "Campaign Prefix";
				}

				public static class CascadeStatusUpdate
				{
					public const string _1033 = "Cascade Status Update";
				}

				public static class CasePrefix
				{
					public const string _1033 = "Case Prefix";
				}

				public static class CategoryPrefix
				{
					public const string _1033 = "Category Prefix";
				}

				public static class ContractPrefix
				{
					public const string _1033 = "Contract Prefix";
				}

				public static class EnableCortanaProactiveExperienceFlowprocessesforthisOrganization
				{
					public const string _1033 = "Enable Cortana Proactive Experience Flow processes for this Organization";
				}

				public static class CreatedBy
				{
					public const string _1033 = "Created By";
				}

				public static class CreatedOn
				{
					public const string _1033 = "Created On";
				}

				public static class CreatedByDelegate
				{
					public const string _1033 = "Created By (Delegate)";
				}

				public static class EnableActiveInitialProductState
				{
					public const string _1033 = "Enable Active Initial Product State";
				}

				public static class CurrencyDecimalPrecision
				{
					public const string _1033 = "Currency Decimal Precision";
				}

				public static class DisplayCurrenciesUsing
				{
					public const string _1033 = "Display Currencies Using";
				}

				public static class CurrencyFormatCode
				{
					public const string _1033 = "Currency Format Code";
				}

				public static class CurrencySymbol
				{
					public const string _1033 = "Currency Symbol";
				}

				public static class CurrentBulkOperationNumber
				{
					public const string _1033 = "Current Bulk Operation Number";
				}

				public static class CurrentCampaignNumber
				{
					public const string _1033 = "Current Campaign Number";
				}

				public static class CurrentCaseNumber
				{
					public const string _1033 = "Current Case Number";
				}

				public static class CurrentCategoryNumber
				{
					public const string _1033 = "Current Category Number";
				}

				public static class CurrentContractNumber
				{
					public const string _1033 = "Current Contract Number";
				}

				public static class CurrentImportSequenceNumber
				{
					public const string _1033 = "Current Import Sequence Number";
				}

				public static class CurrentInvoiceNumber
				{
					public const string _1033 = "Current Invoice Number";
				}

				public static class CurrentKnowledgeArticleNumber
				{
					public const string _1033 = "Current Knowledge Article Number";
				}

				public static class CurrentArticleNumber
				{
					public const string _1033 = "Current Article Number";
				}

				public static class CurrentOrderNumber
				{
					public const string _1033 = "Current Order Number";
				}

				public static class CurrentParsedTableNumber
				{
					public const string _1033 = "Current Parsed Table Number";
				}

				public static class CurrentQuoteNumber
				{
					public const string _1033 = "Current Quote Number";
				}

				public static class DateFormatCode
				{
					public const string _1033 = "Date Format Code";
				}

				public static class DateFormatString
				{
					public const string _1033 = "Date Format String";
				}

				public static class DateSeparator
				{
					public const string _1033 = "Date Separator";
				}

				public static class MaxvalueofDayssincerecordlastmodified
				{
					public const string _1033 = "Max value of Days since record last modified";
				}

				public static class DecimalSymbol
				{
					public const string _1033 = "Decimal Symbol";
				}

				public static class DefaultCountryCode
				{
					public const string _1033 = "Default Country Code";
				}

				public static class Nameofthedefaultapp
				{
					public const string _1033 = "Name of the default app";
				}

				public static class EmailServerProfile
				{
					public const string _1033 = "Email Server Profile";
				}

				public static class DefaultEmailSettings
				{
					public const string _1033 = "Default Email Settings";
				}

				public static class DefaultMobileOfflineProfile
				{
					public const string _1033 = "Default Mobile Offline Profile";
				}

				public static class DefaultRecurrenceEndRangeType
				{
					public const string _1033 = "Default Recurrence End Range Type";
				}

				public static class DefaultThemeData
				{
					public const string _1033 = "Default Theme Data";
				}

				public static class DelegatedAdmin
				{
					public const string _1033 = "Delegated Admin";
				}

				public static class DisabledReason
				{
					public const string _1033 = "Disabled Reason";
				}

				public static class IsSocialCaredisabled
				{
					public const string _1033 = "Is Social Care disabled";
				}

				public static class Discountcalculationmethod
				{
					public const string _1033 = "Discount calculation method";
				}

				public static class DisplayNavigationTour
				{
					public const string _1033 = "Display Navigation Tour";
				}

				public static class EmailConnectionChannel
				{
					public const string _1033 = "Email Connection Channel";
				}

				public static class UseEmailCorrelation
				{
					public const string _1033 = "Use Email Correlation";
				}

				public static class EmailSendPollingFrequency
				{
					public const string _1033 = "Email Send Polling Frequency";
				}

				public static class EnableIntegrationwithBingMaps
				{
					public const string _1033 = "Enable Integration with Bing Maps";
				}

				public static class EnableLearningPathAuthoring
				{
					public const string _1033 = "Enable Learning Path Authoring";
				}

				public static class EnableIntegrationwithMicrosoftFlow
				{
					public const string _1033 = "Enable Integration with Microsoft Flow";
				}

				public static class EnablePricingOnCreate
				{
					public const string _1033 = "Enable Pricing On Create";
				}

				public static class EnableSmartMatching
				{
					public const string _1033 = "Enable Smart Matching";
				}

				public static class Organizationsettingtoenforcereadonlyplugins
				{
					public const string _1033 = "Organization setting to enforce read only plugins.";
				}

				public static class EntityImageId
				{
					public const string _1033 = "Entity Image Id";
				}

				public static class DaystoExpireChangeTrackingDeletedRecords
				{
					public const string _1033 = "Days to Expire Change Tracking Deleted Records";
				}

				public static class DaystoExpireSubscriptions
				{
					public const string _1033 = "Days to Expire Subscriptions";
				}

				public static class ExternalBaseURL
				{
					public const string _1033 = "External Base URL";
				}

				public static class ExternalPartyEnabledEntitiescorrelationKeys
				{
					public const string _1033 = "ExternalPartyEnabled Entities correlation Keys";
				}

				public static class ExternalPartyEnabledEntitiesSettingsForinternaluseonly
				{
					public const string _1033 = "ExternalPartyEnabled Entities Settings.For internal use only";
				}

				public static class FeatureSet
				{
					public const string _1033 = "Feature Set";
				}

				public static class FiscalCalendarStart
				{
					public const string _1033 = "Fiscal Calendar Start";
				}

				public static class FiscalPeriodFormat
				{
					public const string _1033 = "Fiscal Period Format";
				}

				public static class FormatforFiscalPeriod
				{
					public const string _1033 = "Format for Fiscal Period";
				}

				public static class FiscalPeriodType
				{
					public const string _1033 = "Fiscal Period Type";
				}

				public static class IsFiscalSettingsUpdated
				{
					public const string _1033 = "Is Fiscal Settings Updated";
				}

				public static class FiscalYearDisplay
				{
					public const string _1033 = "Fiscal Year Display";
				}

				public static class FiscalYearFormat
				{
					public const string _1033 = "Fiscal Year Format";
				}

				public static class PrefixforFiscalYear
				{
					public const string _1033 = "Prefix for Fiscal Year";
				}

				public static class SuffixforFiscalYear
				{
					public const string _1033 = "Suffix for Fiscal Year";
				}

				public static class FiscalYearFormatYear
				{
					public const string _1033 = "Fiscal Year Format Year";
				}

				public static class FiscalYearPeriodConnector
				{
					public const string _1033 = "Fiscal Year Period Connector";
				}

				public static class FullNameDisplayOrder
				{
					public const string _1033 = "Full Name Display Order";
				}

				public static class FutureExpansionWindow
				{
					public const string _1033 = "Future Expansion Window";
				}

				public static class GenerateAlertsForErrors
				{
					public const string _1033 = "Generate Alerts For Errors";
				}

				public static class GenerateAlertsForInformation
				{
					public const string _1033 = "Generate Alerts For Information";
				}

				public static class GenerateAlertsForWarnings
				{
					public const string _1033 = "Generate Alerts For Warnings";
				}

				public static class IsGetStartedPaneContentEnabled
				{
					public const string _1033 = "Is Get Started Pane Content Enabled";
				}

				public static class IsAppendUrlParametersenabled
				{
					public const string _1033 = "Is AppendUrl Parameters enabled";
				}

				public static class GlobalHelpURL
				{
					public const string _1033 = "Global Help URL.";
				}

				public static class IsCustomizableGlobalHelpenabled
				{
					public const string _1033 = "Is Customizable Global Help enabled";
				}

				public static class RollupExpirationTimeforGoal
				{
					public const string _1033 = "Rollup Expiration Time for Goal";
				}

				public static class AutomaticRollupFrequencyforGoal
				{
					public const string _1033 = "Automatic Rollup Frequency for Goal";
				}

				public static class GrantAccessToNetworkService
				{
					public const string _1033 = "Grant Access To Network Service";
				}

				public static class HashDeltaSubjectCount
				{
					public const string _1033 = "Hash Delta Subject Count";
				}

				public static class HashFilterKeywords
				{
					public const string _1033 = "Hash Filter Keywords";
				}

				public static class HashMaxCount
				{
					public const string _1033 = "Hash Max Count";
				}

				public static class HashMinAddressCount
				{
					public const string _1033 = "Hash Min Address Count";
				}

				public static class HighcontrastThemeData
				{
					public const string _1033 = "High contrast Theme Data";
				}

				public static class IgnoreInternalEmail
				{
					public const string _1033 = "Ignore Internal Email";
				}

				public static class ExchangeEmailRetrievalBatchSize
				{
					public const string _1033 = "Exchange Email Retrieval Batch Size";
				}

				public static class InitialVersion
				{
					public const string _1033 = "Initial Version";
				}

				public static class IntegrationUser
				{
					public const string _1033 = "Integration User";
				}

				public static class InvoicePrefix
				{
					public const string _1033 = "Invoice Prefix";
				}

				public static class EnableActionCardforthisOrganization
				{
					public const string _1033 = "Enable Action Card for this Organization";
				}

				public static class EnableRelationshipAnalyticsforthisOrganization
				{
					public const string _1033 = "Enable Relationship Analytics for this Organization";
				}

				public static class IsApplicationModeEnabled
				{
					public const string _1033 = "Is Application Mode Enabled";
				}

				public static class IsAttachmentSyncEnabled
				{
					public const string _1033 = "Is Attachment Sync Enabled";
				}

				public static class IsAssignedTasksSyncEnabled
				{
					public const string _1033 = "Is Assigned Tasks Sync Enabled";
				}

				public static class IsAuditingEnabled
				{
					public const string _1033 = "Is Auditing Enabled";
				}

				public static class EnableAutoCaptureforthisOrganization
				{
					public const string _1033 = "Enable Auto Capture for this Organization";
				}

				public static class AutoSaveEnabled
				{
					public const string _1033 = "Auto Save Enabled";
				}

				public static class IsConflictDetectionforMobileClientenabled
				{
					public const string _1033 = "Is Conflict Detection for Mobile Client enabled";
				}

				public static class IsMailingAddressSyncEnabled
				{
					public const string _1033 = "Is Mailing Address Sync Enabled";
				}

				public static class Enableordisablecountrycodeselection
				{
					public const string _1033 = "Enable or disable country code selection";
				}

				public static class IsDelegationAccessEnabled
				{
					public const string _1033 = "Is Delegation Access Enabled";
				}

				public static class EnableActionHubforthisOrganization
				{
					public const string _1033 = "Enable Action Hub for this Organization";
				}

				public static class IsOrganizationDisabled
				{
					public const string _1033 = "Is Organization Disabled";
				}

				public static class IsDuplicateDetectionEnabled
				{
					public const string _1033 = "Is Duplicate Detection Enabled";
				}

				public static class IsDuplicateDetectionEnabledForImport
				{
					public const string _1033 = "Is Duplicate Detection Enabled For Import";
				}

				public static class IsDuplicateDetectionEnabledForOfflineSynchronization
				{
					public const string _1033 = "Is Duplicate Detection Enabled For Offline Synchronization";
				}

				public static class IsDuplicateDetectionEnabledforOnlineCreateUpdate
				{
					public const string _1033 = "Is Duplicate Detection Enabled for Online Create/Update";
				}

				public static class Allowtrackingrecipientactivityonsentemails
				{
					public const string _1033 = "Allow tracking recipient activity on sent emails";
				}

				public static class IsEmailServerProfileContentFilteringEnabled
				{
					public const string _1033 = "Is Email Server Profile Content Filtering Enabled";
				}

				public static class optionsetvaluesforisenabledforallroles
				{
					public const string _1033 = "option set values for isenabledforallroles";
				}

				public static class Enableexternalsearchdatasyncing
				{
					public const string _1033 = "Enable external search data syncing";
				}

				public static class IsFiscalPeriodMonthly
				{
					public const string _1033 = "Is Fiscal Period Monthly";
				}

				public static class Automaticallycreatefolders
				{
					public const string _1033 = "Automatically create folders";
				}

				public static class IsFolderBasedTrackingEnabled
				{
					public const string _1033 = "Is Folder Based Tracking Enabled";
				}

				public static class EnableFulltextsearchforQuickFind
				{
					public const string _1033 = "Enable Full-text search for Quick Find";
				}

				public static class EnableHierarchicalSecurityModel
				{
					public const string _1033 = "Enable Hierarchical Security Model";
				}

				public static class IsMailboxForcedUnlockingEnabled
				{
					public const string _1033 = "Is Mailbox Forced Unlocking Enabled";
				}

				public static class IsMailboxKeepAliveEnabled
				{
					public const string _1033 = "Is Mailbox Keep Alive Enabled";
				}

				public static class IsMobileClientOnDemandSyncenabled
				{
					public const string _1033 = "Is Mobile Client On Demand Sync enabled";
				}

				public static class EnableMobileOfflineforthisOrganization
				{
					public const string _1033 = "Enable MobileOffline for this Organization";
				}

				public static class EnableOfficeGraphforthisOrganization
				{
					public const string _1033 = "Enable OfficeGraph for this Organization";
				}

				public static class EnableOneDriveforthisOrganization
				{
					public const string _1033 = "Enable One Drive for this Organization";
				}

				public static class PresenceEnabled
				{
					public const string _1033 = "Presence Enabled";
				}

				public static class EnablePreviewActionCardfeatureforthisOrganization
				{
					public const string _1033 = "Enable Preview Action Card feature for this Organization";
				}

				public static class EnableAutoCaptureforthisOrganizationatPreviewSettings
				{
					public const string _1033 = "Enable Auto Capture for this Organization at Preview Settings";
				}

				public static class AllowsPreviewForEmailMonitoring
				{
					public const string _1033 = "Allows Preview For Email Monitoring";
				}

				public static class EnableRelationshipInsightsforthisOrganization
				{
					public const string _1033 = "Enable Relationship Insights for this Organization";
				}

				public static class Resourcebookingsynchronizationenabled
				{
					public const string _1033 = "Resource booking synchronization enabled";
				}

				public static class IsSalesOrderIntegrationEnabled
				{
					public const string _1033 = "Is Sales Order Integration Enabled";
				}

				public static class IsUserAccessAuditingEnabled
				{
					public const string _1033 = "Is User Access Auditing Enabled";
				}

				public static class ISVIntegrationMode
				{
					public const string _1033 = "ISV Integration Mode";
				}

				public static class KnowledgeArticlePrefix
				{
					public const string _1033 = "Knowledge Article Prefix";
				}

				public static class ArticlePrefix
				{
					public const string _1033 = "Article Prefix";
				}

				public static class KnowledgeManagementSettings
				{
					public const string _1033 = "Knowledge Management Settings";
				}

				public static class Language
				{
					public const string _1033 = "Language";
				}

				public static class Locale
				{
					public const string _1033 = "Locale";
				}

				public static class LongDateFormat
				{
					public const string _1033 = "Long Date Format";
				}

				public static class LowerThresholdForMailboxIntermittentIssue
				{
					public const string _1033 = "Lower Threshold For Mailbox Intermittent Issue";
				}

				public static class LowerThresholdForMailboxPermanentIssue
				{
					public const string _1033 = "Lower Threshold For Mailbox Permanent Issue.";
				}

				public static class MaxAppointmentDuration
				{
					public const string _1033 = "Max Appointment Duration";
				}

				public static class Maximumnumberofconditionsallowedformobileofflinefilters
				{
					public const string _1033 = "Maximum number of conditions allowed for mobile offline filters";
				}

				public static class Maximumdepthforhierarchysecuritypropagation
				{
					public const string _1033 = "Maximum depth for hierarchy security propagation.";
				}

				public static class MaxFolderBasedTrackingMappings
				{
					public const string _1033 = "Max Folder Based Tracking Mappings";
				}

				public static class Maximumactivebusinessprocessflowsperentity
				{
					public const string _1033 = "Maximum active business process flows per entity";
				}

				public static class ProductPropertiesItemLimit
				{
					public const string _1033 = "Product Properties Item Limit";
				}

				public static class MaximumnumberofactiveSLAallowedperentityinonline
				{
					public const string _1033 = "Maximum number of active SLA allowed per entity in online";
				}

				public static class MaximumnumberofactiveSLAKPIallowedperentityinonline
				{
					public const string _1033 = "Maximum number of active SLA KPI allowed per entity in online";
				}

				public static class MaxTrackingNumber
				{
					public const string _1033 = "Max Tracking Number";
				}

				public static class BundleItemLimit
				{
					public const string _1033 = "Bundle Item Limit";
				}

				public static class MaxRecordsForExcelExport
				{
					public const string _1033 = "Max Records For Excel Export";
				}

				public static class MaxRecordsFilterSelection
				{
					public const string _1033 = "Max Records Filter Selection";
				}

				public static class MaxsupportedIEversion
				{
					public const string _1033 = "Max supported IE version";
				}

				public static class MaxUploadFileSize
				{
					public const string _1033 = "Max Upload File Size";
				}

				public static class MaxNoOfMailboxesToEnableForVerboseLogging
				{
					public const string _1033 = "Max No Of Mailboxes To Enable For Verbose Logging";
				}

				public static class Maximumnumberofsynccyclesforwhichverboseloggingwillbeenabledbydefault
				{
					public const string _1033 = "Maximum number of sync cycles for which verbose logging will be enabled by defaul" +
    "t";
				}

				public static class MinAddressSynchronizationFrequency
				{
					public const string _1033 = "Min Address Synchronization Frequency";
				}

				public static class MinOfflineSynchronizationFrequency
				{
					public const string _1033 = "Min Offline Synchronization Frequency";
				}

				public static class MinSynchronizationFrequency
				{
					public const string _1033 = "Min Synchronization Frequency";
				}

				public static class Minimumnumberofuserlicenserequiredformobileofflineservicebyproductionprevieworganization
				{
					public const string _1033 = "Minimum number of user license required for mobile offline service by production/" +
    "preview organization";
				}

				public static class Minimumnumberofuserlicenserequiredformobileofflineservicebytrialorganization
				{
					public const string _1033 = "Minimum number of user license required for mobile offline service by trial organ" +
    "ization";
				}

				public static class Syncintervalformobileoffline
				{
					public const string _1033 = "Sync interval for mobile offline.";
				}

				public static class ModifiedBy
				{
					public const string _1033 = "Modified By";
				}

				public static class ModifiedOn
				{
					public const string _1033 = "Modified On";
				}

				public static class ModifiedByDelegate
				{
					public const string _1033 = "Modified By (Delegate)";
				}

				public static class OrganizationName
				{
					public const string _1033 = "Organization Name";
				}

				public static class NegativeCurrencyFormat
				{
					public const string _1033 = "Negative Currency Format";
				}

				public static class NegativeFormat
				{
					public const string _1033 = "Negative Format";
				}

				public static class NextTrackingNumber
				{
					public const string _1033 = "Next Tracking Number";
				}

				public static class NotifyMailboxOwnerOfEmailServerLevelAlerts
				{
					public const string _1033 = "Notify Mailbox Owner Of Email Server Level Alerts";
				}

				public static class NumberFormat
				{
					public const string _1033 = "Number Format";
				}

				public static class NumberGroupingFormat
				{
					public const string _1033 = "Number Grouping Format";
				}

				public static class NumberSeparator
				{
					public const string _1033 = "Number Separator";
				}

				public static class EnableOfficeAppsAutoDeploymentforthisOrganization
				{
					public const string _1033 = "Enable Office Apps Auto Deployment for this Organization";
				}

				public static class TheurltoopentheDelve
				{
					public const string _1033 = "The url to open the Delve";
				}

				public static class EnableOOBPricecalculation
				{
					public const string _1033 = "Enable OOB Price calculation";
				}

				public static class OrderPrefix
				{
					public const string _1033 = "Order Prefix";
				}

				public static class OrganizationId
				{
					public const string _1033 = "Organization";
				}

				public static class OrganizationDatabaseOrganizationSettings
				{
					public const string _1033 = "Organization Database Organization Settings";
				}

				public static class EnableOrgInsightsforthisOrganization
				{
					public const string _1033 = "Enable OrgInsights for this Organization";
				}

				public static class ParsedTableColumnPrefix
				{
					public const string _1033 = "Parsed Table Column Prefix";
				}

				public static class ParsedTablePrefix
				{
					public const string _1033 = "Parsed Table Prefix";
				}

				public static class PastExpansionWindow
				{
					public const string _1033 = "Past Expansion Window";
				}

				public static class Picture
				{
					public const string _1033 = "Picture";
				}

				public static class PinpointLanguageCode
				{
				}

				public static class PluginTraceLogSetting
				{
					public const string _1033 = "Plug-in Trace Log Setting";
				}

				public static class PMDesignator
				{
					public const string _1033 = "PM Designator";
				}

				public static class Forinternaluseonly_PostMessageWhitelistDomains
				{
					public const string _1033 = "For internal use only.";
				}

				public static class EnablePowerBIfeatureforthisOrganization
				{
					public const string _1033 = "Enable Power BI feature for this Organization";
				}

				public static class PricingDecimalPrecision
				{
					public const string _1033 = "Pricing Decimal Precision";
				}

				public static class PrivacyStatementURL
				{
					public const string _1033 = "Privacy Statement URL";
				}

				public static class PrivilegeUserGroup
				{
					public const string _1033 = "Privilege User Group";
				}

				public static class PrivilegeReportingGroup
				{
					public const string _1033 = "Privilege Reporting Group";
				}

				public static class PrivilegeReportingGroupName
				{
					public const string _1033 = "Privilege Reporting Group Name";
				}

				public static class EnableProductRecommendationsforthisOrganization
				{
					public const string _1033 = "Enable Product Recommendations for this Organization";
				}

				public static class QuickFindRecordLimitEnabled
				{
					public const string _1033 = "Quick Find Record Limit Enabled";
				}

				public static class QuotePrefix
				{
					public const string _1033 = "Quote Prefix";
				}

				public static class RecurrenceDefaultNumberofOccurrences
				{
					public const string _1033 = "Recurrence Default Number of Occurrences";
				}

				public static class RecurrenceExpansionJobBatchInterval
				{
					public const string _1033 = "Recurrence Expansion Job Batch Interval";
				}

				public static class RecurrenceExpansionOnDemandJobBatchSize
				{
					public const string _1033 = "Recurrence Expansion On Demand Job Batch Size";
				}

				public static class RecurrenceExpansionSynchronizationCreateMaximum
				{
					public const string _1033 = "Recurrence Expansion Synchronization Create Maximum";
				}

				public static class ReferenceSiteMapXML
				{
					public const string _1033 = "Reference SiteMap XML";
				}

				public static class RenderSecureFrameForEmail
				{
					public const string _1033 = "Render Secure Frame For Email";
				}

				public static class ReportingGroup
				{
					public const string _1033 = "Reporting Group";
				}

				public static class ReportingGroupName
				{
					public const string _1033 = "Reporting Group Name";
				}

				public static class ReportScriptErrors
				{
					public const string _1033 = "Report Script Errors";
				}

				public static class IsApprovalForQueueEmailRequired
				{
					public const string _1033 = "Is Approval For Queue Email Required";
				}

				public static class IsApprovalForUserEmailRequired
				{
					public const string _1033 = "Is Approval For User Email Required";
				}

				public static class RestrictStatusUpdate
				{
					public const string _1033 = "Restrict Status Update";
				}

				public static class ErrorstatusofRelationshipInsightsprovisioning
				{
					public const string _1033 = "Error status of Relationship Insights provisioning.";
				}

				public static class SampleDataImport
				{
					public const string _1033 = "Sample Data Import";
				}

				public static class CustomizationNamePrefix
				{
					public const string _1033 = "Customization Name Prefix";
				}

				public static class ChooseSharePointDeploymentType
				{
					public const string _1033 = "Choose SharePoint Deployment Type";
				}

				public static class ShareToPreviousOwnerOnAssign
				{
					public const string _1033 = "Share To Previous Owner On Assign";
				}

				public static class ShowKBArticledeprecationmessagetouser
				{
					public const string _1033 = "Show KBArticle deprecation message to user";
				}

				public static class ShowWeekNumber
				{
					public const string _1033 = "Show Week Number";
				}

				public static class CRMForOutlookDownloadURL
				{
					public const string _1033 = "CRMForOutlookDownloadURL";
				}

				public static class SiteMapXML
				{
					public const string _1033 = "SiteMap XML";
				}

				public static class SLApausestates
				{
					public const string _1033 = "SLA pause states";
				}

				public static class SocialInsightsEnabled
				{
					public const string _1033 = "Social Insights Enabled";
				}

				public static class SocialInsightsinstanceidentifier
				{
					public const string _1033 = "Social Insights instance identifier";
				}

				public static class SocialInsightsTermsofUse
				{
					public const string _1033 = "Social Insights Terms of Use";
				}

				public static class Sort
				{
					public const string _1033 = "Sort";
				}

				public static class SQLAccessGroup
				{
					public const string _1033 = "SQL Access Group";
				}

				public static class SQLAccessGroupName
				{
					public const string _1033 = "SQL Access Group Name";
				}

				public static class IsSQMEnabled
				{
					public const string _1033 = "Is SQM Enabled";
				}

				public static class SupportUser
				{
					public const string _1033 = "Support User";
				}

				public static class IsSLAsuppressed
				{
					public const string _1033 = "Is SLA suppressed";
				}

				public static class SystemUser
				{
					public const string _1033 = "System User";
				}

				public static class AutoTagMaxCycles
				{
					public const string _1033 = "Auto-Tag Max Cycles";
				}

				public static class AutoTagInterval
				{
					public const string _1033 = "Auto-Tag Interval";
				}

				public static class EnableTaskFlowprocessesforthisOrganization
				{
					public const string _1033 = "Enable Task Flow processes for this Organization";
				}

				public static class EnableTextAnalyticsforthisOrganization
				{
					public const string _1033 = "Enable Text Analytics for this Organization";
				}

				public static class TimeFormatCode
				{
					public const string _1033 = "Time Format Code";
				}

				public static class TimeFormatString
				{
					public const string _1033 = "Time Format String";
				}

				public static class TimeSeparator
				{
					public const string _1033 = "Time Separator";
				}

				public static class TimeZoneRuleVersionNumber
				{
					public const string _1033 = "Time Zone Rule Version Number";
				}

				public static class TokenExpirationDuration
				{
					public const string _1033 = "Token Expiration Duration";
				}

				public static class TrackingPrefix
				{
					public const string _1033 = "Tracking Prefix";
				}

				public static class TrackingTokenBase
				{
					public const string _1033 = "Tracking Token Base";
				}

				public static class TrackingTokenDigits
				{
					public const string _1033 = "Tracking Token Digits";
				}

				public static class UniqueStringLength
				{
					public const string _1033 = "Unique String Length";
				}

				public static class SetToccbccfieldsasunresolvedifmultiplematchesarefound
				{
					public const string _1033 = "Set To,cc,bcc fields as unresolved if multiple matches are found";
				}

				public static class UseInbuiltRuleForDefaultPricelistSelection
				{
					public const string _1033 = "Use Inbuilt Rule For Default Pricelist Selection";
				}

				public static class LegacyFormRendering
				{
					public const string _1033 = "Legacy Form Rendering";
				}

				public static class Usepositionhierarchy
				{
					public const string _1033 = "Use position hierarchy";
				}

				public static class UserAuthenticationAuditingInterval
				{
					public const string _1033 = "User Authentication Auditing Interval";
				}

				public static class UseReadOptimizedForm
				{
					public const string _1033 = "Use Read-Optimized Form";
				}

				public static class UserGroup
				{
					public const string _1033 = "User Group";
				}

				public static class UserSkypeProtocol
				{
					public const string _1033 = "User Skype Protocol";
				}

				public static class UTCConversionTimeZoneCode
				{
					public const string _1033 = "UTC Conversion Time Zone Code";
				}

				public static class V3CalloutHash
				{
					public const string _1033 = "V3 Callout Hash";
				}

				public static class VersionNumber
				{
					public const string _1033 = "Version Number";
				}

				public static class Webresourcehash
				{
					public const string _1033 = "Web resource hash";
				}

				public static class WeekStartDayCode
				{
					public const string _1033 = "Week Start Day Code";
				}

				public static class ForInternaluseonly
				{
					public const string _1033 = "For Internal use only.";
				}

				public static class YammerGroupId
				{
					public const string _1033 = "Yammer Group Id";
				}

				public static class YammerNetworkPermalink
				{
					public const string _1033 = "Yammer Network Permalink";
				}

				public static class YammerOAuthAccessTokenExpired
				{
					public const string _1033 = "Yammer OAuth Access Token Expired";
				}

				public static class InternalUseOnly
				{
					public const string _1033 = "Internal Use Only";
				}

				public static class YearStartWeekCode
				{
					public const string _1033 = "Year Start Week Code";
				}

			}

			#endregion
		}

		#endregion

		#region Relations

		public static class Relations
		{
			public static class OneToN
			{
				public const string UsersOfOrganization = "organization_system_users";
				public const string SystemFormsOfOrganizationId = "organization_systemforms";
				public const string ThemesOfOrganizationId = "organization_theme";
			}
			
			public static class NToOne
			{
				public const string UserAsCreatedByDelegate = "lk_organization_createdonbehalfby";
				public const string UserAsModifiedByDelegate = "lk_organization_modifiedonbehalfby";
				public const string UserAsCreatedBy = "lk_organizationbase_createdby";
				public const string UserAsModifiedBy = "lk_organizationbase_modifiedby";

				public static class Lookups
				{
					public const string UserAsCreatedByDelegate = "createdonbehalfby";
					public const string UserAsModifiedByDelegate = "modifiedonbehalfby";
					public const string UserAsCreatedBy = "createdby";
					public const string UserAsModifiedBy = "modifiedby";
				}
			}

			public static class NToN
			{

			}
		}

		#endregion

		#endregion
	}

	#endregion

	#region SystemForm

	/// <summary>
	/// 'SystemForm'.<br />
	/// Organization-owned entity customizations including form layout and dashboards.
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract, EntityLogicalName("systemform")]
	public partial class SystemForm : GeneratedEntity<SystemForm.RelationName>
	{
		
		public SystemForm() : 
				base(EntityLogicalName)
		{
		}
		
		public const string DisplayName = "System Form";
		public const string SchemaName = "SystemForm";
		public const string EntityLogicalName = "systemform";
		public const int EntityTypeCode = 1030;
		
		public class RelationName : RelationNameBase
		{
			public RelationName(string name) : base(name)
			{}
		}


		#region Attributes

		[AttributeLogicalName("formid"), DataMember]
		public override System.Guid Id
		{
			get
			{
				return (FormIdId == null || FormIdId == Guid.Empty) ? base.Id : FormIdId.GetValueOrDefault();
			}
			
			set
			{
                if (value == Guid.Empty) {
                    Attributes.Remove("formid");
                    base.Id = value;
                } else {
				    FormIdId = value;
                }
			}
		}

        /// <summary>
        ///  
		/// 'AncestorFormId'.<br />
        /// Unique identifier of the parent form.
        /// </summary>
		[AttributeLogicalName("ancestorformid")]
		public Guid? ParentForm
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ancestorformid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ancestorformid"))
				    value = (EntityReference) backupAttributeCollection["ancestorformid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ParentForm");
                if (value != null)
				    SetAttributeValue("ancestorformid", new EntityReference("systemform", value.Value));
                else
					SetAttributeValue("ancestorformid", value);
				OnPropertyChanged("ParentForm");
			}
		}

        public string ParentFormName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ancestorformid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ancestorformid"))
				    value = (EntityReference) backupAttributeCollection["ancestorformid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'CanBeDeleted'.<br />
        /// Information that specifies whether this component can be deleted.
        /// </summary>
		[AttributeLogicalName("canbedeleted")]
		public BooleanManagedProperty CanBeDeleted
		{
			get
			{
				var value = GetAttributeValue<BooleanManagedProperty>("canbedeleted");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("canbedeleted"))
				    value = (BooleanManagedProperty) backupAttributeCollection["canbedeleted"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CanBeDeleted");
					SetAttributeValue("canbedeleted", value);
				OnPropertyChanged("CanBeDeleted");
			}
		}

        /// <summary>
        ///  
		/// 'ComponentState'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("componentstate")]
		public ComponentStateEnum? ComponentState
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("componentstate");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("componentstate"))
				    value = (OptionSetValue) backupAttributeCollection["componentstate"];
                return value == null ? (ComponentStateEnum?) null : (ComponentStateEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("ComponentState");
                if (value != null)
				    SetAttributeValue("componentstate", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("componentstate", value);
				OnPropertyChanged("ComponentState");
			}
		}

        /// <summary>
        /// [MaximumLength=2000] 
		/// 'Description'.<br />
        /// Description of the form or dashboard.
        /// </summary>
		[AttributeLogicalName("description"), MaxLength(2000)]
		public string Description
		{
			get
			{
				var value = GetAttributeValue<string>("description");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("description"))
				    value = (string) backupAttributeCollection["description"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Description");
					SetAttributeValue("description", value);
				OnPropertyChanged("Description");
			}
		}

        /// <summary>
        ///  
		/// 'FormActivationState'.<br />
        /// Specifies the state of the form.
        /// </summary>
		[AttributeLogicalName("formactivationstate")]
		public FormStateEnum? FormState
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("formactivationstate");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("formactivationstate"))
				    value = (OptionSetValue) backupAttributeCollection["formactivationstate"];
                return value == null ? (FormStateEnum?) null : (FormStateEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("FormState");
                if (value != null)
				    SetAttributeValue("formactivationstate", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("formactivationstate", value);
				OnPropertyChanged("FormState");
			}
		}

        /// <summary>
        ///  
		/// 'FormId'.<br />
        /// Unique identifier of the record type form.
        /// </summary>
		[AttributeLogicalName("formid")]
		public Guid? FormIdId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("formid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("formid"))
				    value = (Guid?) backupAttributeCollection["formid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("FormIdId");
                if (value != null)
					SetAttributeValue("formid", value);
				if (value != null)
					base.Id = value.Value;
				else
					Id = System.Guid.Empty;
				OnPropertyChanged("FormIdId");
			}
		}

        /// <summary>
        ///  
		/// 'FormIdUnique'.<br />
        /// Unique identifier of the form used when synchronizing customizations for the Microsoft Dynamics 365 client for Outlook.
        /// </summary>
		[AttributeLogicalName("formidunique")]
		public Guid? FormIdUnique
		{
			get
			{
				var value = GetAttributeValue<Guid?>("formidunique");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("formidunique"))
				    value = (Guid?) backupAttributeCollection["formidunique"];
			    return value;
			}
			set
			{
				OnPropertyChanging("FormIdUnique");
					SetAttributeValue("formidunique", value);
				OnPropertyChanged("FormIdUnique");
			}
		}

        /// <summary>
        ///  
		/// 'FormPresentation'.<br />
        /// Specifies whether this form is in the updated UI layout in Microsoft Dynamics CRM 2015 or Microsoft Dynamics CRM Online 2015 Update.
        /// </summary>
		[AttributeLogicalName("formpresentation")]
		public AIRRefreshedEnum? AIRRefreshed
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("formpresentation");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("formpresentation"))
				    value = (OptionSetValue) backupAttributeCollection["formpresentation"];
                return value == null ? (AIRRefreshedEnum?) null : (AIRRefreshedEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("AIRRefreshed");
                if (value != null)
				    SetAttributeValue("formpresentation", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("formpresentation", value);
				OnPropertyChanged("AIRRefreshed");
			}
		}

        /// <summary>
        /// [MaximumLength=1073741823] 
		/// 'FormXml'.<br />
        /// XML representation of the form layout.
        /// </summary>
		[AttributeLogicalName("formxml"), MaxLength(1073741823)]
		public string FormXml
		{
			get
			{
				var value = GetAttributeValue<string>("formxml");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("formxml"))
				    value = (string) backupAttributeCollection["formxml"];
			    return value;
			}
			set
			{
				OnPropertyChanging("FormXml");
					SetAttributeValue("formxml", value);
				OnPropertyChanged("FormXml");
			}
		}

        /// <summary>
        /// [MaximumLength=48] 
		/// 'IntroducedVersion'.<br />
        /// Version in which the form is introduced.
        /// </summary>
		[AttributeLogicalName("introducedversion"), MaxLength(48)]
		public string IntroducedVersion
		{
			get
			{
				var value = GetAttributeValue<string>("introducedversion");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("introducedversion"))
				    value = (string) backupAttributeCollection["introducedversion"];
			    return value;
			}
			set
			{
				OnPropertyChanging("IntroducedVersion");
					SetAttributeValue("introducedversion", value);
				OnPropertyChanged("IntroducedVersion");
			}
		}

        /// <summary>
        ///  
		/// 'IsAIRMerged'.<br />
        /// Specifies whether this form is merged with the updated UI layout in Microsoft Dynamics CRM 2015 or Microsoft Dynamics CRM Online 2015 Update.
        /// </summary>
		[AttributeLogicalName("isairmerged")]
		public bool? Refreshed
		{
			get
			{
				var value = GetAttributeValue<bool?>("isairmerged");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("isairmerged"))
				    value = (bool?) backupAttributeCollection["isairmerged"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Refreshed");
					SetAttributeValue("isairmerged", value);
				OnPropertyChanged("Refreshed");
			}
		}

        /// <summary>
        ///  
		/// 'IsCustomizable'.<br />
        /// Information that specifies whether this component can be customized.
        /// </summary>
		[AttributeLogicalName("iscustomizable")]
		public BooleanManagedProperty Customizable
		{
			get
			{
				var value = GetAttributeValue<BooleanManagedProperty>("iscustomizable");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("iscustomizable"))
				    value = (BooleanManagedProperty) backupAttributeCollection["iscustomizable"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Customizable");
					SetAttributeValue("iscustomizable", value);
				OnPropertyChanged("Customizable");
			}
		}

        /// <summary>
        ///  
		/// 'IsDefault'.<br />
        /// Information that specifies whether the form or the dashboard is the system default.
        /// </summary>
		[AttributeLogicalName("isdefault")]
		public bool? DefaultForm
		{
			get
			{
				var value = GetAttributeValue<bool?>("isdefault");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("isdefault"))
				    value = (bool?) backupAttributeCollection["isdefault"];
			    return value;
			}
			set
			{
				OnPropertyChanging("DefaultForm");
					SetAttributeValue("isdefault", value);
				OnPropertyChanged("DefaultForm");
			}
		}

        /// <summary>
        ///  
		/// 'IsDesktopEnabled'.<br />
        /// Information that specifies whether the dashboard is enabled for desktop.
        /// </summary>
		[AttributeLogicalName("isdesktopenabled")]
		public bool? IsDesktopEnabled
		{
			get
			{
				var value = GetAttributeValue<bool?>("isdesktopenabled");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("isdesktopenabled"))
				    value = (bool?) backupAttributeCollection["isdesktopenabled"];
			    return value;
			}
			set
			{
				OnPropertyChanging("IsDesktopEnabled");
					SetAttributeValue("isdesktopenabled", value);
				OnPropertyChanged("IsDesktopEnabled");
			}
		}

		[AttributeLogicalName("ismanaged")]
		public bool? State
		{
			get
			{
				var value = GetAttributeValue<bool?>("ismanaged");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ismanaged"))
				    value = (bool?) backupAttributeCollection["ismanaged"];
			    return value;
			}
			set
			{
				OnPropertyChanging("State");
					SetAttributeValue("ismanaged", value);
				OnPropertyChanged("State");
			}
		}

        /// <summary>
        ///  
		/// 'IsTabletEnabled'.<br />
        /// Information that specifies whether the dashboard is enabled for tablet.
        /// </summary>
		[AttributeLogicalName("istabletenabled")]
		public bool? IsTabletEnabled
		{
			get
			{
				var value = GetAttributeValue<bool?>("istabletenabled");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("istabletenabled"))
				    value = (bool?) backupAttributeCollection["istabletenabled"];
			    return value;
			}
			set
			{
				OnPropertyChanging("IsTabletEnabled");
					SetAttributeValue("istabletenabled", value);
				OnPropertyChanged("IsTabletEnabled");
			}
		}

        /// <summary>
        /// [MaximumLength=100] 
		/// 'Name'.<br />
        /// Name of the form.
        /// </summary>
		[AttributeLogicalName("name"), DataMember, MaxLength(100)]
		public string Name
		{
			get
			{
				var value = GetAttributeValue<string>("name");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("name"))
				    value = (string) backupAttributeCollection["name"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Name");
					SetAttributeValue("name", value);
				OnPropertyChanged("Name");
			}
		}

        /// <summary>
        ///  
		/// 'ObjectTypeCode'.<br />
        /// Code that represents the record type.
        /// </summary>
		[AttributeLogicalName("objecttypecode"), DataMember]
		public string ObjectTypeCode
		{
			get
			{
				var value = GetAttributeValue<string>("objecttypecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("objecttypecode"))
				    value = (string) backupAttributeCollection["objecttypecode"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ObjectTypeCode");
					SetAttributeValue("objecttypecode", value);
				OnPropertyChanged("ObjectTypeCode");
			}
		}

        /// <summary>
        ///  
		/// 'OrganizationId'.<br />
        /// Unique identifier of the organization.
        /// </summary>
		[AttributeLogicalName("organizationid")]
		public Guid? OrganizationId
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("organizationid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("organizationid"))
				    value = (EntityReference) backupAttributeCollection["organizationid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OrganizationId");
                if (value != null)
				    SetAttributeValue("organizationid", new EntityReference("organization", value.Value));
                else
					SetAttributeValue("organizationid", value);
				OnPropertyChanged("OrganizationId");
			}
		}

        public string OrganizationIdName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("organizationid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("organizationid"))
				    value = (EntityReference) backupAttributeCollection["organizationid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OverwriteTime'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("overwritetime")]
		public DateTime? RecordOverwriteTime
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("overwritetime");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("overwritetime"))
				    value = (DateTime?) backupAttributeCollection["overwritetime"];
			    return value;
			}
			set
			{
				OnPropertyChanging("RecordOverwriteTime");
					SetAttributeValue("overwritetime", value);
				OnPropertyChanged("RecordOverwriteTime");
			}
		}

		[AttributeLogicalName("publishedon")]
		public DateTime? PublishedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("publishedon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("publishedon"))
				    value = (DateTime?) backupAttributeCollection["publishedon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("PublishedOn");
					SetAttributeValue("publishedon", value);
				OnPropertyChanged("PublishedOn");
			}
		}

        /// <summary>
        ///  
		/// 'SolutionId'.<br />
        /// Unique identifier of the associated solution.
        /// </summary>
		[AttributeLogicalName("solutionid")]
		public Guid? Solution_SolutionId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("solutionid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("solutionid"))
				    value = (Guid?) backupAttributeCollection["solutionid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Solution_SolutionId");
					SetAttributeValue("solutionid", value);
				OnPropertyChanged("Solution_SolutionId");
			}
		}

        /// <summary>
        ///  
		/// 'Type'.<br />
        /// Type of the form, for example, Dashboard or Preview.
        /// </summary>
		[AttributeLogicalName("type")]
		public FormTypeEnum? FormType
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("type");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("type"))
				    value = (OptionSetValue) backupAttributeCollection["type"];
                return value == null ? (FormTypeEnum?) null : (FormTypeEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("FormType");
                if (value != null)
				    SetAttributeValue("type", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("type", value);
				OnPropertyChanged("FormType");
			}
		}

        /// <summary>
        /// [MaximumLength=200] 
		/// 'UniqueName'.<br />
        /// Unique Name
        /// </summary>
		[AttributeLogicalName("uniquename"), MaxLength(200)]
		public string UniqueName
		{
			get
			{
				var value = GetAttributeValue<string>("uniquename");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("uniquename"))
				    value = (string) backupAttributeCollection["uniquename"];
			    return value;
			}
			set
			{
				OnPropertyChanging("UniqueName");
					SetAttributeValue("uniquename", value);
				OnPropertyChanged("UniqueName");
			}
		}

        /// <summary>
        /// [Range(0, 2147483647)] 
		/// 'Version'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("version"), InRange("0", "2147483647", typeof(int))]
		public int? Version
		{
			get
			{
				var value = GetAttributeValue<int?>("version");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("version"))
				    value = (int?) backupAttributeCollection["version"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Version");
					SetAttributeValue("version", value);
				OnPropertyChanged("Version");
			}
		}

        /// <summary>
        ///  
		/// 'VersionNumber'.<br />
        /// Represents a version of customizations to be synchronized with the Microsoft Dynamics 365 client for Outlook.
        /// </summary>
		[AttributeLogicalName("versionnumber")]
		public long? VersionNumber
		{
			get
			{
				var value = GetAttributeValue<long?>("versionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("versionnumber"))
				    value = (long?) backupAttributeCollection["versionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("VersionNumber");
					SetAttributeValue("versionnumber", value);
				OnPropertyChanged("VersionNumber");
			}
		}

		#endregion

		#region Relationships

		
		/// <summary>
		/// 1:N, 'form_ancestor_form'
		/// </summary>
		[RelationshipSchemaName("form_ancestor_form", Microsoft.Xrm.Sdk.EntityRole.Referenced)]
		public SystemForm[] SystemFormsOfParentForm
		{
			get
			{
				var enumerable = GetRelatedEntities<SystemForm>("form_ancestor_form", Microsoft.Xrm.Sdk.EntityRole.Referenced);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("SystemFormsOfParentForm");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<SystemForm>("form_ancestor_form", Microsoft.Xrm.Sdk.EntityRole.Referenced, value);
				OnPropertyChanged("SystemFormsOfParentForm");
			}
		}
		
		/// <summary>
		/// N:1, 'form_ancestor_form'
		/// </summary>
		[RelationshipSchemaName("form_ancestor_form", Microsoft.Xrm.Sdk.EntityRole.Referencing), AttributeLogicalName("ancestorformid")]
		public SystemForm SystemFormAsParentForm
		{
			get
			{
				return GetRelatedEntity<SystemForm>("form_ancestor_form", Microsoft.Xrm.Sdk.EntityRole.Referencing);
			}
			set
			{
				OnPropertyChanging("SystemFormAsParentForm");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<SystemForm>("form_ancestor_form", Microsoft.Xrm.Sdk.EntityRole.Referencing, value);
				OnPropertyChanged("SystemFormAsParentForm");
			}
		}
		
		/// <summary>
		/// N:1, 'organization_systemforms'
		/// </summary>
		[RelationshipSchemaName("organization_systemforms"), AttributeLogicalName("organizationid")]
		public Organization OrganizationAsOrganizationId
		{
			get
			{
				return GetRelatedEntity<Organization>("organization_systemforms", null);
			}
			set
			{
				OnPropertyChanging("OrganizationAsOrganizationId");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<Organization>("organization_systemforms", null, value);
				OnPropertyChanged("OrganizationAsOrganizationId");
			}
		}
		
		public static class RelationNames {
			public static RelationName SystemFormsOfParentForm = new RelationName("SystemFormsOfParentForm");
			public static RelationName SystemFormAsParentForm = new RelationName("SystemFormAsParentForm");
			public static RelationName OrganizationAsOrganizationId = new RelationName("OrganizationAsOrganizationId");
		}


		protected override IDictionary<string, object[]> RelationProperties { get {
			if (relationProperties != null) return relationProperties;
			relationProperties = new Dictionary<string, object[]>();
			relationProperties["SystemFormsOfParentForm"] = new object[] { "SystemFormsOfParentForm", "systemform", "systemform", "ancestorformid", "formid", "formid", "formid", "form_ancestor_form", typeof (SystemForm[]) };
			relationProperties["SystemFormAsParentForm"] = new object[] { "SystemFormAsParentForm", "systemform", "systemform", "formid", "ancestorformid", "formid", "formid", "form_ancestor_form", typeof (SystemForm) };
			relationProperties["OrganizationAsOrganizationId"] = new object[] { "OrganizationAsOrganizationId", "organization", "systemform", "organizationid", "organizationid", "formid", "formid", "organization_systemforms", typeof (Organization) };
			return relationProperties; } }


		#endregion

		/// <summary>
		/// Constructor for populating via LINQ queries given a LINQ anonymous type
		/// <param name="anonymousType">LINQ anonymous type.</param>
		/// </summary>
		public SystemForm(object anonymousType) : 
				this()
		{
            foreach (var p in anonymousType.GetType().GetProperties())
            {
                var value = p.GetValue(anonymousType, null);
                if (p.PropertyType == typeof(System.Guid))
                {
                    // Type is Guid, must be Id
                    base.Id = (System.Guid)value;
                    Attributes["formid"] = base.Id;
               }
                else if (p.Name == "FormattedValues")
                {
                    // Add Support for FormattedValues
                    FormattedValues.AddRange((FormattedValueCollection)value);
                }
                else
                {
                    Attributes[p.Name.ToLower()] = value;
                }
            }
		}


		#region Label/value pairs

		#region ComponentState

		public enum ComponentStateEnum
		{
			[EnumMember]Published = 0,
			[EnumMember]Unpublished = 1,
			[EnumMember]Deleted = 2,
			[EnumMember]DeletedUnpublished = 3,
		}

		#endregion
	
		#region FormState

		public enum FormStateEnum
		{
			[EnumMember]Inactive = 0,
			[EnumMember]Active = 1,
		}

		#endregion
	
		#region AIRRefreshed

		public enum AIRRefreshedEnum
		{
			[EnumMember]ClassicForm = 0,
			[EnumMember]AirForm = 1,
		}

		#endregion
	
		#region Refreshed

		public enum RefreshedEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region DefaultForm

		public enum DefaultFormEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region IsDesktopEnabled

		public enum IsDesktopEnabledEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region State

		public enum StateEnum
		{
			[EnumMember]Managed = 1,
			[EnumMember]Unmanaged = 0,
		}

		#endregion
	
		#region IsTabletEnabled

		public enum IsTabletEnabledEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region ObjectTypeCode

		public enum ObjectTypeCodeEnum
		{
		}

		#endregion
	
		#region FormType

		public enum FormTypeEnum
		{
			[EnumMember]Dashboard = 0,
			[EnumMember]AppointmentBook = 1,
			[EnumMember]Main = 2,
			[EnumMember]MiniCampaignBO = 3,
			[EnumMember]Preview = 4,
			[EnumMember]MobileExpress = 5,
			[EnumMember]QuickViewForm = 6,
			[EnumMember]QuickCreate = 7,
			[EnumMember]Dialog = 8,
			[EnumMember]TaskFlowForm = 9,
			[EnumMember]InteractionCentricDashboard = 10,
			[EnumMember]Card = 11,
			[EnumMember]MainInteractiveexperience = 12,
			[EnumMember]Other = 100,
			[EnumMember]MainBackup = 101,
			[EnumMember]AppointmentBookBackup = 102,
			[EnumMember]PowerBIDashboard = 103,
		}

		#endregion
	
		#endregion


		#region Metadata


		#region Enums

		public static class Enums
		{
			/// <summary>
			/// Gets the label corresponding to the option-set's value using its logical name,
			/// the value within, and the language code.
			/// </summary>
			/// <param name="logicalName">The logical name of the option-set in CRM</param>
			/// <param name="constant">The value from the option-set</param>
			/// <param name="languageCode">The language code from CRM</param>
			/// <returns></returns>
			public static string GetLabel(string logicalName, int constant, int languageCode = 1033)
			{
				return GeneratorHelpers.GetLabel(logicalName, constant, typeof(Enums), languageCode);
			}
			/// <summary>
			/// Gets the value corresponding to the option-set's label using its logical name,
			/// the value within, and the language code.
			/// </summary>
			/// <param name="logicalName">The logical name of the option-set in CRM</param>
			/// <param name="label">The label from the option-set</param>
			/// <param name="languageCode">The language code from CRM</param>
			/// <returns>The value corresponding to the label</returns>
			public static int GetValue(string logicalName, string label, int languageCode = 1033)
			{
				return GeneratorHelpers.GetValue(logicalName, label, typeof(Enums), languageCode);
			}

			#region Logical names

			public static class Names
			{
				public const string ComponentState = "componentstate";
				public const string FormState = "formactivationstate";
				public const string AIRRefreshed = "formpresentation";
				public const string Refreshed = "isairmerged";
				public const string DefaultForm = "isdefault";
				public const string IsDesktopEnabled = "isdesktopenabled";
				public const string State = "ismanaged";
				public const string IsTabletEnabled = "istabletenabled";
				public const string ObjectTypeCode = "objecttypecode";
				public const string FormType = "type";
			}

			#endregion

			#region Labels

			public static class Labels
			{
				public static class ComponentState 
				{
					public const string Published_1033 = "Published";
					public const string Unpublished_1033 = "Unpublished";
					public const string Deleted_1033 = "Deleted";
					public const string DeletedUnpublished_1033 = "Deleted Unpublished";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(ComponentState), label, languageCode);
					}
				}

				public static class FormState 
				{
					public const string Inactive_1033 = "Inactive";
					public const string Active_1033 = "Active";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(FormState), label, languageCode);
					}
				}

				public static class AIRRefreshed 
				{
					public const string ClassicForm_1033 = "ClassicForm";
					public const string AirForm_1033 = "AirForm";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(AIRRefreshed), label, languageCode);
					}
				}

				public static class Refreshed 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(Refreshed), label, languageCode);
					}
				}

				public static class DefaultForm 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(DefaultForm), label, languageCode);
					}
				}

				public static class IsDesktopEnabled 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(IsDesktopEnabled), label, languageCode);
					}
				}

				public static class State 
				{
					public const string Managed_1033 = "Managed";
					public const string Unmanaged_1033 = "Unmanaged";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(State), label, languageCode);
					}
				}

				public static class IsTabletEnabled 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(IsTabletEnabled), label, languageCode);
					}
				}

				public static class ObjectTypeCode 
				{

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(ObjectTypeCode), label, languageCode);
					}
				}

				public static class FormType 
				{
					public const string Dashboard_1033 = "Dashboard";
					public const string AppointmentBook_1033 = "AppointmentBook";
					public const string Main_1033 = "Main";
					public const string MiniCampaignBO_1033 = "MiniCampaignBO";
					public const string Preview_1033 = "Preview";
					public const string MobileExpress_1033 = "Mobile - Express";
					public const string QuickViewForm_1033 = "Quick View Form";
					public const string QuickCreate_1033 = "Quick Create";
					public const string Dialog_1033 = "Dialog";
					public const string TaskFlowForm_1033 = "Task Flow Form";
					public const string InteractionCentricDashboard_1033 = "InteractionCentricDashboard";
					public const string Card_1033 = "Card";
					public const string MainInteractiveexperience_1033 = "Main - Interactive experience";
					public const string Other_1033 = "Other";
					public const string MainBackup_1033 = "MainBackup";
					public const string AppointmentBookBackup_1033 = "AppointmentBookBackup";
					public const string PowerBIDashboard_1033 = "Power BI Dashboard";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(FormType), label, languageCode);
					}
				}

			}

			#endregion
		}

		#endregion

		#region Fields

		public static class Fields
		{
			#region Logical names

			public const string ParentForm = "ancestorformid";
			public const string CanBeDeleted = "canbedeleted";
			public const string ComponentState = "componentstate";
			public const string Description = "description";
			public const string FormState = "formactivationstate";
			public const string FormIdId = "formid";
			public const string FormIdUnique = "formidunique";
			public const string AIRRefreshed = "formpresentation";
			public const string FormXml = "formxml";
			public const string IntroducedVersion = "introducedversion";
			public const string Refreshed = "isairmerged";
			public const string Customizable = "iscustomizable";
			public const string DefaultForm = "isdefault";
			public const string IsDesktopEnabled = "isdesktopenabled";
			public const string State = "ismanaged";
			public const string IsTabletEnabled = "istabletenabled";
			public const string Name = "name";
			public const string ObjectTypeCode = "objecttypecode";
			public const string OrganizationId = "organizationid";
			public const string RecordOverwriteTime = "overwritetime";
			public const string PublishedOn = "publishedon";
			public const string Solution_SolutionId = "solutionid";
			public const string FormType = "type";
			public const string UniqueName = "uniquename";
			public const string Version = "version";
			public const string VersionNumber = "versionnumber";

			#endregion

			#region Schema names

			public static class Schema
			{
				public const string ParentForm = "AncestorFormId";
				public const string CanBeDeleted = "CanBeDeleted";
				public const string ComponentState = "ComponentState";
				public const string Description = "Description";
				public const string FormState = "FormActivationState";
				public const string FormIdId = "FormId";
				public const string FormIdUnique = "FormIdUnique";
				public const string AIRRefreshed = "FormPresentation";
				public const string FormXml = "FormXml";
				public const string IntroducedVersion = "IntroducedVersion";
				public const string Refreshed = "IsAIRMerged";
				public const string Customizable = "IsCustomizable";
				public const string DefaultForm = "IsDefault";
				public const string IsDesktopEnabled = "IsDesktopEnabled";
				public const string State = "IsManaged";
				public const string IsTabletEnabled = "IsTabletEnabled";
				public const string Name = "Name";
				public const string ObjectTypeCode = "ObjectTypeCode";
				public const string OrganizationId = "OrganizationId";
				public const string RecordOverwriteTime = "OverwriteTime";
				public const string PublishedOn = "PublishedOn";
				public const string Solution_SolutionId = "SolutionId";
				public const string FormType = "Type";
				public const string UniqueName = "UniqueName";
				public const string Version = "Version";
				public const string VersionNumber = "VersionNumber";
			}

			#endregion

			#region Labels

			public static class Labels
			{
				public static class ParentForm
				{
					public const string _1033 = "Parent Form";
				}

				public static class CanBeDeleted
				{
					public const string _1033 = "Can Be Deleted";
				}

				public static class ComponentState
				{
					public const string _1033 = "Component State";
				}

				public static class Description
				{
					public const string _1033 = "Description";
				}

				public static class FormState
				{
					public const string _1033 = "Form State";
				}

				public static class FormIdId
				{
				}

				public static class FormIdUnique
				{
				}

				public static class AIRRefreshed
				{
					public const string _1033 = "AIR Refreshed";
				}

				public static class FormXml
				{
				}

				public static class IntroducedVersion
				{
					public const string _1033 = "Introduced Version";
				}

				public static class Refreshed
				{
					public const string _1033 = "Refreshed";
				}

				public static class Customizable
				{
					public const string _1033 = "Customizable";
				}

				public static class DefaultForm
				{
					public const string _1033 = "Default Form";
				}

				public static class IsDesktopEnabled
				{
					public const string _1033 = "Is Desktop Enabled";
				}

				public static class State
				{
					public const string _1033 = "State";
				}

				public static class IsTabletEnabled
				{
					public const string _1033 = "Is Tablet Enabled";
				}

				public static class Name
				{
					public const string _1033 = "Name";
				}

				public static class ObjectTypeCode
				{
				}

				public static class OrganizationId
				{
				}

				public static class RecordOverwriteTime
				{
					public const string _1033 = "Record Overwrite Time";
				}

				public static class PublishedOn
				{
				}

				public static class Solution_SolutionId
				{
					public const string _1033 = "Solution";
				}

				public static class FormType
				{
					public const string _1033 = "Form Type";
				}

				public static class UniqueName
				{
					public const string _1033 = "Unique Name";
				}

				public static class Version
				{
				}

				public static class VersionNumber
				{
				}

			}

			#endregion
		}

		#endregion

		#region Relations

		public static class Relations
		{
			public static class OneToN
			{
				public const string SystemFormsOfParentForm = "form_ancestor_form";
			}
			
			public static class NToOne
			{
				public const string SystemFormAsParentForm = "form_ancestor_form";
				public const string OrganizationAsOrganizationId = "organization_systemforms";

				public static class Lookups
				{
					public const string SystemFormAsParentForm = "ancestorformid";
					public const string OrganizationAsOrganizationId = "organizationid";
				}
			}

			public static class NToN
			{

			}
		}

		#endregion

		#endregion
	}

	#region SystemFormViewModel contract

	[DataContract, CrmEntityMapping("systemform", "SystemForm", "System Form")]
	public partial class SystemFormViewModel : EntityContract
	{
		[DataMember, CrmFieldMapping("formid")] public Guid? Id;
		[DataMember, CrmFieldMapping("name")] public string Name;
		[DataMember, CrmFieldMapping("objecttypecode")] public string ObjectTypeCode;

		#region Relationships


		#endregion
	}

	#endregion

	#endregion

	#region User

	/// <summary>
	/// 'SystemUser'.<br />
	/// Person with access to the Microsoft CRM system and who owns objects in the Microsoft CRM database.
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract, EntityLogicalName("systemuser")]
	public partial class User : GeneratedEntity<User.RelationName>
	{
		
		public User() : 
				base(EntityLogicalName)
		{
		}
		
		public const string DisplayName = "User";
		public const string SchemaName = "SystemUser";
		public const string EntityLogicalName = "systemuser";
		public const int EntityTypeCode = 8;
		
		public class RelationName : RelationNameBase
		{
			public RelationName(string name) : base(name)
			{}
		}


		#region Attributes

		[AttributeLogicalName("systemuserid"), DataMember]
		public override System.Guid Id
		{
			get
			{
				return (UserId == null || UserId == Guid.Empty) ? base.Id : UserId.GetValueOrDefault();
			}
			
			set
			{
                if (value == Guid.Empty) {
                    Attributes.Remove("systemuserid");
                    base.Id = value;
                } else {
				    UserId = value;
                }
			}
		}

        /// <summary>
        ///  
		/// 'AccessMode'.<br />
        /// Type of user.
        /// </summary>
		[AttributeLogicalName("accessmode")]
		public AccessModeEnum? AccessMode
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("accessmode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("accessmode"))
				    value = (OptionSetValue) backupAttributeCollection["accessmode"];
                return value == null ? (AccessModeEnum?) null : (AccessModeEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("AccessMode");
                if (value != null)
				    SetAttributeValue("accessmode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("accessmode", value);
				OnPropertyChanged("AccessMode");
			}
		}

        /// <summary>
        ///  
		/// 'Address1_AddressId'.<br />
        /// Unique identifier for address 1.
        /// </summary>
		[AttributeLogicalName("address1_addressid")]
		public Guid? Address1ID
		{
			get
			{
				var value = GetAttributeValue<Guid?>("address1_addressid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_addressid"))
				    value = (Guid?) backupAttributeCollection["address1_addressid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address1ID");
					SetAttributeValue("address1_addressid", value);
				OnPropertyChanged("Address1ID");
			}
		}

        /// <summary>
        ///  
		/// 'Address1_AddressTypeCode'.<br />
        /// Type of address for address 1, such as billing, shipping, or primary address.
        /// </summary>
		[AttributeLogicalName("address1_addresstypecode")]
		public Address1AddressTypeEnum? Address1AddressType
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("address1_addresstypecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_addresstypecode"))
				    value = (OptionSetValue) backupAttributeCollection["address1_addresstypecode"];
                return value == null ? (Address1AddressTypeEnum?) null : (Address1AddressTypeEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("Address1AddressType");
                if (value != null)
				    SetAttributeValue("address1_addresstypecode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("address1_addresstypecode", value);
				OnPropertyChanged("Address1AddressType");
			}
		}

        /// <summary>
        /// [MaximumLength=128] 
		/// 'Address1_City'.<br />
        /// City name for address 1.
        /// </summary>
		[AttributeLogicalName("address1_city"), MaxLength(128)]
		public string City
		{
			get
			{
				var value = GetAttributeValue<string>("address1_city");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_city"))
				    value = (string) backupAttributeCollection["address1_city"];
			    return value;
			}
			set
			{
				OnPropertyChanging("City");
					SetAttributeValue("address1_city", value);
				OnPropertyChanged("City");
			}
		}

        /// <summary>
        /// [MaximumLength=1000] 
		/// 'Address1_Composite'.<br />
        /// Shows the complete primary address.
        /// </summary>
		[AttributeLogicalName("address1_composite"), MaxLength(1000)]
		public string Address
		{
			get
			{
				var value = GetAttributeValue<string>("address1_composite");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_composite"))
				    value = (string) backupAttributeCollection["address1_composite"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address");
					SetAttributeValue("address1_composite", value);
				OnPropertyChanged("Address");
			}
		}

        /// <summary>
        /// [MaximumLength=128] 
		/// 'Address1_Country'.<br />
        /// Country/region name in address 1.
        /// </summary>
		[AttributeLogicalName("address1_country"), MaxLength(128)]
		public string CountryRegion
		{
			get
			{
				var value = GetAttributeValue<string>("address1_country");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_country"))
				    value = (string) backupAttributeCollection["address1_country"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CountryRegion");
					SetAttributeValue("address1_country", value);
				OnPropertyChanged("CountryRegion");
			}
		}

        /// <summary>
        /// [MaximumLength=128] 
		/// 'Address1_County'.<br />
        /// County name for address 1.
        /// </summary>
		[AttributeLogicalName("address1_county"), MaxLength(128)]
		public string Address1County
		{
			get
			{
				var value = GetAttributeValue<string>("address1_county");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_county"))
				    value = (string) backupAttributeCollection["address1_county"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address1County");
					SetAttributeValue("address1_county", value);
				OnPropertyChanged("Address1County");
			}
		}

        /// <summary>
        /// [MaximumLength=64] 
		/// 'Address1_Fax'.<br />
        /// Fax number for address 1.
        /// </summary>
		[AttributeLogicalName("address1_fax"), MaxLength(64)]
		public string Address1Fax
		{
			get
			{
				var value = GetAttributeValue<string>("address1_fax");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_fax"))
				    value = (string) backupAttributeCollection["address1_fax"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address1Fax");
					SetAttributeValue("address1_fax", value);
				OnPropertyChanged("Address1Fax");
			}
		}

        /// <summary>
        /// [Range(-90, 90)] 
		/// 'Address1_Latitude'.<br />
        /// Latitude for address 1.
        /// </summary>
		[AttributeLogicalName("address1_latitude"), InRange("-90", "90", typeof(double))]
		public double? Address1Latitude
		{
			get
			{
				var value = GetAttributeValue<double?>("address1_latitude");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_latitude"))
				    value = (double?) backupAttributeCollection["address1_latitude"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address1Latitude");
					SetAttributeValue("address1_latitude", value);
				OnPropertyChanged("Address1Latitude");
			}
		}

        /// <summary>
        /// [MaximumLength=1024] 
		/// 'Address1_Line1'.<br />
        /// First line for entering address 1 information.
        /// </summary>
		[AttributeLogicalName("address1_line1"), MaxLength(1024)]
		public string Street1
		{
			get
			{
				var value = GetAttributeValue<string>("address1_line1");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_line1"))
				    value = (string) backupAttributeCollection["address1_line1"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Street1");
					SetAttributeValue("address1_line1", value);
				OnPropertyChanged("Street1");
			}
		}

        /// <summary>
        /// [MaximumLength=1024] 
		/// 'Address1_Line2'.<br />
        /// Second line for entering address 1 information.
        /// </summary>
		[AttributeLogicalName("address1_line2"), MaxLength(1024)]
		public string Street2
		{
			get
			{
				var value = GetAttributeValue<string>("address1_line2");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_line2"))
				    value = (string) backupAttributeCollection["address1_line2"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Street2");
					SetAttributeValue("address1_line2", value);
				OnPropertyChanged("Street2");
			}
		}

        /// <summary>
        /// [MaximumLength=1024] 
		/// 'Address1_Line3'.<br />
        /// Third line for entering address 1 information.
        /// </summary>
		[AttributeLogicalName("address1_line3"), MaxLength(1024)]
		public string Street3
		{
			get
			{
				var value = GetAttributeValue<string>("address1_line3");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_line3"))
				    value = (string) backupAttributeCollection["address1_line3"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Street3");
					SetAttributeValue("address1_line3", value);
				OnPropertyChanged("Street3");
			}
		}

        /// <summary>
        /// [Range(-180, 180)] 
		/// 'Address1_Longitude'.<br />
        /// Longitude for address 1.
        /// </summary>
		[AttributeLogicalName("address1_longitude"), InRange("-180", "180", typeof(double))]
		public double? Address1Longitude
		{
			get
			{
				var value = GetAttributeValue<double?>("address1_longitude");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_longitude"))
				    value = (double?) backupAttributeCollection["address1_longitude"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address1Longitude");
					SetAttributeValue("address1_longitude", value);
				OnPropertyChanged("Address1Longitude");
			}
		}

        /// <summary>
        /// [MaximumLength=100] 
		/// 'Address1_Name'.<br />
        /// Name to enter for address 1.
        /// </summary>
		[AttributeLogicalName("address1_name"), MaxLength(100)]
		public string Address1Name
		{
			get
			{
				var value = GetAttributeValue<string>("address1_name");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_name"))
				    value = (string) backupAttributeCollection["address1_name"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address1Name");
					SetAttributeValue("address1_name", value);
				OnPropertyChanged("Address1Name");
			}
		}

        /// <summary>
        /// [MaximumLength=40] 
		/// 'Address1_PostalCode'.<br />
        /// ZIP Code or postal code for address 1.
        /// </summary>
		[AttributeLogicalName("address1_postalcode"), MaxLength(40)]
		public string ZIPPostalCode
		{
			get
			{
				var value = GetAttributeValue<string>("address1_postalcode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_postalcode"))
				    value = (string) backupAttributeCollection["address1_postalcode"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ZIPPostalCode");
					SetAttributeValue("address1_postalcode", value);
				OnPropertyChanged("ZIPPostalCode");
			}
		}

        /// <summary>
        /// [MaximumLength=40] 
		/// 'Address1_PostOfficeBox'.<br />
        /// Post office box number for address 1.
        /// </summary>
		[AttributeLogicalName("address1_postofficebox"), MaxLength(40)]
		public string Address1PostOfficeBox
		{
			get
			{
				var value = GetAttributeValue<string>("address1_postofficebox");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_postofficebox"))
				    value = (string) backupAttributeCollection["address1_postofficebox"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address1PostOfficeBox");
					SetAttributeValue("address1_postofficebox", value);
				OnPropertyChanged("Address1PostOfficeBox");
			}
		}

        /// <summary>
        ///  
		/// 'Address1_ShippingMethodCode'.<br />
        /// Method of shipment for address 1.
        /// </summary>
		[AttributeLogicalName("address1_shippingmethodcode")]
		public Address1ShippingMethodEnum? Address1ShippingMethod
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("address1_shippingmethodcode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_shippingmethodcode"))
				    value = (OptionSetValue) backupAttributeCollection["address1_shippingmethodcode"];
                return value == null ? (Address1ShippingMethodEnum?) null : (Address1ShippingMethodEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("Address1ShippingMethod");
                if (value != null)
				    SetAttributeValue("address1_shippingmethodcode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("address1_shippingmethodcode", value);
				OnPropertyChanged("Address1ShippingMethod");
			}
		}

        /// <summary>
        /// [MaximumLength=128] 
		/// 'Address1_StateOrProvince'.<br />
        /// State or province for address 1.
        /// </summary>
		[AttributeLogicalName("address1_stateorprovince"), MaxLength(128)]
		public string StateProvince
		{
			get
			{
				var value = GetAttributeValue<string>("address1_stateorprovince");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_stateorprovince"))
				    value = (string) backupAttributeCollection["address1_stateorprovince"];
			    return value;
			}
			set
			{
				OnPropertyChanging("StateProvince");
					SetAttributeValue("address1_stateorprovince", value);
				OnPropertyChanged("StateProvince");
			}
		}

        /// <summary>
        /// [MaximumLength=64] 
		/// 'Address1_Telephone1'.<br />
        /// First telephone number associated with address 1.
        /// </summary>
		[AttributeLogicalName("address1_telephone1"), MaxLength(64)]
		public string MainPhone
		{
			get
			{
				var value = GetAttributeValue<string>("address1_telephone1");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_telephone1"))
				    value = (string) backupAttributeCollection["address1_telephone1"];
			    return value;
			}
			set
			{
				OnPropertyChanging("MainPhone");
					SetAttributeValue("address1_telephone1", value);
				OnPropertyChanged("MainPhone");
			}
		}

        /// <summary>
        /// [MaximumLength=50] 
		/// 'Address1_Telephone2'.<br />
        /// Second telephone number associated with address 1.
        /// </summary>
		[AttributeLogicalName("address1_telephone2"), MaxLength(50)]
		public string OtherPhone
		{
			get
			{
				var value = GetAttributeValue<string>("address1_telephone2");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_telephone2"))
				    value = (string) backupAttributeCollection["address1_telephone2"];
			    return value;
			}
			set
			{
				OnPropertyChanging("OtherPhone");
					SetAttributeValue("address1_telephone2", value);
				OnPropertyChanged("OtherPhone");
			}
		}

        /// <summary>
        /// [MaximumLength=50] 
		/// 'Address1_Telephone3'.<br />
        /// Third telephone number associated with address 1.
        /// </summary>
		[AttributeLogicalName("address1_telephone3"), MaxLength(50)]
		public string Pager
		{
			get
			{
				var value = GetAttributeValue<string>("address1_telephone3");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_telephone3"))
				    value = (string) backupAttributeCollection["address1_telephone3"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Pager");
					SetAttributeValue("address1_telephone3", value);
				OnPropertyChanged("Pager");
			}
		}

        /// <summary>
        /// [MaximumLength=4] 
		/// 'Address1_UPSZone'.<br />
        /// United Parcel Service (UPS) zone for address 1.
        /// </summary>
		[AttributeLogicalName("address1_upszone"), MaxLength(4)]
		public string Address1UPSZone
		{
			get
			{
				var value = GetAttributeValue<string>("address1_upszone");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_upszone"))
				    value = (string) backupAttributeCollection["address1_upszone"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address1UPSZone");
					SetAttributeValue("address1_upszone", value);
				OnPropertyChanged("Address1UPSZone");
			}
		}

        /// <summary>
        /// [Range(-1500, 1500)] 
		/// 'Address1_UTCOffset'.<br />
        /// UTC offset for address 1. This is the difference between local time and standard Coordinated Universal Time.
        /// </summary>
		[AttributeLogicalName("address1_utcoffset"), InRange("-1500", "1500", typeof(int))]
		public int? Address1UTCOffset
		{
			get
			{
				var value = GetAttributeValue<int?>("address1_utcoffset");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_utcoffset"))
				    value = (int?) backupAttributeCollection["address1_utcoffset"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address1UTCOffset");
					SetAttributeValue("address1_utcoffset", value);
				OnPropertyChanged("Address1UTCOffset");
			}
		}

        /// <summary>
        ///  
		/// 'Address2_AddressId'.<br />
        /// Unique identifier for address 2.
        /// </summary>
		[AttributeLogicalName("address2_addressid")]
		public Guid? Address2ID
		{
			get
			{
				var value = GetAttributeValue<Guid?>("address2_addressid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_addressid"))
				    value = (Guid?) backupAttributeCollection["address2_addressid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address2ID");
					SetAttributeValue("address2_addressid", value);
				OnPropertyChanged("Address2ID");
			}
		}

        /// <summary>
        ///  
		/// 'Address2_AddressTypeCode'.<br />
        /// Type of address for address 2, such as billing, shipping, or primary address.
        /// </summary>
		[AttributeLogicalName("address2_addresstypecode")]
		public Address2AddressTypeEnum? Address2AddressType
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("address2_addresstypecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_addresstypecode"))
				    value = (OptionSetValue) backupAttributeCollection["address2_addresstypecode"];
                return value == null ? (Address2AddressTypeEnum?) null : (Address2AddressTypeEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("Address2AddressType");
                if (value != null)
				    SetAttributeValue("address2_addresstypecode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("address2_addresstypecode", value);
				OnPropertyChanged("Address2AddressType");
			}
		}

        /// <summary>
        /// [MaximumLength=128] 
		/// 'Address2_City'.<br />
        /// City name for address 2.
        /// </summary>
		[AttributeLogicalName("address2_city"), MaxLength(128)]
		public string OtherCity
		{
			get
			{
				var value = GetAttributeValue<string>("address2_city");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_city"))
				    value = (string) backupAttributeCollection["address2_city"];
			    return value;
			}
			set
			{
				OnPropertyChanging("OtherCity");
					SetAttributeValue("address2_city", value);
				OnPropertyChanged("OtherCity");
			}
		}

        /// <summary>
        /// [MaximumLength=1000] 
		/// 'Address2_Composite'.<br />
        /// Shows the complete secondary address.
        /// </summary>
		[AttributeLogicalName("address2_composite"), MaxLength(1000)]
		public string OtherAddress
		{
			get
			{
				var value = GetAttributeValue<string>("address2_composite");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_composite"))
				    value = (string) backupAttributeCollection["address2_composite"];
			    return value;
			}
			set
			{
				OnPropertyChanging("OtherAddress");
					SetAttributeValue("address2_composite", value);
				OnPropertyChanged("OtherAddress");
			}
		}

        /// <summary>
        /// [MaximumLength=128] 
		/// 'Address2_Country'.<br />
        /// Country/region name in address 2.
        /// </summary>
		[AttributeLogicalName("address2_country"), MaxLength(128)]
		public string OtherCountryRegion
		{
			get
			{
				var value = GetAttributeValue<string>("address2_country");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_country"))
				    value = (string) backupAttributeCollection["address2_country"];
			    return value;
			}
			set
			{
				OnPropertyChanging("OtherCountryRegion");
					SetAttributeValue("address2_country", value);
				OnPropertyChanged("OtherCountryRegion");
			}
		}

        /// <summary>
        /// [MaximumLength=128] 
		/// 'Address2_County'.<br />
        /// County name for address 2.
        /// </summary>
		[AttributeLogicalName("address2_county"), MaxLength(128)]
		public string Address2County
		{
			get
			{
				var value = GetAttributeValue<string>("address2_county");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_county"))
				    value = (string) backupAttributeCollection["address2_county"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address2County");
					SetAttributeValue("address2_county", value);
				OnPropertyChanged("Address2County");
			}
		}

        /// <summary>
        /// [MaximumLength=50] 
		/// 'Address2_Fax'.<br />
        /// Fax number for address 2.
        /// </summary>
		[AttributeLogicalName("address2_fax"), MaxLength(50)]
		public string Address2Fax
		{
			get
			{
				var value = GetAttributeValue<string>("address2_fax");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_fax"))
				    value = (string) backupAttributeCollection["address2_fax"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address2Fax");
					SetAttributeValue("address2_fax", value);
				OnPropertyChanged("Address2Fax");
			}
		}

        /// <summary>
        /// [Range(-90, 90)] 
		/// 'Address2_Latitude'.<br />
        /// Latitude for address 2.
        /// </summary>
		[AttributeLogicalName("address2_latitude"), InRange("-90", "90", typeof(double))]
		public double? Address2Latitude
		{
			get
			{
				var value = GetAttributeValue<double?>("address2_latitude");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_latitude"))
				    value = (double?) backupAttributeCollection["address2_latitude"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address2Latitude");
					SetAttributeValue("address2_latitude", value);
				OnPropertyChanged("Address2Latitude");
			}
		}

        /// <summary>
        /// [MaximumLength=1024] 
		/// 'Address2_Line1'.<br />
        /// First line for entering address 2 information.
        /// </summary>
		[AttributeLogicalName("address2_line1"), MaxLength(1024)]
		public string OtherStreet1
		{
			get
			{
				var value = GetAttributeValue<string>("address2_line1");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_line1"))
				    value = (string) backupAttributeCollection["address2_line1"];
			    return value;
			}
			set
			{
				OnPropertyChanging("OtherStreet1");
					SetAttributeValue("address2_line1", value);
				OnPropertyChanged("OtherStreet1");
			}
		}

        /// <summary>
        /// [MaximumLength=1024] 
		/// 'Address2_Line2'.<br />
        /// Second line for entering address 2 information.
        /// </summary>
		[AttributeLogicalName("address2_line2"), MaxLength(1024)]
		public string OtherStreet2
		{
			get
			{
				var value = GetAttributeValue<string>("address2_line2");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_line2"))
				    value = (string) backupAttributeCollection["address2_line2"];
			    return value;
			}
			set
			{
				OnPropertyChanging("OtherStreet2");
					SetAttributeValue("address2_line2", value);
				OnPropertyChanged("OtherStreet2");
			}
		}

        /// <summary>
        /// [MaximumLength=1024] 
		/// 'Address2_Line3'.<br />
        /// Third line for entering address 2 information.
        /// </summary>
		[AttributeLogicalName("address2_line3"), MaxLength(1024)]
		public string OtherStreet3
		{
			get
			{
				var value = GetAttributeValue<string>("address2_line3");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_line3"))
				    value = (string) backupAttributeCollection["address2_line3"];
			    return value;
			}
			set
			{
				OnPropertyChanging("OtherStreet3");
					SetAttributeValue("address2_line3", value);
				OnPropertyChanged("OtherStreet3");
			}
		}

        /// <summary>
        /// [Range(-180, 180)] 
		/// 'Address2_Longitude'.<br />
        /// Longitude for address 2.
        /// </summary>
		[AttributeLogicalName("address2_longitude"), InRange("-180", "180", typeof(double))]
		public double? Address2Longitude
		{
			get
			{
				var value = GetAttributeValue<double?>("address2_longitude");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_longitude"))
				    value = (double?) backupAttributeCollection["address2_longitude"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address2Longitude");
					SetAttributeValue("address2_longitude", value);
				OnPropertyChanged("Address2Longitude");
			}
		}

        /// <summary>
        /// [MaximumLength=100] 
		/// 'Address2_Name'.<br />
        /// Name to enter for address 2.
        /// </summary>
		[AttributeLogicalName("address2_name"), MaxLength(100)]
		public string Address2Name
		{
			get
			{
				var value = GetAttributeValue<string>("address2_name");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_name"))
				    value = (string) backupAttributeCollection["address2_name"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address2Name");
					SetAttributeValue("address2_name", value);
				OnPropertyChanged("Address2Name");
			}
		}

        /// <summary>
        /// [MaximumLength=40] 
		/// 'Address2_PostalCode'.<br />
        /// ZIP Code or postal code for address 2.
        /// </summary>
		[AttributeLogicalName("address2_postalcode"), MaxLength(40)]
		public string OtherZIPPostalCode
		{
			get
			{
				var value = GetAttributeValue<string>("address2_postalcode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_postalcode"))
				    value = (string) backupAttributeCollection["address2_postalcode"];
			    return value;
			}
			set
			{
				OnPropertyChanging("OtherZIPPostalCode");
					SetAttributeValue("address2_postalcode", value);
				OnPropertyChanged("OtherZIPPostalCode");
			}
		}

        /// <summary>
        /// [MaximumLength=40] 
		/// 'Address2_PostOfficeBox'.<br />
        /// Post office box number for address 2.
        /// </summary>
		[AttributeLogicalName("address2_postofficebox"), MaxLength(40)]
		public string Address2PostOfficeBox
		{
			get
			{
				var value = GetAttributeValue<string>("address2_postofficebox");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_postofficebox"))
				    value = (string) backupAttributeCollection["address2_postofficebox"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address2PostOfficeBox");
					SetAttributeValue("address2_postofficebox", value);
				OnPropertyChanged("Address2PostOfficeBox");
			}
		}

        /// <summary>
        ///  
		/// 'Address2_ShippingMethodCode'.<br />
        /// Method of shipment for address 2.
        /// </summary>
		[AttributeLogicalName("address2_shippingmethodcode")]
		public Address2ShippingMethodEnum? Address2ShippingMethod
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("address2_shippingmethodcode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_shippingmethodcode"))
				    value = (OptionSetValue) backupAttributeCollection["address2_shippingmethodcode"];
                return value == null ? (Address2ShippingMethodEnum?) null : (Address2ShippingMethodEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("Address2ShippingMethod");
                if (value != null)
				    SetAttributeValue("address2_shippingmethodcode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("address2_shippingmethodcode", value);
				OnPropertyChanged("Address2ShippingMethod");
			}
		}

        /// <summary>
        /// [MaximumLength=128] 
		/// 'Address2_StateOrProvince'.<br />
        /// State or province for address 2.
        /// </summary>
		[AttributeLogicalName("address2_stateorprovince"), MaxLength(128)]
		public string OtherStateProvince
		{
			get
			{
				var value = GetAttributeValue<string>("address2_stateorprovince");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_stateorprovince"))
				    value = (string) backupAttributeCollection["address2_stateorprovince"];
			    return value;
			}
			set
			{
				OnPropertyChanging("OtherStateProvince");
					SetAttributeValue("address2_stateorprovince", value);
				OnPropertyChanged("OtherStateProvince");
			}
		}

        /// <summary>
        /// [MaximumLength=50] 
		/// 'Address2_Telephone1'.<br />
        /// First telephone number associated with address 2.
        /// </summary>
		[AttributeLogicalName("address2_telephone1"), MaxLength(50)]
		public string Address2Telephone1
		{
			get
			{
				var value = GetAttributeValue<string>("address2_telephone1");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_telephone1"))
				    value = (string) backupAttributeCollection["address2_telephone1"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address2Telephone1");
					SetAttributeValue("address2_telephone1", value);
				OnPropertyChanged("Address2Telephone1");
			}
		}

        /// <summary>
        /// [MaximumLength=50] 
		/// 'Address2_Telephone2'.<br />
        /// Second telephone number associated with address 2.
        /// </summary>
		[AttributeLogicalName("address2_telephone2"), MaxLength(50)]
		public string Address2Telephone2
		{
			get
			{
				var value = GetAttributeValue<string>("address2_telephone2");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_telephone2"))
				    value = (string) backupAttributeCollection["address2_telephone2"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address2Telephone2");
					SetAttributeValue("address2_telephone2", value);
				OnPropertyChanged("Address2Telephone2");
			}
		}

        /// <summary>
        /// [MaximumLength=50] 
		/// 'Address2_Telephone3'.<br />
        /// Third telephone number associated with address 2.
        /// </summary>
		[AttributeLogicalName("address2_telephone3"), MaxLength(50)]
		public string Address2Telephone3
		{
			get
			{
				var value = GetAttributeValue<string>("address2_telephone3");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_telephone3"))
				    value = (string) backupAttributeCollection["address2_telephone3"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address2Telephone3");
					SetAttributeValue("address2_telephone3", value);
				OnPropertyChanged("Address2Telephone3");
			}
		}

        /// <summary>
        /// [MaximumLength=4] 
		/// 'Address2_UPSZone'.<br />
        /// United Parcel Service (UPS) zone for address 2.
        /// </summary>
		[AttributeLogicalName("address2_upszone"), MaxLength(4)]
		public string Address2UPSZone
		{
			get
			{
				var value = GetAttributeValue<string>("address2_upszone");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_upszone"))
				    value = (string) backupAttributeCollection["address2_upszone"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address2UPSZone");
					SetAttributeValue("address2_upszone", value);
				OnPropertyChanged("Address2UPSZone");
			}
		}

        /// <summary>
        /// [Range(-1500, 1500)] 
		/// 'Address2_UTCOffset'.<br />
        /// UTC offset for address 2. This is the difference between local time and standard Coordinated Universal Time.
        /// </summary>
		[AttributeLogicalName("address2_utcoffset"), InRange("-1500", "1500", typeof(int))]
		public int? Address2UTCOffset
		{
			get
			{
				var value = GetAttributeValue<int?>("address2_utcoffset");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_utcoffset"))
				    value = (int?) backupAttributeCollection["address2_utcoffset"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address2UTCOffset");
					SetAttributeValue("address2_utcoffset", value);
				OnPropertyChanged("Address2UTCOffset");
			}
		}

        /// <summary>
        ///  
		/// 'ApplicationId'.<br />
        /// The identifier for the application. This is used to access data in another application.
        /// </summary>
		[AttributeLogicalName("applicationid")]
		public Guid? ApplicationID
		{
			get
			{
				var value = GetAttributeValue<Guid?>("applicationid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("applicationid"))
				    value = (Guid?) backupAttributeCollection["applicationid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ApplicationID");
					SetAttributeValue("applicationid", value);
				OnPropertyChanged("ApplicationID");
			}
		}

        /// <summary>
        /// [MaximumLength=1024] 
		/// 'ApplicationIdUri'.<br />
        /// The URI used as a unique logical identifier for the external app. This can be used to validate the application.
        /// </summary>
		[AttributeLogicalName("applicationiduri"), MaxLength(1024)]
		public string ApplicationIDURI
		{
			get
			{
				var value = GetAttributeValue<string>("applicationiduri");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("applicationiduri"))
				    value = (string) backupAttributeCollection["applicationiduri"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ApplicationIDURI");
					SetAttributeValue("applicationiduri", value);
				OnPropertyChanged("ApplicationIDURI");
			}
		}

        /// <summary>
        ///  
		/// 'AzureActiveDirectoryObjectId'.<br />
        /// This is the application directory object Id.
        /// </summary>
		[AttributeLogicalName("azureactivedirectoryobjectid")]
		public Guid? AzureADObjectID
		{
			get
			{
				var value = GetAttributeValue<Guid?>("azureactivedirectoryobjectid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("azureactivedirectoryobjectid"))
				    value = (Guid?) backupAttributeCollection["azureactivedirectoryobjectid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("AzureADObjectID");
					SetAttributeValue("azureactivedirectoryobjectid", value);
				OnPropertyChanged("AzureADObjectID");
			}
		}

        /// <summary>
        ///  
		/// 'BusinessUnitId'.<br />
        /// Unique identifier of the business unit with which the user is associated.
        /// </summary>
		[AttributeLogicalName("businessunitid")]
		public Guid? BusinessUnit
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("businessunitid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("businessunitid"))
				    value = (EntityReference) backupAttributeCollection["businessunitid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("BusinessUnit");
                if (value != null)
				    SetAttributeValue("businessunitid", new EntityReference("businessunit", value.Value));
                else
					SetAttributeValue("businessunitid", value);
				OnPropertyChanged("BusinessUnit");
			}
		}

        public string BusinessUnitName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("businessunitid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("businessunitid"))
				    value = (EntityReference) backupAttributeCollection["businessunitid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'CalendarId'.<br />
        /// Fiscal calendar associated with the user.
        /// </summary>
		[AttributeLogicalName("calendarid")]
		public Guid? Calendar
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("calendarid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("calendarid"))
				    value = (EntityReference) backupAttributeCollection["calendarid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("Calendar");
                if (value != null)
				    SetAttributeValue("calendarid", new EntityReference("calendar", value.Value));
                else
					SetAttributeValue("calendarid", value);
				OnPropertyChanged("Calendar");
			}
		}

        public string CalendarName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("calendarid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("calendarid"))
				    value = (EntityReference) backupAttributeCollection["calendarid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'CALType'.<br />
        /// License type of user.
        /// </summary>
		[AttributeLogicalName("caltype")]
		public LicenseTypeEnum? LicenseType
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("caltype");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("caltype"))
				    value = (OptionSetValue) backupAttributeCollection["caltype"];
                return value == null ? (LicenseTypeEnum?) null : (LicenseTypeEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("LicenseType");
                if (value != null)
				    SetAttributeValue("caltype", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("caltype", value);
				OnPropertyChanged("LicenseType");
			}
		}

        /// <summary>
        ///  
		/// 'CreatedBy'.<br />
        /// Unique identifier of the user who created the user.
        /// </summary>
		[AttributeLogicalName("createdby")]
		public Guid? CreatedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdby"))
				    value = (EntityReference) backupAttributeCollection["createdby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CreatedBy");
                if (value != null)
				    SetAttributeValue("createdby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("createdby", value);
				OnPropertyChanged("CreatedBy");
			}
		}

        public string CreatedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdby"))
				    value = (EntityReference) backupAttributeCollection["createdby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'CreatedOn'.<br />
        /// Date and time when the user was created.
        /// </summary>
		[AttributeLogicalName("createdon")]
		public DateTime? CreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("createdon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdon"))
				    value = (DateTime?) backupAttributeCollection["createdon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CreatedOn");
					SetAttributeValue("createdon", value);
				OnPropertyChanged("CreatedOn");
			}
		}

        /// <summary>
        ///  
		/// 'CreatedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who created the systemuser.
        /// </summary>
		[AttributeLogicalName("createdonbehalfby")]
		public Guid? CreatedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["createdonbehalfby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CreatedByDelegate");
                if (value != null)
				    SetAttributeValue("createdonbehalfby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("createdonbehalfby", value);
				OnPropertyChanged("CreatedByDelegate");
			}
		}

        public string CreatedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["createdonbehalfby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'DefaultFiltersPopulated'.<br />
        /// Indicates if default outlook filters have been populated.
        /// </summary>
		[AttributeLogicalName("defaultfilterspopulated")]
		public bool? DefaultFiltersPopulated
		{
			get
			{
				var value = GetAttributeValue<bool?>("defaultfilterspopulated");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("defaultfilterspopulated"))
				    value = (bool?) backupAttributeCollection["defaultfilterspopulated"];
			    return value;
			}
			set
			{
				OnPropertyChanging("DefaultFiltersPopulated");
					SetAttributeValue("defaultfilterspopulated", value);
				OnPropertyChanged("DefaultFiltersPopulated");
			}
		}

        /// <summary>
        ///  
		/// 'DefaultMailbox'.<br />
        /// Select the mailbox associated with this user.
        /// </summary>
		[AttributeLogicalName("defaultmailbox")]
		public Guid? Mailbox
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("defaultmailbox");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("defaultmailbox"))
				    value = (EntityReference) backupAttributeCollection["defaultmailbox"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("Mailbox");
                if (value != null)
				    SetAttributeValue("defaultmailbox", new EntityReference("mailbox", value.Value));
                else
					SetAttributeValue("defaultmailbox", value);
				OnPropertyChanged("Mailbox");
			}
		}

        public string MailboxName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("defaultmailbox");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("defaultmailbox"))
				    value = (EntityReference) backupAttributeCollection["defaultmailbox"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        /// [MaximumLength=200] 
		/// 'DefaultOdbFolderName'.<br />
        /// Type a default folder name for the user's OneDrive For Business location.
        /// </summary>
		[AttributeLogicalName("defaultodbfoldername"), MaxLength(200)]
		public string DefaultOneDriveforBusinessFolderName
		{
			get
			{
				var value = GetAttributeValue<string>("defaultodbfoldername");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("defaultodbfoldername"))
				    value = (string) backupAttributeCollection["defaultodbfoldername"];
			    return value;
			}
			set
			{
				OnPropertyChanging("DefaultOneDriveforBusinessFolderName");
					SetAttributeValue("defaultodbfoldername", value);
				OnPropertyChanged("DefaultOneDriveforBusinessFolderName");
			}
		}

        /// <summary>
        /// [MaximumLength=500] 
		/// 'DisabledReason'.<br />
        /// Reason for disabling the user.
        /// </summary>
		[AttributeLogicalName("disabledreason"), MaxLength(500)]
		public string DisabledReason
		{
			get
			{
				var value = GetAttributeValue<string>("disabledreason");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("disabledreason"))
				    value = (string) backupAttributeCollection["disabledreason"];
			    return value;
			}
			set
			{
				OnPropertyChanging("DisabledReason");
					SetAttributeValue("disabledreason", value);
				OnPropertyChanged("DisabledReason");
			}
		}

        /// <summary>
        ///  
		/// 'DisplayInServiceViews'.<br />
        /// Whether to display the user in service views.
        /// </summary>
		[AttributeLogicalName("displayinserviceviews")]
		public bool? DisplayinServiceViews
		{
			get
			{
				var value = GetAttributeValue<bool?>("displayinserviceviews");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("displayinserviceviews"))
				    value = (bool?) backupAttributeCollection["displayinserviceviews"];
			    return value;
			}
			set
			{
				OnPropertyChanging("DisplayinServiceViews");
					SetAttributeValue("displayinserviceviews", value);
				OnPropertyChanged("DisplayinServiceViews");
			}
		}

        /// <summary>
        /// [MaximumLength=1024] 
		/// 'DomainName'.<br />
        /// Active Directory domain of which the user is a member.
        /// </summary>
		[AttributeLogicalName("domainname"), MaxLength(1024)]
		public string UserName
		{
			get
			{
				var value = GetAttributeValue<string>("domainname");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("domainname"))
				    value = (string) backupAttributeCollection["domainname"];
			    return value;
			}
			set
			{
				OnPropertyChanging("UserName");
					SetAttributeValue("domainname", value);
				OnPropertyChanged("UserName");
			}
		}

        /// <summary>
        ///  
		/// 'EmailRouterAccessApproval'.<br />
        /// Shows the status of the primary email address.
        /// </summary>
		[AttributeLogicalName("emailrouteraccessapproval")]
		public PrimaryEmailStatusEnum? PrimaryEmailStatus
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("emailrouteraccessapproval");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("emailrouteraccessapproval"))
				    value = (OptionSetValue) backupAttributeCollection["emailrouteraccessapproval"];
                return value == null ? (PrimaryEmailStatusEnum?) null : (PrimaryEmailStatusEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("PrimaryEmailStatus");
                if (value != null)
				    SetAttributeValue("emailrouteraccessapproval", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("emailrouteraccessapproval", value);
				OnPropertyChanged("PrimaryEmailStatus");
			}
		}

        /// <summary>
        /// [MaximumLength=100] 
		/// 'EmployeeId'.<br />
        /// Employee identifier for the user.
        /// </summary>
		[AttributeLogicalName("employeeid"), MaxLength(100)]
		public string Employee
		{
			get
			{
				var value = GetAttributeValue<string>("employeeid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("employeeid"))
				    value = (string) backupAttributeCollection["employeeid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Employee");
					SetAttributeValue("employeeid", value);
				OnPropertyChanged("Employee");
			}
		}

        /// <summary>
        ///  
		/// 'EntityImageId'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("entityimageid")]
		public Guid? EntityImageId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("entityimageid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("entityimageid"))
				    value = (Guid?) backupAttributeCollection["entityimageid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("EntityImageId");
					SetAttributeValue("entityimageid", value);
				OnPropertyChanged("EntityImageId");
			}
		}

        /// <summary>
        /// [Range(0.0000000001, 100000000000)] 
		/// 'ExchangeRate'.<br />
        /// Exchange rate for the currency associated with the systemuser with respect to the base currency.
        /// </summary>
		[AttributeLogicalName("exchangerate"), InRange("0.0000000001", "100000000000", typeof(decimal))]
		public decimal? ExchangeRate
		{
			get
			{
				var value = GetAttributeValue<decimal?>("exchangerate");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("exchangerate"))
				    value = (decimal?) backupAttributeCollection["exchangerate"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ExchangeRate");
					SetAttributeValue("exchangerate", value);
				OnPropertyChanged("ExchangeRate");
			}
		}

        /// <summary>
        /// [Required][MaximumLength=64] 
		/// 'FirstName'.<br />
        /// First name of the user.
        /// </summary>
		[AttributeLogicalName("firstname"), Required, MaxLength(64)]
		public string FirstName
		{
			get
			{
				var value = GetAttributeValue<string>("firstname");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("firstname"))
				    value = (string) backupAttributeCollection["firstname"];
			    return value;
			}
			set
			{
				OnPropertyChanging("FirstName");
					SetAttributeValue("firstname", value);
				OnPropertyChanged("FirstName");
			}
		}

        /// <summary>
        /// [MaximumLength=200] 
		/// 'FullName'.<br />
        /// Full name of the user.
        /// </summary>
		[AttributeLogicalName("fullname"), DataMember, MaxLength(200)]
		public string FullName
		{
			get
			{
				var value = GetAttributeValue<string>("fullname");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("fullname"))
				    value = (string) backupAttributeCollection["fullname"];
			    return value;
			}
			set
			{
				OnPropertyChanging("FullName");
					SetAttributeValue("fullname", value);
				OnPropertyChanged("FullName");
			}
		}

        /// <summary>
        /// [MaximumLength=100] 
		/// 'GovernmentId'.<br />
        /// Government identifier for the user.
        /// </summary>
		[AttributeLogicalName("governmentid"), MaxLength(100)]
		public string Government
		{
			get
			{
				var value = GetAttributeValue<string>("governmentid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("governmentid"))
				    value = (string) backupAttributeCollection["governmentid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Government");
					SetAttributeValue("governmentid", value);
				OnPropertyChanged("Government");
			}
		}

        /// <summary>
        /// [MaximumLength=50] 
		/// 'HomePhone'.<br />
        /// Home phone number for the user.
        /// </summary>
		[AttributeLogicalName("homephone"), MaxLength(50)]
		public string HomePhone
		{
			get
			{
				var value = GetAttributeValue<string>("homephone");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("homephone"))
				    value = (string) backupAttributeCollection["homephone"];
			    return value;
			}
			set
			{
				OnPropertyChanging("HomePhone");
					SetAttributeValue("homephone", value);
				OnPropertyChanged("HomePhone");
			}
		}

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'ImportSequenceNumber'.<br />
        /// Unique identifier of the data import or data migration that created this record.
        /// </summary>
		[AttributeLogicalName("importsequencenumber"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? ImportSequenceNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("importsequencenumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("importsequencenumber"))
				    value = (int?) backupAttributeCollection["importsequencenumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ImportSequenceNumber");
					SetAttributeValue("importsequencenumber", value);
				OnPropertyChanged("ImportSequenceNumber");
			}
		}

        /// <summary>
        ///  
		/// 'IncomingEmailDeliveryMethod'.<br />
        /// Incoming email delivery method for the user.
        /// </summary>
		[AttributeLogicalName("incomingemaildeliverymethod")]
		public IncomingEmailDeliveryMethodEnum? IncomingEmailDeliveryMethod
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("incomingemaildeliverymethod");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("incomingemaildeliverymethod"))
				    value = (OptionSetValue) backupAttributeCollection["incomingemaildeliverymethod"];
                return value == null ? (IncomingEmailDeliveryMethodEnum?) null : (IncomingEmailDeliveryMethodEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("IncomingEmailDeliveryMethod");
                if (value != null)
				    SetAttributeValue("incomingemaildeliverymethod", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("incomingemaildeliverymethod", value);
				OnPropertyChanged("IncomingEmailDeliveryMethod");
			}
		}

        /// <summary>
        /// [MaximumLength=100] 
		/// 'InternalEMailAddress'.<br />
        /// Internal email address for the user.
        /// </summary>
		[AttributeLogicalName("internalemailaddress"), MaxLength(100)]
		public string PrimaryEmail
		{
			get
			{
				var value = GetAttributeValue<string>("internalemailaddress");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("internalemailaddress"))
				    value = (string) backupAttributeCollection["internalemailaddress"];
			    return value;
			}
			set
			{
				OnPropertyChanging("PrimaryEmail");
					SetAttributeValue("internalemailaddress", value);
				OnPropertyChanged("PrimaryEmail");
			}
		}

        /// <summary>
        /// [Required] 
		/// 'InviteStatusCode'.<br />
        /// User invitation status.
        /// </summary>
		[AttributeLogicalName("invitestatuscode"), Required]
		public InvitationStatusEnum? InvitationStatus
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("invitestatuscode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("invitestatuscode"))
				    value = (OptionSetValue) backupAttributeCollection["invitestatuscode"];
                return value == null ? (InvitationStatusEnum?) null : (InvitationStatusEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("InvitationStatus");
                if (value != null)
				    SetAttributeValue("invitestatuscode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("invitestatuscode", value);
				OnPropertyChanged("InvitationStatus");
			}
		}

        /// <summary>
        ///  
		/// 'IsDisabled'.<br />
        /// Information about whether the user is enabled.
        /// </summary>
		[AttributeLogicalName("isdisabled")]
		public bool? Status
		{
			get
			{
				var value = GetAttributeValue<bool?>("isdisabled");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("isdisabled"))
				    value = (bool?) backupAttributeCollection["isdisabled"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Status");
					SetAttributeValue("isdisabled", value);
				OnPropertyChanged("Status");
			}
		}

        /// <summary>
        ///  
		/// 'IsEmailAddressApprovedByO365Admin'.<br />
        /// Shows the status of approval of the email address by O365 Admin.
        /// </summary>
		[AttributeLogicalName("isemailaddressapprovedbyo365admin")]
		public bool? EmailAddressO365AdminApprovalStatus
		{
			get
			{
				var value = GetAttributeValue<bool?>("isemailaddressapprovedbyo365admin");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("isemailaddressapprovedbyo365admin"))
				    value = (bool?) backupAttributeCollection["isemailaddressapprovedbyo365admin"];
			    return value;
			}
			set
			{
				OnPropertyChanging("EmailAddressO365AdminApprovalStatus");
					SetAttributeValue("isemailaddressapprovedbyo365admin", value);
				OnPropertyChanged("EmailAddressO365AdminApprovalStatus");
			}
		}

        /// <summary>
        ///  
		/// 'IsIntegrationUser'.<br />
        /// Check if user is an integration user.
        /// </summary>
		[AttributeLogicalName("isintegrationuser")]
		public bool? Integrationusermode
		{
			get
			{
				var value = GetAttributeValue<bool?>("isintegrationuser");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("isintegrationuser"))
				    value = (bool?) backupAttributeCollection["isintegrationuser"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Integrationusermode");
					SetAttributeValue("isintegrationuser", value);
				OnPropertyChanged("Integrationusermode");
			}
		}

        /// <summary>
        ///  
		/// 'IsLicensed'.<br />
        /// Information about whether the user is licensed.
        /// </summary>
		[AttributeLogicalName("islicensed")]
		public bool? UserLicensed
		{
			get
			{
				var value = GetAttributeValue<bool?>("islicensed");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("islicensed"))
				    value = (bool?) backupAttributeCollection["islicensed"];
			    return value;
			}
			set
			{
				OnPropertyChanging("UserLicensed");
					SetAttributeValue("islicensed", value);
				OnPropertyChanged("UserLicensed");
			}
		}

        /// <summary>
        ///  
		/// 'IsSyncWithDirectory'.<br />
        /// Information about whether the user is synced with the directory.
        /// </summary>
		[AttributeLogicalName("issyncwithdirectory")]
		public bool? UserSynced
		{
			get
			{
				var value = GetAttributeValue<bool?>("issyncwithdirectory");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("issyncwithdirectory"))
				    value = (bool?) backupAttributeCollection["issyncwithdirectory"];
			    return value;
			}
			set
			{
				OnPropertyChanging("UserSynced");
					SetAttributeValue("issyncwithdirectory", value);
				OnPropertyChanged("UserSynced");
			}
		}

        /// <summary>
        /// [MaximumLength=100] 
		/// 'JobTitle'.<br />
        /// Job title of the user.
        /// </summary>
		[AttributeLogicalName("jobtitle"), MaxLength(100)]
		public string JobTitle
		{
			get
			{
				var value = GetAttributeValue<string>("jobtitle");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("jobtitle"))
				    value = (string) backupAttributeCollection["jobtitle"];
			    return value;
			}
			set
			{
				OnPropertyChanging("JobTitle");
					SetAttributeValue("jobtitle", value);
				OnPropertyChanged("JobTitle");
			}
		}

        /// <summary>
        /// [Required][MaximumLength=64] 
		/// 'LastName'.<br />
        /// Last name of the user.
        /// </summary>
		[AttributeLogicalName("lastname"), Required, MaxLength(64)]
		public string LastName
		{
			get
			{
				var value = GetAttributeValue<string>("lastname");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("lastname"))
				    value = (string) backupAttributeCollection["lastname"];
			    return value;
			}
			set
			{
				OnPropertyChanging("LastName");
					SetAttributeValue("lastname", value);
				OnPropertyChanged("LastName");
			}
		}

        /// <summary>
        /// [MaximumLength=50] 
		/// 'MiddleName'.<br />
        /// Middle name of the user.
        /// </summary>
		[AttributeLogicalName("middlename"), MaxLength(50)]
		public string MiddleName
		{
			get
			{
				var value = GetAttributeValue<string>("middlename");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("middlename"))
				    value = (string) backupAttributeCollection["middlename"];
			    return value;
			}
			set
			{
				OnPropertyChanging("MiddleName");
					SetAttributeValue("middlename", value);
				OnPropertyChanged("MiddleName");
			}
		}

        /// <summary>
        /// [MaximumLength=100] 
		/// 'MobileAlertEMail'.<br />
        /// Mobile alert email address for the user.
        /// </summary>
		[AttributeLogicalName("mobilealertemail"), MaxLength(100)]
		public string MobileAlertEmail
		{
			get
			{
				var value = GetAttributeValue<string>("mobilealertemail");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("mobilealertemail"))
				    value = (string) backupAttributeCollection["mobilealertemail"];
			    return value;
			}
			set
			{
				OnPropertyChanging("MobileAlertEmail");
					SetAttributeValue("mobilealertemail", value);
				OnPropertyChanged("MobileAlertEmail");
			}
		}

        /// <summary>
        ///  
		/// 'MobileOfflineProfileId'.<br />
        /// Items contained with a particular SystemUser.
        /// </summary>
		[AttributeLogicalName("mobileofflineprofileid")]
		public Guid? MobileOfflineProfile
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("mobileofflineprofileid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("mobileofflineprofileid"))
				    value = (EntityReference) backupAttributeCollection["mobileofflineprofileid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("MobileOfflineProfile");
                if (value != null)
				    SetAttributeValue("mobileofflineprofileid", new EntityReference("mobileofflineprofile", value.Value));
                else
					SetAttributeValue("mobileofflineprofileid", value);
				OnPropertyChanged("MobileOfflineProfile");
			}
		}

        public string MobileOfflineProfileName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("mobileofflineprofileid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("mobileofflineprofileid"))
				    value = (EntityReference) backupAttributeCollection["mobileofflineprofileid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        /// [MaximumLength=64] 
		/// 'MobilePhone'.<br />
        /// Mobile phone number for the user.
        /// </summary>
		[AttributeLogicalName("mobilephone"), MaxLength(64)]
		public string MobilePhone
		{
			get
			{
				var value = GetAttributeValue<string>("mobilephone");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("mobilephone"))
				    value = (string) backupAttributeCollection["mobilephone"];
			    return value;
			}
			set
			{
				OnPropertyChanging("MobilePhone");
					SetAttributeValue("mobilephone", value);
				OnPropertyChanged("MobilePhone");
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedBy'.<br />
        /// Unique identifier of the user who last modified the user.
        /// </summary>
		[AttributeLogicalName("modifiedby")]
		public Guid? ModifiedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedby"))
				    value = (EntityReference) backupAttributeCollection["modifiedby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ModifiedBy");
                if (value != null)
				    SetAttributeValue("modifiedby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("modifiedby", value);
				OnPropertyChanged("ModifiedBy");
			}
		}

        public string ModifiedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedby"))
				    value = (EntityReference) backupAttributeCollection["modifiedby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'ModifiedOn'.<br />
        /// Date and time when the user was last modified.
        /// </summary>
		[AttributeLogicalName("modifiedon")]
		public DateTime? ModifiedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("modifiedon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedon"))
				    value = (DateTime?) backupAttributeCollection["modifiedon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ModifiedOn");
					SetAttributeValue("modifiedon", value);
				OnPropertyChanged("ModifiedOn");
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who last modified the systemuser.
        /// </summary>
		[AttributeLogicalName("modifiedonbehalfby")]
		public Guid? ModifiedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["modifiedonbehalfby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ModifiedByDelegate");
                if (value != null)
				    SetAttributeValue("modifiedonbehalfby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("modifiedonbehalfby", value);
				OnPropertyChanged("ModifiedByDelegate");
			}
		}

        public string ModifiedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["modifiedonbehalfby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[AttributeLogicalName("new_team")]
		public Guid? Team
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("new_team");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("new_team"))
				    value = (EntityReference) backupAttributeCollection["new_team"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("Team");
                if (value != null)
				    SetAttributeValue("new_team", new EntityReference("team", value.Value));
                else
					SetAttributeValue("new_team", value);
				OnPropertyChanged("Team");
			}
		}

        public string TeamName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("new_team");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("new_team"))
				    value = (EntityReference) backupAttributeCollection["new_team"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        /// [MaximumLength=50] 
		/// 'NickName'.<br />
        /// Nickname of the user.
        /// </summary>
		[AttributeLogicalName("nickname"), MaxLength(50)]
		public string Nickname
		{
			get
			{
				var value = GetAttributeValue<string>("nickname");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("nickname"))
				    value = (string) backupAttributeCollection["nickname"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Nickname");
					SetAttributeValue("nickname", value);
				OnPropertyChanged("Nickname");
			}
		}

        /// <summary>
        ///  
		/// 'OrganizationId'.<br />
        /// Unique identifier of the organization associated with the user.
        /// </summary>
		[AttributeLogicalName("organizationid")]
		public Guid? Organization
		{
			get
			{
				var value = GetAttributeValue<Guid?>("organizationid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("organizationid"))
				    value = (Guid?) backupAttributeCollection["organizationid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Organization");
					SetAttributeValue("organizationid", value);
				OnPropertyChanged("Organization");
			}
		}

        /// <summary>
        ///  
		/// 'OutgoingEmailDeliveryMethod'.<br />
        /// Outgoing email delivery method for the user.
        /// </summary>
		[AttributeLogicalName("outgoingemaildeliverymethod")]
		public OutgoingEmailDeliveryMethodEnum? OutgoingEmailDeliveryMethod
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("outgoingemaildeliverymethod");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("outgoingemaildeliverymethod"))
				    value = (OptionSetValue) backupAttributeCollection["outgoingemaildeliverymethod"];
                return value == null ? (OutgoingEmailDeliveryMethodEnum?) null : (OutgoingEmailDeliveryMethodEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("OutgoingEmailDeliveryMethod");
                if (value != null)
				    SetAttributeValue("outgoingemaildeliverymethod", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("outgoingemaildeliverymethod", value);
				OnPropertyChanged("OutgoingEmailDeliveryMethod");
			}
		}

        /// <summary>
        ///  
		/// 'OverriddenCreatedOn'.<br />
        /// Date and time that the record was migrated.
        /// </summary>
		[AttributeLogicalName("overriddencreatedon")]
		public DateTime? RecordCreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("overriddencreatedon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("overriddencreatedon"))
				    value = (DateTime?) backupAttributeCollection["overriddencreatedon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("RecordCreatedOn");
					SetAttributeValue("overriddencreatedon", value);
				OnPropertyChanged("RecordCreatedOn");
			}
		}

        /// <summary>
        ///  
		/// 'ParentSystemUserId'.<br />
        /// Unique identifier of the manager of the user.
        /// </summary>
		[AttributeLogicalName("parentsystemuserid")]
		public Guid? Manager
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("parentsystemuserid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("parentsystemuserid"))
				    value = (EntityReference) backupAttributeCollection["parentsystemuserid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("Manager");
                if (value != null)
				    SetAttributeValue("parentsystemuserid", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("parentsystemuserid", value);
				OnPropertyChanged("Manager");
			}
		}

        public string ManagerName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("parentsystemuserid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("parentsystemuserid"))
				    value = (EntityReference) backupAttributeCollection["parentsystemuserid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        /// [Range(0, 1000000000)] 
		/// 'PassportHi'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("passporthi"), InRange("0", "1000000000", typeof(int))]
		public int? PassportHi
		{
			get
			{
				var value = GetAttributeValue<int?>("passporthi");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("passporthi"))
				    value = (int?) backupAttributeCollection["passporthi"];
			    return value;
			}
			set
			{
				OnPropertyChanging("PassportHi");
					SetAttributeValue("passporthi", value);
				OnPropertyChanged("PassportHi");
			}
		}

        /// <summary>
        /// [Range(0, 1000000000)] 
		/// 'PassportLo'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("passportlo"), InRange("0", "1000000000", typeof(int))]
		public int? PassportLo
		{
			get
			{
				var value = GetAttributeValue<int?>("passportlo");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("passportlo"))
				    value = (int?) backupAttributeCollection["passportlo"];
			    return value;
			}
			set
			{
				OnPropertyChanging("PassportLo");
					SetAttributeValue("passportlo", value);
				OnPropertyChanged("PassportLo");
			}
		}

        /// <summary>
        /// [MaximumLength=100] 
		/// 'PersonalEMailAddress'.<br />
        /// Personal email address of the user.
        /// </summary>
		[AttributeLogicalName("personalemailaddress"), MaxLength(100)]
		public string Email2
		{
			get
			{
				var value = GetAttributeValue<string>("personalemailaddress");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("personalemailaddress"))
				    value = (string) backupAttributeCollection["personalemailaddress"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Email2");
					SetAttributeValue("personalemailaddress", value);
				OnPropertyChanged("Email2");
			}
		}

        /// <summary>
        /// [MaximumLength=200] 
		/// 'PhotoUrl'.<br />
        /// URL for the Website on which a photo of the user is located.
        /// </summary>
		[AttributeLogicalName("photourl"), MaxLength(200)]
		public string PhotoURL
		{
			get
			{
				var value = GetAttributeValue<string>("photourl");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("photourl"))
				    value = (string) backupAttributeCollection["photourl"];
			    return value;
			}
			set
			{
				OnPropertyChanging("PhotoURL");
					SetAttributeValue("photourl", value);
				OnPropertyChanged("PhotoURL");
			}
		}

        /// <summary>
        ///  
		/// 'PositionId'.<br />
        /// User's position in hierarchical security model.
        /// </summary>
		[AttributeLogicalName("positionid")]
		public Guid? Position
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("positionid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("positionid"))
				    value = (EntityReference) backupAttributeCollection["positionid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("Position");
                if (value != null)
				    SetAttributeValue("positionid", new EntityReference("position", value.Value));
                else
					SetAttributeValue("positionid", value);
				OnPropertyChanged("Position");
			}
		}

        public string PositionName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("positionid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("positionid"))
				    value = (EntityReference) backupAttributeCollection["positionid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'PreferredAddressCode'.<br />
        /// Preferred address for the user.
        /// </summary>
		[AttributeLogicalName("preferredaddresscode")]
		public PreferredAddressEnum? PreferredAddress
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("preferredaddresscode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("preferredaddresscode"))
				    value = (OptionSetValue) backupAttributeCollection["preferredaddresscode"];
                return value == null ? (PreferredAddressEnum?) null : (PreferredAddressEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("PreferredAddress");
                if (value != null)
				    SetAttributeValue("preferredaddresscode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("preferredaddresscode", value);
				OnPropertyChanged("PreferredAddress");
			}
		}

        /// <summary>
        ///  
		/// 'PreferredEmailCode'.<br />
        /// Preferred email address for the user.
        /// </summary>
		[AttributeLogicalName("preferredemailcode")]
		public PreferredEmailEnum? PreferredEmail
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("preferredemailcode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("preferredemailcode"))
				    value = (OptionSetValue) backupAttributeCollection["preferredemailcode"];
                return value == null ? (PreferredEmailEnum?) null : (PreferredEmailEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("PreferredEmail");
                if (value != null)
				    SetAttributeValue("preferredemailcode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("preferredemailcode", value);
				OnPropertyChanged("PreferredEmail");
			}
		}

        /// <summary>
        ///  
		/// 'PreferredPhoneCode'.<br />
        /// Preferred phone number for the user.
        /// </summary>
		[AttributeLogicalName("preferredphonecode")]
		public PreferredPhoneEnum? PreferredPhone
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("preferredphonecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("preferredphonecode"))
				    value = (OptionSetValue) backupAttributeCollection["preferredphonecode"];
                return value == null ? (PreferredPhoneEnum?) null : (PreferredPhoneEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("PreferredPhone");
                if (value != null)
				    SetAttributeValue("preferredphonecode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("preferredphonecode", value);
				OnPropertyChanged("PreferredPhone");
			}
		}

        /// <summary>
        ///  
		/// 'ProcessId'.<br />
        /// Shows the ID of the process.
        /// </summary>
		[AttributeLogicalName("processid")]
		public Guid? Process
		{
			get
			{
				var value = GetAttributeValue<Guid?>("processid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("processid"))
				    value = (Guid?) backupAttributeCollection["processid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Process");
					SetAttributeValue("processid", value);
				OnPropertyChanged("Process");
			}
		}

        /// <summary>
        ///  
		/// 'QueueId'.<br />
        /// Unique identifier of the default queue for the user.
        /// </summary>
		[AttributeLogicalName("queueid")]
		public Guid? DefaultQueue
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("queueid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("queueid"))
				    value = (EntityReference) backupAttributeCollection["queueid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("DefaultQueue");
                if (value != null)
				    SetAttributeValue("queueid", new EntityReference("queue", value.Value));
                else
					SetAttributeValue("queueid", value);
				OnPropertyChanged("DefaultQueue");
			}
		}

        public string DefaultQueueName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("queueid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("queueid"))
				    value = (EntityReference) backupAttributeCollection["queueid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        /// [MaximumLength=20] 
		/// 'Salutation'.<br />
        /// Salutation for correspondence with the user.
        /// </summary>
		[AttributeLogicalName("salutation"), MaxLength(20)]
		public string Salutation
		{
			get
			{
				var value = GetAttributeValue<string>("salutation");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("salutation"))
				    value = (string) backupAttributeCollection["salutation"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Salutation");
					SetAttributeValue("salutation", value);
				OnPropertyChanged("Salutation");
			}
		}

        /// <summary>
        ///  
		/// 'SetupUser'.<br />
        /// Check if user is a setup user.
        /// </summary>
		[AttributeLogicalName("setupuser")]
		public bool? RestrictedAccessMode
		{
			get
			{
				var value = GetAttributeValue<bool?>("setupuser");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("setupuser"))
				    value = (bool?) backupAttributeCollection["setupuser"];
			    return value;
			}
			set
			{
				OnPropertyChanging("RestrictedAccessMode");
					SetAttributeValue("setupuser", value);
				OnPropertyChanged("RestrictedAccessMode");
			}
		}

        /// <summary>
        /// [MaximumLength=1024] 
		/// 'SharePointEmailAddress'.<br />
        /// SharePoint Work Email Address
        /// </summary>
		[AttributeLogicalName("sharepointemailaddress"), MaxLength(1024)]
		public string SharePointEmailAddress
		{
			get
			{
				var value = GetAttributeValue<string>("sharepointemailaddress");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("sharepointemailaddress"))
				    value = (string) backupAttributeCollection["sharepointemailaddress"];
			    return value;
			}
			set
			{
				OnPropertyChanging("SharePointEmailAddress");
					SetAttributeValue("sharepointemailaddress", value);
				OnPropertyChanged("SharePointEmailAddress");
			}
		}

        /// <summary>
        ///  
		/// 'SiteId'.<br />
        /// Site at which the user is located.
        /// </summary>
		[AttributeLogicalName("siteid")]
		public Guid? Site
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("siteid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("siteid"))
				    value = (EntityReference) backupAttributeCollection["siteid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("Site");
                if (value != null)
				    SetAttributeValue("siteid", new EntityReference("site", value.Value));
                else
					SetAttributeValue("siteid", value);
				OnPropertyChanged("Site");
			}
		}

        public string SiteName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("siteid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("siteid"))
				    value = (EntityReference) backupAttributeCollection["siteid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        /// [MaximumLength=100] 
		/// 'Skills'.<br />
        /// Skill set of the user.
        /// </summary>
		[AttributeLogicalName("skills"), MaxLength(100)]
		public string Skills
		{
			get
			{
				var value = GetAttributeValue<string>("skills");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("skills"))
				    value = (string) backupAttributeCollection["skills"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Skills");
					SetAttributeValue("skills", value);
				OnPropertyChanged("Skills");
			}
		}

        /// <summary>
        ///  
		/// 'StageId'.<br />
        /// Shows the ID of the stage.
        /// </summary>
		[AttributeLogicalName("stageid")]
		public Guid? ProcessStage
		{
			get
			{
				var value = GetAttributeValue<Guid?>("stageid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("stageid"))
				    value = (Guid?) backupAttributeCollection["stageid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ProcessStage");
					SetAttributeValue("stageid", value);
				OnPropertyChanged("ProcessStage");
			}
		}

        /// <summary>
        ///  
		/// 'SystemUserId'.<br />
        /// Unique identifier for the user.
        /// </summary>
		[AttributeLogicalName("systemuserid")]
		public Guid? UserId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("systemuserid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("systemuserid"))
				    value = (Guid?) backupAttributeCollection["systemuserid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("UserId");
                if (value != null)
					SetAttributeValue("systemuserid", value);
				if (value != null)
					base.Id = value.Value;
				else
					Id = System.Guid.Empty;
				OnPropertyChanged("UserId");
			}
		}

        /// <summary>
        ///  
		/// 'TerritoryId'.<br />
        /// Unique identifier of the territory to which the user is assigned.
        /// </summary>
		[AttributeLogicalName("territoryid")]
		public Guid? Territory
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("territoryid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("territoryid"))
				    value = (EntityReference) backupAttributeCollection["territoryid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("Territory");
                if (value != null)
				    SetAttributeValue("territoryid", new EntityReference("territory", value.Value));
                else
					SetAttributeValue("territoryid", value);
				OnPropertyChanged("Territory");
			}
		}

        public string TerritoryName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("territoryid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("territoryid"))
				    value = (EntityReference) backupAttributeCollection["territoryid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        /// [Range(-1, 2147483647)] 
		/// 'TimeZoneRuleVersionNumber'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("timezoneruleversionnumber"), InRange("-1", "2147483647", typeof(int))]
		public int? TimeZoneRuleVersionNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("timezoneruleversionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("timezoneruleversionnumber"))
				    value = (int?) backupAttributeCollection["timezoneruleversionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TimeZoneRuleVersionNumber");
					SetAttributeValue("timezoneruleversionnumber", value);
				OnPropertyChanged("TimeZoneRuleVersionNumber");
			}
		}

        /// <summary>
        /// [MaximumLength=128] 
		/// 'Title'.<br />
        /// Title of the user.
        /// </summary>
		[AttributeLogicalName("title"), MaxLength(128)]
		public string Title
		{
			get
			{
				var value = GetAttributeValue<string>("title");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("title"))
				    value = (string) backupAttributeCollection["title"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Title");
					SetAttributeValue("title", value);
				OnPropertyChanged("Title");
			}
		}

        /// <summary>
        ///  
		/// 'TransactionCurrencyId'.<br />
        /// Unique identifier of the currency associated with the systemuser.
        /// </summary>
		[AttributeLogicalName("transactioncurrencyid")]
		public Guid? Currency
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("transactioncurrencyid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("transactioncurrencyid"))
				    value = (EntityReference) backupAttributeCollection["transactioncurrencyid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("Currency");
                if (value != null)
				    SetAttributeValue("transactioncurrencyid", new EntityReference("transactioncurrency", value.Value));
                else
					SetAttributeValue("transactioncurrencyid", value);
				OnPropertyChanged("Currency");
			}
		}

        public string CurrencyName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("transactioncurrencyid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("transactioncurrencyid"))
				    value = (EntityReference) backupAttributeCollection["transactioncurrencyid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        /// [MaximumLength=1250] 
		/// 'TraversedPath'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("traversedpath"), MaxLength(1250)]
		public string TraversedPath
		{
			get
			{
				var value = GetAttributeValue<string>("traversedpath");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("traversedpath"))
				    value = (string) backupAttributeCollection["traversedpath"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TraversedPath");
					SetAttributeValue("traversedpath", value);
				OnPropertyChanged("TraversedPath");
			}
		}

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'UserLicenseType'.<br />
        /// Shows the type of user license.
        /// </summary>
		[AttributeLogicalName("userlicensetype"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? UserLicenseType
		{
			get
			{
				var value = GetAttributeValue<int?>("userlicensetype");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("userlicensetype"))
				    value = (int?) backupAttributeCollection["userlicensetype"];
			    return value;
			}
			set
			{
				OnPropertyChanging("UserLicenseType");
					SetAttributeValue("userlicensetype", value);
				OnPropertyChanged("UserLicenseType");
			}
		}

        /// <summary>
        /// [Range(-1, 2147483647)] 
		/// 'UTCConversionTimeZoneCode'.<br />
        /// Time zone code that was in use when the record was created.
        /// </summary>
		[AttributeLogicalName("utcconversiontimezonecode"), InRange("-1", "2147483647", typeof(int))]
		public int? UTCConversionTimeZoneCode
		{
			get
			{
				var value = GetAttributeValue<int?>("utcconversiontimezonecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("utcconversiontimezonecode"))
				    value = (int?) backupAttributeCollection["utcconversiontimezonecode"];
			    return value;
			}
			set
			{
				OnPropertyChanging("UTCConversionTimeZoneCode");
					SetAttributeValue("utcconversiontimezonecode", value);
				OnPropertyChanged("UTCConversionTimeZoneCode");
			}
		}

        /// <summary>
        ///  
		/// 'VersionNumber'.<br />
        /// Version number of the user.
        /// </summary>
		[AttributeLogicalName("versionnumber")]
		public long? Versionnumber
		{
			get
			{
				var value = GetAttributeValue<long?>("versionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("versionnumber"))
				    value = (long?) backupAttributeCollection["versionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Versionnumber");
					SetAttributeValue("versionnumber", value);
				OnPropertyChanged("Versionnumber");
			}
		}

        /// <summary>
        /// [MaximumLength=1024] 
		/// 'WindowsLiveID'.<br />
        /// Windows Live ID
        /// </summary>
		[AttributeLogicalName("windowsliveid"), MaxLength(1024)]
		public string WindowsLiveID
		{
			get
			{
				var value = GetAttributeValue<string>("windowsliveid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("windowsliveid"))
				    value = (string) backupAttributeCollection["windowsliveid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("WindowsLiveID");
					SetAttributeValue("windowsliveid", value);
				OnPropertyChanged("WindowsLiveID");
			}
		}

        /// <summary>
        /// [MaximumLength=200] 
		/// 'YammerEmailAddress'.<br />
        /// User's Yammer login email address
        /// </summary>
		[AttributeLogicalName("yammeremailaddress"), MaxLength(200)]
		public string YammerEmail
		{
			get
			{
				var value = GetAttributeValue<string>("yammeremailaddress");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("yammeremailaddress"))
				    value = (string) backupAttributeCollection["yammeremailaddress"];
			    return value;
			}
			set
			{
				OnPropertyChanging("YammerEmail");
					SetAttributeValue("yammeremailaddress", value);
				OnPropertyChanged("YammerEmail");
			}
		}

        /// <summary>
        /// [MaximumLength=128] 
		/// 'YammerUserId'.<br />
        /// User's Yammer ID
        /// </summary>
		[AttributeLogicalName("yammeruserid"), MaxLength(128)]
		public string YammerUserID
		{
			get
			{
				var value = GetAttributeValue<string>("yammeruserid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("yammeruserid"))
				    value = (string) backupAttributeCollection["yammeruserid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("YammerUserID");
					SetAttributeValue("yammeruserid", value);
				OnPropertyChanged("YammerUserID");
			}
		}

        /// <summary>
        /// [MaximumLength=64] 
		/// 'YomiFirstName'.<br />
        /// Pronunciation of the first name of the user, written in phonetic hiragana or katakana characters.
        /// </summary>
		[AttributeLogicalName("yomifirstname"), MaxLength(64)]
		public string YomiFirstName
		{
			get
			{
				var value = GetAttributeValue<string>("yomifirstname");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("yomifirstname"))
				    value = (string) backupAttributeCollection["yomifirstname"];
			    return value;
			}
			set
			{
				OnPropertyChanging("YomiFirstName");
					SetAttributeValue("yomifirstname", value);
				OnPropertyChanged("YomiFirstName");
			}
		}

        /// <summary>
        /// [MaximumLength=200] 
		/// 'YomiFullName'.<br />
        /// Pronunciation of the full name of the user, written in phonetic hiragana or katakana characters.
        /// </summary>
		[AttributeLogicalName("yomifullname"), MaxLength(200)]
		public string YomiFullName
		{
			get
			{
				var value = GetAttributeValue<string>("yomifullname");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("yomifullname"))
				    value = (string) backupAttributeCollection["yomifullname"];
			    return value;
			}
			set
			{
				OnPropertyChanging("YomiFullName");
					SetAttributeValue("yomifullname", value);
				OnPropertyChanged("YomiFullName");
			}
		}

        /// <summary>
        /// [MaximumLength=64] 
		/// 'YomiLastName'.<br />
        /// Pronunciation of the last name of the user, written in phonetic hiragana or katakana characters.
        /// </summary>
		[AttributeLogicalName("yomilastname"), MaxLength(64)]
		public string YomiLastName
		{
			get
			{
				var value = GetAttributeValue<string>("yomilastname");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("yomilastname"))
				    value = (string) backupAttributeCollection["yomilastname"];
			    return value;
			}
			set
			{
				OnPropertyChanging("YomiLastName");
					SetAttributeValue("yomilastname", value);
				OnPropertyChanged("YomiLastName");
			}
		}

        /// <summary>
        /// [MaximumLength=50] 
		/// 'YomiMiddleName'.<br />
        /// Pronunciation of the middle name of the user, written in phonetic hiragana or katakana characters.
        /// </summary>
		[AttributeLogicalName("yomimiddlename"), MaxLength(50)]
		public string YomiMiddleName
		{
			get
			{
				var value = GetAttributeValue<string>("yomimiddlename");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("yomimiddlename"))
				    value = (string) backupAttributeCollection["yomimiddlename"];
			    return value;
			}
			set
			{
				OnPropertyChanging("YomiMiddleName");
					SetAttributeValue("yomimiddlename", value);
				OnPropertyChanged("YomiMiddleName");
			}
		}

		#endregion

		#region Relationships

		
		/// <summary>
		/// 1:N, 'lk_organization_createdonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_organization_createdonbehalfby")]
		public Organization[] OrganizationsOfCreatedByDelegate
		{
			get
			{
				var enumerable = GetRelatedEntities<Organization>("lk_organization_createdonbehalfby", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("OrganizationsOfCreatedByDelegate");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<Organization>("lk_organization_createdonbehalfby", null, value);
				OnPropertyChanged("OrganizationsOfCreatedByDelegate");
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_organization_modifiedonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_organization_modifiedonbehalfby")]
		public Organization[] OrganizationsOfModifiedByDelegate
		{
			get
			{
				var enumerable = GetRelatedEntities<Organization>("lk_organization_modifiedonbehalfby", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("OrganizationsOfModifiedByDelegate");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<Organization>("lk_organization_modifiedonbehalfby", null, value);
				OnPropertyChanged("OrganizationsOfModifiedByDelegate");
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_organizationbase_createdby'
		/// </summary>
		[RelationshipSchemaName("lk_organizationbase_createdby")]
		public Organization[] OrganizationsOfCreatedBy
		{
			get
			{
				var enumerable = GetRelatedEntities<Organization>("lk_organizationbase_createdby", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("OrganizationsOfCreatedBy");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<Organization>("lk_organizationbase_createdby", null, value);
				OnPropertyChanged("OrganizationsOfCreatedBy");
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_organizationbase_modifiedby'
		/// </summary>
		[RelationshipSchemaName("lk_organizationbase_modifiedby")]
		public Organization[] OrganizationsOfModifiedBy
		{
			get
			{
				var enumerable = GetRelatedEntities<Organization>("lk_organizationbase_modifiedby", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("OrganizationsOfModifiedBy");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<Organization>("lk_organizationbase_modifiedby", null, value);
				OnPropertyChanged("OrganizationsOfModifiedBy");
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_systemuser_createdonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_systemuser_createdonbehalfby", Microsoft.Xrm.Sdk.EntityRole.Referenced)]
		public User[] UsersOfCreatedByDelegate
		{
			get
			{
				var enumerable = GetRelatedEntities<User>("lk_systemuser_createdonbehalfby", Microsoft.Xrm.Sdk.EntityRole.Referenced);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("UsersOfCreatedByDelegate");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<User>("lk_systemuser_createdonbehalfby", Microsoft.Xrm.Sdk.EntityRole.Referenced, value);
				OnPropertyChanged("UsersOfCreatedByDelegate");
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_systemuser_modifiedonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_systemuser_modifiedonbehalfby", Microsoft.Xrm.Sdk.EntityRole.Referenced)]
		public User[] UsersOfModifiedByDelegate
		{
			get
			{
				var enumerable = GetRelatedEntities<User>("lk_systemuser_modifiedonbehalfby", Microsoft.Xrm.Sdk.EntityRole.Referenced);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("UsersOfModifiedByDelegate");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<User>("lk_systemuser_modifiedonbehalfby", Microsoft.Xrm.Sdk.EntityRole.Referenced, value);
				OnPropertyChanged("UsersOfModifiedByDelegate");
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_systemuserbase_createdby'
		/// </summary>
		[RelationshipSchemaName("lk_systemuserbase_createdby", Microsoft.Xrm.Sdk.EntityRole.Referenced)]
		public User[] UsersOfCreatedBy
		{
			get
			{
				var enumerable = GetRelatedEntities<User>("lk_systemuserbase_createdby", Microsoft.Xrm.Sdk.EntityRole.Referenced);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("UsersOfCreatedBy");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<User>("lk_systemuserbase_createdby", Microsoft.Xrm.Sdk.EntityRole.Referenced, value);
				OnPropertyChanged("UsersOfCreatedBy");
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_systemuserbase_modifiedby'
		/// </summary>
		[RelationshipSchemaName("lk_systemuserbase_modifiedby", Microsoft.Xrm.Sdk.EntityRole.Referenced)]
		public User[] UsersOfModifiedBy
		{
			get
			{
				var enumerable = GetRelatedEntities<User>("lk_systemuserbase_modifiedby", Microsoft.Xrm.Sdk.EntityRole.Referenced);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("UsersOfModifiedBy");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<User>("lk_systemuserbase_modifiedby", Microsoft.Xrm.Sdk.EntityRole.Referenced, value);
				OnPropertyChanged("UsersOfModifiedBy");
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_theme_createdby'
		/// </summary>
		[RelationshipSchemaName("lk_theme_createdby")]
		public Theme[] ThemesOfCreatedBy
		{
			get
			{
				var enumerable = GetRelatedEntities<Theme>("lk_theme_createdby", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("ThemesOfCreatedBy");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<Theme>("lk_theme_createdby", null, value);
				OnPropertyChanged("ThemesOfCreatedBy");
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_theme_createdonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_theme_createdonbehalfby")]
		public Theme[] ThemesOfCreatedByDelegate
		{
			get
			{
				var enumerable = GetRelatedEntities<Theme>("lk_theme_createdonbehalfby", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("ThemesOfCreatedByDelegate");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<Theme>("lk_theme_createdonbehalfby", null, value);
				OnPropertyChanged("ThemesOfCreatedByDelegate");
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_theme_modifiedby'
		/// </summary>
		[RelationshipSchemaName("lk_theme_modifiedby")]
		public Theme[] ThemesOfModifiedBy
		{
			get
			{
				var enumerable = GetRelatedEntities<Theme>("lk_theme_modifiedby", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("ThemesOfModifiedBy");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<Theme>("lk_theme_modifiedby", null, value);
				OnPropertyChanged("ThemesOfModifiedBy");
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_theme_modifiedonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_theme_modifiedonbehalfby")]
		public Theme[] ThemesOfModifiedByDelegate
		{
			get
			{
				var enumerable = GetRelatedEntities<Theme>("lk_theme_modifiedonbehalfby", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("ThemesOfModifiedByDelegate");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<Theme>("lk_theme_modifiedonbehalfby", null, value);
				OnPropertyChanged("ThemesOfModifiedByDelegate");
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_usersettings_createdonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_usersettings_createdonbehalfby")]
		public UserSettings[] UserSettingssOfCreatedByDelegate
		{
			get
			{
				var enumerable = GetRelatedEntities<UserSettings>("lk_usersettings_createdonbehalfby", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("UserSettingssOfCreatedByDelegate");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<UserSettings>("lk_usersettings_createdonbehalfby", null, value);
				OnPropertyChanged("UserSettingssOfCreatedByDelegate");
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_usersettings_modifiedonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_usersettings_modifiedonbehalfby")]
		public UserSettings[] UserSettingssOfModifiedByDelegate
		{
			get
			{
				var enumerable = GetRelatedEntities<UserSettings>("lk_usersettings_modifiedonbehalfby", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("UserSettingssOfModifiedByDelegate");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<UserSettings>("lk_usersettings_modifiedonbehalfby", null, value);
				OnPropertyChanged("UserSettingssOfModifiedByDelegate");
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_usersettingsbase_createdby'
		/// </summary>
		[RelationshipSchemaName("lk_usersettingsbase_createdby")]
		public UserSettings[] UserSettingssOfCreatedBy
		{
			get
			{
				var enumerable = GetRelatedEntities<UserSettings>("lk_usersettingsbase_createdby", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("UserSettingssOfCreatedBy");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<UserSettings>("lk_usersettingsbase_createdby", null, value);
				OnPropertyChanged("UserSettingssOfCreatedBy");
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_usersettingsbase_modifiedby'
		/// </summary>
		[RelationshipSchemaName("lk_usersettingsbase_modifiedby")]
		public UserSettings[] UserSettingssOfModifiedBy
		{
			get
			{
				var enumerable = GetRelatedEntities<UserSettings>("lk_usersettingsbase_modifiedby", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("UserSettingssOfModifiedBy");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<UserSettings>("lk_usersettingsbase_modifiedby", null, value);
				OnPropertyChanged("UserSettingssOfModifiedBy");
			}
		}
		
		/// <summary>
		/// 1:N, 'system_user_activity_parties'
		/// </summary>
		[RelationshipSchemaName("system_user_activity_parties")]
		public ActivityParty[] ActivityPartysOfParty
		{
			get
			{
				var enumerable = GetRelatedEntities<ActivityParty>("system_user_activity_parties", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("ActivityPartysOfParty");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<ActivityParty>("system_user_activity_parties", null, value);
				OnPropertyChanged("ActivityPartysOfParty");
			}
		}
		
		/// <summary>
		/// 1:N, 'user_parent_user'
		/// </summary>
		[RelationshipSchemaName("user_parent_user", Microsoft.Xrm.Sdk.EntityRole.Referenced)]
		public User[] UsersOfManager
		{
			get
			{
				var enumerable = GetRelatedEntities<User>("user_parent_user", Microsoft.Xrm.Sdk.EntityRole.Referenced);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("UsersOfManager");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<User>("user_parent_user", Microsoft.Xrm.Sdk.EntityRole.Referenced, value);
				OnPropertyChanged("UsersOfManager");
			}
		}
		
		/// <summary>
		/// 1:N, 'user_settings'
		/// </summary>
		[RelationshipSchemaName("user_settings")]
		public UserSettings[] UserSettingssOfSystemUserId
		{
			get
			{
				var enumerable = GetRelatedEntities<UserSettings>("user_settings", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("UserSettingssOfSystemUserId");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<UserSettings>("user_settings", null, value);
				OnPropertyChanged("UserSettingssOfSystemUserId");
			}
		}
		
		/// <summary>
		/// N:1, 'lk_systemuser_createdonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_systemuser_createdonbehalfby", Microsoft.Xrm.Sdk.EntityRole.Referencing), AttributeLogicalName("createdonbehalfby")]
		public User UserAsCreatedByDelegate
		{
			get
			{
				return GetRelatedEntity<User>("lk_systemuser_createdonbehalfby", Microsoft.Xrm.Sdk.EntityRole.Referencing);
			}
			set
			{
				OnPropertyChanging("UserAsCreatedByDelegate");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_systemuser_createdonbehalfby", Microsoft.Xrm.Sdk.EntityRole.Referencing, value);
				OnPropertyChanged("UserAsCreatedByDelegate");
			}
		}
		
		/// <summary>
		/// N:1, 'lk_systemuser_modifiedonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_systemuser_modifiedonbehalfby", Microsoft.Xrm.Sdk.EntityRole.Referencing), AttributeLogicalName("modifiedonbehalfby")]
		public User UserAsModifiedByDelegate
		{
			get
			{
				return GetRelatedEntity<User>("lk_systemuser_modifiedonbehalfby", Microsoft.Xrm.Sdk.EntityRole.Referencing);
			}
			set
			{
				OnPropertyChanging("UserAsModifiedByDelegate");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_systemuser_modifiedonbehalfby", Microsoft.Xrm.Sdk.EntityRole.Referencing, value);
				OnPropertyChanged("UserAsModifiedByDelegate");
			}
		}
		
		/// <summary>
		/// N:1, 'lk_systemuserbase_createdby'
		/// </summary>
		[RelationshipSchemaName("lk_systemuserbase_createdby", Microsoft.Xrm.Sdk.EntityRole.Referencing), AttributeLogicalName("createdby")]
		public User UserAsCreatedBy
		{
			get
			{
				return GetRelatedEntity<User>("lk_systemuserbase_createdby", Microsoft.Xrm.Sdk.EntityRole.Referencing);
			}
			set
			{
				OnPropertyChanging("UserAsCreatedBy");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_systemuserbase_createdby", Microsoft.Xrm.Sdk.EntityRole.Referencing, value);
				OnPropertyChanged("UserAsCreatedBy");
			}
		}
		
		/// <summary>
		/// N:1, 'lk_systemuserbase_modifiedby'
		/// </summary>
		[RelationshipSchemaName("lk_systemuserbase_modifiedby", Microsoft.Xrm.Sdk.EntityRole.Referencing), AttributeLogicalName("modifiedby")]
		public User UserAsModifiedBy
		{
			get
			{
				return GetRelatedEntity<User>("lk_systemuserbase_modifiedby", Microsoft.Xrm.Sdk.EntityRole.Referencing);
			}
			set
			{
				OnPropertyChanging("UserAsModifiedBy");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_systemuserbase_modifiedby", Microsoft.Xrm.Sdk.EntityRole.Referencing, value);
				OnPropertyChanged("UserAsModifiedBy");
			}
		}
		
		/// <summary>
		/// N:1, 'organization_system_users'
		/// </summary>
		[RelationshipSchemaName("organization_system_users"), AttributeLogicalName("organizationid")]
		public Organization OrganizationAsOrganization
		{
			get
			{
				return GetRelatedEntity<Organization>("organization_system_users", null);
			}
			set
			{
				OnPropertyChanging("OrganizationAsOrganization");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<Organization>("organization_system_users", null, value);
				OnPropertyChanged("OrganizationAsOrganization");
			}
		}
		
		/// <summary>
		/// N:1, 'user_parent_user'
		/// </summary>
		[RelationshipSchemaName("user_parent_user", Microsoft.Xrm.Sdk.EntityRole.Referencing), AttributeLogicalName("parentsystemuserid")]
		public User UserAsManager
		{
			get
			{
				return GetRelatedEntity<User>("user_parent_user", Microsoft.Xrm.Sdk.EntityRole.Referencing);
			}
			set
			{
				OnPropertyChanging("UserAsManager");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("user_parent_user", Microsoft.Xrm.Sdk.EntityRole.Referencing, value);
				OnPropertyChanged("UserAsManager");
			}
		}
		
		public static class RelationNames {
			public static RelationName OrganizationsOfCreatedByDelegate = new RelationName("OrganizationsOfCreatedByDelegate");
			public static RelationName OrganizationsOfModifiedByDelegate = new RelationName("OrganizationsOfModifiedByDelegate");
			public static RelationName OrganizationsOfCreatedBy = new RelationName("OrganizationsOfCreatedBy");
			public static RelationName OrganizationsOfModifiedBy = new RelationName("OrganizationsOfModifiedBy");
			public static RelationName UsersOfCreatedByDelegate = new RelationName("UsersOfCreatedByDelegate");
			public static RelationName UsersOfModifiedByDelegate = new RelationName("UsersOfModifiedByDelegate");
			public static RelationName UsersOfCreatedBy = new RelationName("UsersOfCreatedBy");
			public static RelationName UsersOfModifiedBy = new RelationName("UsersOfModifiedBy");
			public static RelationName ThemesOfCreatedBy = new RelationName("ThemesOfCreatedBy");
			public static RelationName ThemesOfCreatedByDelegate = new RelationName("ThemesOfCreatedByDelegate");
			public static RelationName ThemesOfModifiedBy = new RelationName("ThemesOfModifiedBy");
			public static RelationName ThemesOfModifiedByDelegate = new RelationName("ThemesOfModifiedByDelegate");
			public static RelationName UserSettingssOfCreatedByDelegate = new RelationName("UserSettingssOfCreatedByDelegate");
			public static RelationName UserSettingssOfModifiedByDelegate = new RelationName("UserSettingssOfModifiedByDelegate");
			public static RelationName UserSettingssOfCreatedBy = new RelationName("UserSettingssOfCreatedBy");
			public static RelationName UserSettingssOfModifiedBy = new RelationName("UserSettingssOfModifiedBy");
			public static RelationName ActivityPartysOfParty = new RelationName("ActivityPartysOfParty");
			public static RelationName UsersOfManager = new RelationName("UsersOfManager");
			public static RelationName UserSettingssOfSystemUserId = new RelationName("UserSettingssOfSystemUserId");
			public static RelationName UserAsCreatedByDelegate = new RelationName("UserAsCreatedByDelegate");
			public static RelationName UserAsModifiedByDelegate = new RelationName("UserAsModifiedByDelegate");
			public static RelationName UserAsCreatedBy = new RelationName("UserAsCreatedBy");
			public static RelationName UserAsModifiedBy = new RelationName("UserAsModifiedBy");
			public static RelationName OrganizationAsOrganization = new RelationName("OrganizationAsOrganization");
			public static RelationName UserAsManager = new RelationName("UserAsManager");
		}


		protected override IDictionary<string, object[]> RelationProperties { get {
			if (relationProperties != null) return relationProperties;
			relationProperties = new Dictionary<string, object[]>();
			relationProperties["OrganizationsOfCreatedByDelegate"] = new object[] { "OrganizationsOfCreatedByDelegate", "organization", "systemuser", "createdonbehalfby", "systemuserid", "systemuserid", "systemuserid", "lk_organization_createdonbehalfby", typeof (Organization[]) };
			relationProperties["OrganizationsOfModifiedByDelegate"] = new object[] { "OrganizationsOfModifiedByDelegate", "organization", "systemuser", "modifiedonbehalfby", "systemuserid", "systemuserid", "systemuserid", "lk_organization_modifiedonbehalfby", typeof (Organization[]) };
			relationProperties["OrganizationsOfCreatedBy"] = new object[] { "OrganizationsOfCreatedBy", "organization", "systemuser", "createdby", "systemuserid", "systemuserid", "systemuserid", "lk_organizationbase_createdby", typeof (Organization[]) };
			relationProperties["OrganizationsOfModifiedBy"] = new object[] { "OrganizationsOfModifiedBy", "organization", "systemuser", "modifiedby", "systemuserid", "systemuserid", "systemuserid", "lk_organizationbase_modifiedby", typeof (Organization[]) };
			relationProperties["UsersOfCreatedByDelegate"] = new object[] { "UsersOfCreatedByDelegate", "systemuser", "systemuser", "createdonbehalfby", "systemuserid", "systemuserid", "systemuserid", "lk_systemuser_createdonbehalfby", typeof (User[]) };
			relationProperties["UsersOfModifiedByDelegate"] = new object[] { "UsersOfModifiedByDelegate", "systemuser", "systemuser", "modifiedonbehalfby", "systemuserid", "systemuserid", "systemuserid", "lk_systemuser_modifiedonbehalfby", typeof (User[]) };
			relationProperties["UsersOfCreatedBy"] = new object[] { "UsersOfCreatedBy", "systemuser", "systemuser", "createdby", "systemuserid", "systemuserid", "systemuserid", "lk_systemuserbase_createdby", typeof (User[]) };
			relationProperties["UsersOfModifiedBy"] = new object[] { "UsersOfModifiedBy", "systemuser", "systemuser", "modifiedby", "systemuserid", "systemuserid", "systemuserid", "lk_systemuserbase_modifiedby", typeof (User[]) };
			relationProperties["ThemesOfCreatedBy"] = new object[] { "ThemesOfCreatedBy", "theme", "systemuser", "createdby", "systemuserid", "systemuserid", "systemuserid", "lk_theme_createdby", typeof (Theme[]) };
			relationProperties["ThemesOfCreatedByDelegate"] = new object[] { "ThemesOfCreatedByDelegate", "theme", "systemuser", "createdonbehalfby", "systemuserid", "systemuserid", "systemuserid", "lk_theme_createdonbehalfby", typeof (Theme[]) };
			relationProperties["ThemesOfModifiedBy"] = new object[] { "ThemesOfModifiedBy", "theme", "systemuser", "modifiedby", "systemuserid", "systemuserid", "systemuserid", "lk_theme_modifiedby", typeof (Theme[]) };
			relationProperties["ThemesOfModifiedByDelegate"] = new object[] { "ThemesOfModifiedByDelegate", "theme", "systemuser", "modifiedonbehalfby", "systemuserid", "systemuserid", "systemuserid", "lk_theme_modifiedonbehalfby", typeof (Theme[]) };
			relationProperties["UserSettingssOfCreatedByDelegate"] = new object[] { "UserSettingssOfCreatedByDelegate", "usersettings", "systemuser", "createdonbehalfby", "systemuserid", "systemuserid", "systemuserid", "lk_usersettings_createdonbehalfby", typeof (UserSettings[]) };
			relationProperties["UserSettingssOfModifiedByDelegate"] = new object[] { "UserSettingssOfModifiedByDelegate", "usersettings", "systemuser", "modifiedonbehalfby", "systemuserid", "systemuserid", "systemuserid", "lk_usersettings_modifiedonbehalfby", typeof (UserSettings[]) };
			relationProperties["UserSettingssOfCreatedBy"] = new object[] { "UserSettingssOfCreatedBy", "usersettings", "systemuser", "createdby", "systemuserid", "systemuserid", "systemuserid", "lk_usersettingsbase_createdby", typeof (UserSettings[]) };
			relationProperties["UserSettingssOfModifiedBy"] = new object[] { "UserSettingssOfModifiedBy", "usersettings", "systemuser", "modifiedby", "systemuserid", "systemuserid", "systemuserid", "lk_usersettingsbase_modifiedby", typeof (UserSettings[]) };
			relationProperties["ActivityPartysOfParty"] = new object[] { "ActivityPartysOfParty", "activityparty", "systemuser", "partyid", "systemuserid", "systemuserid", "systemuserid", "system_user_activity_parties", typeof (ActivityParty[]) };
			relationProperties["UsersOfManager"] = new object[] { "UsersOfManager", "systemuser", "systemuser", "parentsystemuserid", "systemuserid", "systemuserid", "systemuserid", "user_parent_user", typeof (User[]) };
			relationProperties["UserSettingssOfSystemUserId"] = new object[] { "UserSettingssOfSystemUserId", "usersettings", "systemuser", "systemuserid", "systemuserid", "systemuserid", "systemuserid", "user_settings", typeof (UserSettings[]) };
			relationProperties["UserAsCreatedByDelegate"] = new object[] { "UserAsCreatedByDelegate", "systemuser", "systemuser", "systemuserid", "createdonbehalfby", "systemuserid", "systemuserid", "lk_systemuser_createdonbehalfby", typeof (User) };
			relationProperties["UserAsModifiedByDelegate"] = new object[] { "UserAsModifiedByDelegate", "systemuser", "systemuser", "systemuserid", "modifiedonbehalfby", "systemuserid", "systemuserid", "lk_systemuser_modifiedonbehalfby", typeof (User) };
			relationProperties["UserAsCreatedBy"] = new object[] { "UserAsCreatedBy", "systemuser", "systemuser", "systemuserid", "createdby", "systemuserid", "systemuserid", "lk_systemuserbase_createdby", typeof (User) };
			relationProperties["UserAsModifiedBy"] = new object[] { "UserAsModifiedBy", "systemuser", "systemuser", "systemuserid", "modifiedby", "systemuserid", "systemuserid", "lk_systemuserbase_modifiedby", typeof (User) };
			relationProperties["OrganizationAsOrganization"] = new object[] { "OrganizationAsOrganization", "organization", "systemuser", "organizationid", "organizationid", "systemuserid", "systemuserid", "organization_system_users", typeof (Organization) };
			relationProperties["UserAsManager"] = new object[] { "UserAsManager", "systemuser", "systemuser", "systemuserid", "parentsystemuserid", "systemuserid", "systemuserid", "user_parent_user", typeof (User) };
			return relationProperties; } }


		#endregion

		/// <summary>
		/// Constructor for populating via LINQ queries given a LINQ anonymous type
		/// <param name="anonymousType">LINQ anonymous type.</param>
		/// </summary>
		public User(object anonymousType) : 
				this()
		{
            foreach (var p in anonymousType.GetType().GetProperties())
            {
                var value = p.GetValue(anonymousType, null);
                if (p.PropertyType == typeof(System.Guid))
                {
                    // Type is Guid, must be Id
                    base.Id = (System.Guid)value;
                    Attributes["systemuserid"] = base.Id;
               }
                else if (p.Name == "FormattedValues")
                {
                    // Add Support for FormattedValues
                    FormattedValues.AddRange((FormattedValueCollection)value);
                }
                else
                {
                    Attributes[p.Name.ToLower()] = value;
                }
            }
		}


		#region Label/value pairs

		#region AccessMode

		public enum AccessModeEnum
		{
			[EnumMember]ReadWrite = 0,
			[EnumMember]Administrative = 1,
			[EnumMember]Read = 2,
			[EnumMember]SupportUser = 3,
			[EnumMember]Noninteractive = 4,
			[EnumMember]DelegatedAdmin = 5,
		}

		#endregion
	
		#region Address1AddressType

		public enum Address1AddressTypeEnum
		{
			[EnumMember]DefaultValue = 1,
		}

		#endregion
	
		#region Address1ShippingMethod

		public enum Address1ShippingMethodEnum
		{
			[EnumMember]DefaultValue = 1,
		}

		#endregion
	
		#region Address2AddressType

		public enum Address2AddressTypeEnum
		{
			[EnumMember]DefaultValue = 1,
		}

		#endregion
	
		#region Address2ShippingMethod

		public enum Address2ShippingMethodEnum
		{
			[EnumMember]DefaultValue = 1,
		}

		#endregion
	
		#region LicenseType

		public enum LicenseTypeEnum
		{
			[EnumMember]Professional = 0,
			[EnumMember]Administrative = 1,
			[EnumMember]Basic = 2,
			[EnumMember]DeviceProfessional = 3,
			[EnumMember]DeviceBasic = 4,
			[EnumMember]Essential = 5,
			[EnumMember]DeviceEssential = 6,
			[EnumMember]Enterprise = 7,
			[EnumMember]DeviceEnterprise = 8,
			[EnumMember]Sales = 9,
			[EnumMember]Service = 10,
			[EnumMember]FieldService = 11,
			[EnumMember]ProjectService = 12,
		}

		#endregion
	
		#region DefaultFiltersPopulated

		public enum DefaultFiltersPopulatedEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region DisplayinServiceViews

		public enum DisplayinServiceViewsEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region PrimaryEmailStatus

		public enum PrimaryEmailStatusEnum
		{
			[EnumMember]Empty = 0,
			[EnumMember]Approved = 1,
			[EnumMember]PendingApproval = 2,
			[EnumMember]Rejected = 3,
		}

		#endregion
	
		#region IncomingEmailDeliveryMethod

		public enum IncomingEmailDeliveryMethodEnum
		{
			[EnumMember]None = 0,
			[EnumMember]MicrosoftDynamics365forOutlook = 1,
			[EnumMember]ServerSideSynchronizationorEmailRouter = 2,
			[EnumMember]ForwardMailbox = 3,
		}

		#endregion
	
		#region InvitationStatus

		public enum InvitationStatusEnum
		{
			[EnumMember]InvitationNotSent = 0,
			[EnumMember]Invited = 1,
			[EnumMember]InvitationNearExpired = 2,
			[EnumMember]InvitationExpired = 3,
			[EnumMember]InvitationAccepted = 4,
			[EnumMember]InvitationRejected = 5,
			[EnumMember]InvitationRevoked = 6,
		}

		#endregion
	
		#region IsActiveDirectoryUser

		public enum IsActiveDirectoryUserEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region Status

		public enum StatusEnum
		{
			[EnumMember]Disabled = 1,
			[EnumMember]Enabled = 0,
		}

		#endregion
	
		#region EmailAddressO365AdminApprovalStatus

		public enum EmailAddressO365AdminApprovalStatusEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region Integrationusermode

		public enum IntegrationusermodeEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region UserLicensed

		public enum UserLicensedEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region UserSynced

		public enum UserSyncedEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region OutgoingEmailDeliveryMethod

		public enum OutgoingEmailDeliveryMethodEnum
		{
			[EnumMember]None = 0,
			[EnumMember]MicrosoftDynamics365forOutlook = 1,
			[EnumMember]ServerSideSynchronizationorEmailRouter = 2,
		}

		#endregion
	
		#region PreferredAddress

		public enum PreferredAddressEnum
		{
			[EnumMember]MailingAddress = 1,
			[EnumMember]OtherAddress = 2,
		}

		#endregion
	
		#region PreferredEmail

		public enum PreferredEmailEnum
		{
			[EnumMember]DefaultValue = 1,
		}

		#endregion
	
		#region PreferredPhone

		public enum PreferredPhoneEnum
		{
			[EnumMember]MainPhone = 1,
			[EnumMember]OtherPhone = 2,
			[EnumMember]HomePhone = 3,
			[EnumMember]MobilePhone = 4,
		}

		#endregion
	
		#region RestrictedAccessMode

		public enum RestrictedAccessModeEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#endregion


		#region Metadata


		#region Enums

		public static class Enums
		{
			/// <summary>
			/// Gets the label corresponding to the option-set's value using its logical name,
			/// the value within, and the language code.
			/// </summary>
			/// <param name="logicalName">The logical name of the option-set in CRM</param>
			/// <param name="constant">The value from the option-set</param>
			/// <param name="languageCode">The language code from CRM</param>
			/// <returns></returns>
			public static string GetLabel(string logicalName, int constant, int languageCode = 1033)
			{
				return GeneratorHelpers.GetLabel(logicalName, constant, typeof(Enums), languageCode);
			}
			/// <summary>
			/// Gets the value corresponding to the option-set's label using its logical name,
			/// the value within, and the language code.
			/// </summary>
			/// <param name="logicalName">The logical name of the option-set in CRM</param>
			/// <param name="label">The label from the option-set</param>
			/// <param name="languageCode">The language code from CRM</param>
			/// <returns>The value corresponding to the label</returns>
			public static int GetValue(string logicalName, string label, int languageCode = 1033)
			{
				return GeneratorHelpers.GetValue(logicalName, label, typeof(Enums), languageCode);
			}

			#region Logical names

			public static class Names
			{
				public const string AccessMode = "accessmode";
				public const string Address1AddressType = "address1_addresstypecode";
				public const string Address1ShippingMethod = "address1_shippingmethodcode";
				public const string Address2AddressType = "address2_addresstypecode";
				public const string Address2ShippingMethod = "address2_shippingmethodcode";
				public const string LicenseType = "caltype";
				public const string DefaultFiltersPopulated = "defaultfilterspopulated";
				public const string DisplayinServiceViews = "displayinserviceviews";
				public const string PrimaryEmailStatus = "emailrouteraccessapproval";
				public const string IncomingEmailDeliveryMethod = "incomingemaildeliverymethod";
				public const string InvitationStatus = "invitestatuscode";
				public const string IsActiveDirectoryUser = "isactivedirectoryuser";
				public const string Status = "isdisabled";
				public const string EmailAddressO365AdminApprovalStatus = "isemailaddressapprovedbyo365admin";
				public const string Integrationusermode = "isintegrationuser";
				public const string UserLicensed = "islicensed";
				public const string UserSynced = "issyncwithdirectory";
				public const string OutgoingEmailDeliveryMethod = "outgoingemaildeliverymethod";
				public const string PreferredAddress = "preferredaddresscode";
				public const string PreferredEmail = "preferredemailcode";
				public const string PreferredPhone = "preferredphonecode";
				public const string RestrictedAccessMode = "setupuser";
			}

			#endregion

			#region Labels

			public static class Labels
			{
				public static class AccessMode 
				{
					public const string ReadWrite_1033 = "Read-Write";
					public const string Administrative_1033 = "Administrative";
					public const string Read_1033 = "Read";
					public const string SupportUser_1033 = "Support User";
					public const string Noninteractive_1033 = "Non-interactive";
					public const string DelegatedAdmin_1033 = "Delegated Admin";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(AccessMode), label, languageCode);
					}
				}

				public static class Address1AddressType 
				{
					public const string DefaultValue_1033 = "Default Value";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(Address1AddressType), label, languageCode);
					}
				}

				public static class Address1ShippingMethod 
				{
					public const string DefaultValue_1033 = "Default Value";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(Address1ShippingMethod), label, languageCode);
					}
				}

				public static class Address2AddressType 
				{
					public const string DefaultValue_1033 = "Default Value";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(Address2AddressType), label, languageCode);
					}
				}

				public static class Address2ShippingMethod 
				{
					public const string DefaultValue_1033 = "Default Value";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(Address2ShippingMethod), label, languageCode);
					}
				}

				public static class LicenseType 
				{
					public const string Professional_1033 = "Professional";
					public const string Administrative_1033 = "Administrative";
					public const string Basic_1033 = "Basic";
					public const string DeviceProfessional_1033 = "Device Professional";
					public const string DeviceBasic_1033 = "Device Basic";
					public const string Essential_1033 = "Essential";
					public const string DeviceEssential_1033 = "Device Essential";
					public const string Enterprise_1033 = "Enterprise";
					public const string DeviceEnterprise_1033 = "Device Enterprise";
					public const string Sales_1033 = "Sales";
					public const string Service_1033 = "Service";
					public const string FieldService_1033 = "Field Service";
					public const string ProjectService_1033 = "Project Service";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(LicenseType), label, languageCode);
					}
				}

				public static class DefaultFiltersPopulated 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(DefaultFiltersPopulated), label, languageCode);
					}
				}

				public static class DisplayinServiceViews 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(DisplayinServiceViews), label, languageCode);
					}
				}

				public static class PrimaryEmailStatus 
				{
					public const string Empty_1033 = "Empty";
					public const string Approved_1033 = "Approved";
					public const string PendingApproval_1033 = "Pending Approval";
					public const string Rejected_1033 = "Rejected";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(PrimaryEmailStatus), label, languageCode);
					}
				}

				public static class IncomingEmailDeliveryMethod 
				{
					public const string None_1033 = "None";
					public const string MicrosoftDynamics365forOutlook_1033 = "Microsoft Dynamics 365 for Outlook";
					public const string ServerSideSynchronizationorEmailRouter_1033 = "Server-Side Synchronization or Email Router";
					public const string ForwardMailbox_1033 = "Forward Mailbox";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(IncomingEmailDeliveryMethod), label, languageCode);
					}
				}

				public static class InvitationStatus 
				{
					public const string InvitationNotSent_1033 = "Invitation Not Sent";
					public const string Invited_1033 = "Invited";
					public const string InvitationNearExpired_1033 = "Invitation Near Expired";
					public const string InvitationExpired_1033 = "Invitation Expired";
					public const string InvitationAccepted_1033 = "Invitation Accepted";
					public const string InvitationRejected_1033 = "Invitation Rejected";
					public const string InvitationRevoked_1033 = "Invitation Revoked";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(InvitationStatus), label, languageCode);
					}
				}

				public static class IsActiveDirectoryUser 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(IsActiveDirectoryUser), label, languageCode);
					}
				}

				public static class Status 
				{
					public const string Disabled_1033 = "Disabled";
					public const string Enabled_1033 = "Enabled";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(Status), label, languageCode);
					}
				}

				public static class EmailAddressO365AdminApprovalStatus 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(EmailAddressO365AdminApprovalStatus), label, languageCode);
					}
				}

				public static class Integrationusermode 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(Integrationusermode), label, languageCode);
					}
				}

				public static class UserLicensed 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(UserLicensed), label, languageCode);
					}
				}

				public static class UserSynced 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(UserSynced), label, languageCode);
					}
				}

				public static class OutgoingEmailDeliveryMethod 
				{
					public const string None_1033 = "None";
					public const string MicrosoftDynamics365forOutlook_1033 = "Microsoft Dynamics 365 for Outlook";
					public const string ServerSideSynchronizationorEmailRouter_1033 = "Server-Side Synchronization or Email Router";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(OutgoingEmailDeliveryMethod), label, languageCode);
					}
				}

				public static class PreferredAddress 
				{
					public const string MailingAddress_1033 = "Mailing Address";
					public const string OtherAddress_1033 = "Other Address";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(PreferredAddress), label, languageCode);
					}
				}

				public static class PreferredEmail 
				{
					public const string DefaultValue_1033 = "Default Value";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(PreferredEmail), label, languageCode);
					}
				}

				public static class PreferredPhone 
				{
					public const string MainPhone_1033 = "Main Phone";
					public const string OtherPhone_1033 = "Other Phone";
					public const string HomePhone_1033 = "Home Phone";
					public const string MobilePhone_1033 = "Mobile Phone";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(PreferredPhone), label, languageCode);
					}
				}

				public static class RestrictedAccessMode 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(RestrictedAccessMode), label, languageCode);
					}
				}

			}

			#endregion
		}

		#endregion

		#region Fields

		public static class Fields
		{
			#region Logical names

			public const string AccessMode = "accessmode";
			public const string Address1ID = "address1_addressid";
			public const string Address1AddressType = "address1_addresstypecode";
			public const string City = "address1_city";
			public const string Address = "address1_composite";
			public const string CountryRegion = "address1_country";
			public const string Address1County = "address1_county";
			public const string Address1Fax = "address1_fax";
			public const string Address1Latitude = "address1_latitude";
			public const string Street1 = "address1_line1";
			public const string Street2 = "address1_line2";
			public const string Street3 = "address1_line3";
			public const string Address1Longitude = "address1_longitude";
			public const string Address1Name = "address1_name";
			public const string ZIPPostalCode = "address1_postalcode";
			public const string Address1PostOfficeBox = "address1_postofficebox";
			public const string Address1ShippingMethod = "address1_shippingmethodcode";
			public const string StateProvince = "address1_stateorprovince";
			public const string MainPhone = "address1_telephone1";
			public const string OtherPhone = "address1_telephone2";
			public const string Pager = "address1_telephone3";
			public const string Address1UPSZone = "address1_upszone";
			public const string Address1UTCOffset = "address1_utcoffset";
			public const string Address2ID = "address2_addressid";
			public const string Address2AddressType = "address2_addresstypecode";
			public const string OtherCity = "address2_city";
			public const string OtherAddress = "address2_composite";
			public const string OtherCountryRegion = "address2_country";
			public const string Address2County = "address2_county";
			public const string Address2Fax = "address2_fax";
			public const string Address2Latitude = "address2_latitude";
			public const string OtherStreet1 = "address2_line1";
			public const string OtherStreet2 = "address2_line2";
			public const string OtherStreet3 = "address2_line3";
			public const string Address2Longitude = "address2_longitude";
			public const string Address2Name = "address2_name";
			public const string OtherZIPPostalCode = "address2_postalcode";
			public const string Address2PostOfficeBox = "address2_postofficebox";
			public const string Address2ShippingMethod = "address2_shippingmethodcode";
			public const string OtherStateProvince = "address2_stateorprovince";
			public const string Address2Telephone1 = "address2_telephone1";
			public const string Address2Telephone2 = "address2_telephone2";
			public const string Address2Telephone3 = "address2_telephone3";
			public const string Address2UPSZone = "address2_upszone";
			public const string Address2UTCOffset = "address2_utcoffset";
			public const string ApplicationID = "applicationid";
			public const string ApplicationIDURI = "applicationiduri";
			public const string AzureADObjectID = "azureactivedirectoryobjectid";
			public const string BusinessUnit = "businessunitid";
			public const string Calendar = "calendarid";
			public const string LicenseType = "caltype";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedByDelegate = "createdonbehalfby";
			public const string DefaultFiltersPopulated = "defaultfilterspopulated";
			public const string Mailbox = "defaultmailbox";
			public const string DefaultOneDriveforBusinessFolderName = "defaultodbfoldername";
			public const string DisabledReason = "disabledreason";
			public const string DisplayinServiceViews = "displayinserviceviews";
			public const string UserName = "domainname";
			public const string PrimaryEmailStatus = "emailrouteraccessapproval";
			public const string Employee = "employeeid";
			public const string EntityImageId = "entityimageid";
			public const string ExchangeRate = "exchangerate";
			public const string FirstName = "firstname";
			public const string FullName = "fullname";
			public const string Government = "governmentid";
			public const string HomePhone = "homephone";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string IncomingEmailDeliveryMethod = "incomingemaildeliverymethod";
			public const string PrimaryEmail = "internalemailaddress";
			public const string InvitationStatus = "invitestatuscode";
			public const string Status = "isdisabled";
			public const string EmailAddressO365AdminApprovalStatus = "isemailaddressapprovedbyo365admin";
			public const string Integrationusermode = "isintegrationuser";
			public const string UserLicensed = "islicensed";
			public const string UserSynced = "issyncwithdirectory";
			public const string JobTitle = "jobtitle";
			public const string LastName = "lastname";
			public const string MiddleName = "middlename";
			public const string MobileAlertEmail = "mobilealertemail";
			public const string MobileOfflineProfile = "mobileofflineprofileid";
			public const string MobilePhone = "mobilephone";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedByDelegate = "modifiedonbehalfby";
			public const string Team = "new_team";
			public const string Nickname = "nickname";
			public const string Organization = "organizationid";
			public const string OutgoingEmailDeliveryMethod = "outgoingemaildeliverymethod";
			public const string RecordCreatedOn = "overriddencreatedon";
			public const string Manager = "parentsystemuserid";
			public const string PassportHi = "passporthi";
			public const string PassportLo = "passportlo";
			public const string Email2 = "personalemailaddress";
			public const string PhotoURL = "photourl";
			public const string Position = "positionid";
			public const string PreferredAddress = "preferredaddresscode";
			public const string PreferredEmail = "preferredemailcode";
			public const string PreferredPhone = "preferredphonecode";
			public const string Process = "processid";
			public const string DefaultQueue = "queueid";
			public const string Salutation = "salutation";
			public const string RestrictedAccessMode = "setupuser";
			public const string SharePointEmailAddress = "sharepointemailaddress";
			public const string Site = "siteid";
			public const string Skills = "skills";
			public const string ProcessStage = "stageid";
			public const string UserId = "systemuserid";
			public const string Territory = "territoryid";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string Title = "title";
			public const string Currency = "transactioncurrencyid";
			public const string TraversedPath = "traversedpath";
			public const string UserLicenseType = "userlicensetype";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string Versionnumber = "versionnumber";
			public const string WindowsLiveID = "windowsliveid";
			public const string YammerEmail = "yammeremailaddress";
			public const string YammerUserID = "yammeruserid";
			public const string YomiFirstName = "yomifirstname";
			public const string YomiFullName = "yomifullname";
			public const string YomiLastName = "yomilastname";
			public const string YomiMiddleName = "yomimiddlename";

			#endregion

			#region Schema names

			public static class Schema
			{
				public const string AccessMode = "AccessMode";
				public const string Address1ID = "Address1_AddressId";
				public const string Address1AddressType = "Address1_AddressTypeCode";
				public const string City = "Address1_City";
				public const string Address = "Address1_Composite";
				public const string CountryRegion = "Address1_Country";
				public const string Address1County = "Address1_County";
				public const string Address1Fax = "Address1_Fax";
				public const string Address1Latitude = "Address1_Latitude";
				public const string Street1 = "Address1_Line1";
				public const string Street2 = "Address1_Line2";
				public const string Street3 = "Address1_Line3";
				public const string Address1Longitude = "Address1_Longitude";
				public const string Address1Name = "Address1_Name";
				public const string ZIPPostalCode = "Address1_PostalCode";
				public const string Address1PostOfficeBox = "Address1_PostOfficeBox";
				public const string Address1ShippingMethod = "Address1_ShippingMethodCode";
				public const string StateProvince = "Address1_StateOrProvince";
				public const string MainPhone = "Address1_Telephone1";
				public const string OtherPhone = "Address1_Telephone2";
				public const string Pager = "Address1_Telephone3";
				public const string Address1UPSZone = "Address1_UPSZone";
				public const string Address1UTCOffset = "Address1_UTCOffset";
				public const string Address2ID = "Address2_AddressId";
				public const string Address2AddressType = "Address2_AddressTypeCode";
				public const string OtherCity = "Address2_City";
				public const string OtherAddress = "Address2_Composite";
				public const string OtherCountryRegion = "Address2_Country";
				public const string Address2County = "Address2_County";
				public const string Address2Fax = "Address2_Fax";
				public const string Address2Latitude = "Address2_Latitude";
				public const string OtherStreet1 = "Address2_Line1";
				public const string OtherStreet2 = "Address2_Line2";
				public const string OtherStreet3 = "Address2_Line3";
				public const string Address2Longitude = "Address2_Longitude";
				public const string Address2Name = "Address2_Name";
				public const string OtherZIPPostalCode = "Address2_PostalCode";
				public const string Address2PostOfficeBox = "Address2_PostOfficeBox";
				public const string Address2ShippingMethod = "Address2_ShippingMethodCode";
				public const string OtherStateProvince = "Address2_StateOrProvince";
				public const string Address2Telephone1 = "Address2_Telephone1";
				public const string Address2Telephone2 = "Address2_Telephone2";
				public const string Address2Telephone3 = "Address2_Telephone3";
				public const string Address2UPSZone = "Address2_UPSZone";
				public const string Address2UTCOffset = "Address2_UTCOffset";
				public const string ApplicationID = "ApplicationId";
				public const string ApplicationIDURI = "ApplicationIdUri";
				public const string AzureADObjectID = "AzureActiveDirectoryObjectId";
				public const string BusinessUnit = "BusinessUnitId";
				public const string Calendar = "CalendarId";
				public const string LicenseType = "CALType";
				public const string CreatedBy = "CreatedBy";
				public const string CreatedOn = "CreatedOn";
				public const string CreatedByDelegate = "CreatedOnBehalfBy";
				public const string DefaultFiltersPopulated = "DefaultFiltersPopulated";
				public const string Mailbox = "DefaultMailbox";
				public const string DefaultOneDriveforBusinessFolderName = "DefaultOdbFolderName";
				public const string DisabledReason = "DisabledReason";
				public const string DisplayinServiceViews = "DisplayInServiceViews";
				public const string UserName = "DomainName";
				public const string PrimaryEmailStatus = "EmailRouterAccessApproval";
				public const string Employee = "EmployeeId";
				public const string EntityImageId = "EntityImageId";
				public const string ExchangeRate = "ExchangeRate";
				public const string FirstName = "FirstName";
				public const string FullName = "FullName";
				public const string Government = "GovernmentId";
				public const string HomePhone = "HomePhone";
				public const string ImportSequenceNumber = "ImportSequenceNumber";
				public const string IncomingEmailDeliveryMethod = "IncomingEmailDeliveryMethod";
				public const string PrimaryEmail = "InternalEMailAddress";
				public const string InvitationStatus = "InviteStatusCode";
				public const string Status = "IsDisabled";
				public const string EmailAddressO365AdminApprovalStatus = "IsEmailAddressApprovedByO365Admin";
				public const string Integrationusermode = "IsIntegrationUser";
				public const string UserLicensed = "IsLicensed";
				public const string UserSynced = "IsSyncWithDirectory";
				public const string JobTitle = "JobTitle";
				public const string LastName = "LastName";
				public const string MiddleName = "MiddleName";
				public const string MobileAlertEmail = "MobileAlertEMail";
				public const string MobileOfflineProfile = "MobileOfflineProfileId";
				public const string MobilePhone = "MobilePhone";
				public const string ModifiedBy = "ModifiedBy";
				public const string ModifiedOn = "ModifiedOn";
				public const string ModifiedByDelegate = "ModifiedOnBehalfBy";
				public const string Team = "new_Team";
				public const string Nickname = "NickName";
				public const string Organization = "OrganizationId";
				public const string OutgoingEmailDeliveryMethod = "OutgoingEmailDeliveryMethod";
				public const string RecordCreatedOn = "OverriddenCreatedOn";
				public const string Manager = "ParentSystemUserId";
				public const string PassportHi = "PassportHi";
				public const string PassportLo = "PassportLo";
				public const string Email2 = "PersonalEMailAddress";
				public const string PhotoURL = "PhotoUrl";
				public const string Position = "PositionId";
				public const string PreferredAddress = "PreferredAddressCode";
				public const string PreferredEmail = "PreferredEmailCode";
				public const string PreferredPhone = "PreferredPhoneCode";
				public const string Process = "ProcessId";
				public const string DefaultQueue = "QueueId";
				public const string Salutation = "Salutation";
				public const string RestrictedAccessMode = "SetupUser";
				public const string SharePointEmailAddress = "SharePointEmailAddress";
				public const string Site = "SiteId";
				public const string Skills = "Skills";
				public const string ProcessStage = "StageId";
				public const string UserId = "SystemUserId";
				public const string Territory = "TerritoryId";
				public const string TimeZoneRuleVersionNumber = "TimeZoneRuleVersionNumber";
				public const string Title = "Title";
				public const string Currency = "TransactionCurrencyId";
				public const string TraversedPath = "TraversedPath";
				public const string UserLicenseType = "UserLicenseType";
				public const string UTCConversionTimeZoneCode = "UTCConversionTimeZoneCode";
				public const string Versionnumber = "VersionNumber";
				public const string WindowsLiveID = "WindowsLiveID";
				public const string YammerEmail = "YammerEmailAddress";
				public const string YammerUserID = "YammerUserId";
				public const string YomiFirstName = "YomiFirstName";
				public const string YomiFullName = "YomiFullName";
				public const string YomiLastName = "YomiLastName";
				public const string YomiMiddleName = "YomiMiddleName";
			}

			#endregion

			#region Labels

			public static class Labels
			{
				public static class AccessMode
				{
					public const string _1033 = "Access Mode";
				}

				public static class Address1ID
				{
					public const string _1033 = "Address 1: ID";
				}

				public static class Address1AddressType
				{
					public const string _1033 = "Address 1: Address Type";
				}

				public static class City
				{
					public const string _1033 = "City";
				}

				public static class Address
				{
					public const string _1033 = "Address";
				}

				public static class CountryRegion
				{
					public const string _1033 = "Country/Region";
				}

				public static class Address1County
				{
					public const string _1033 = "Address 1: County";
				}

				public static class Address1Fax
				{
					public const string _1033 = "Address 1: Fax";
				}

				public static class Address1Latitude
				{
					public const string _1033 = "Address 1: Latitude";
				}

				public static class Street1
				{
					public const string _1033 = "Street 1";
				}

				public static class Street2
				{
					public const string _1033 = "Street 2";
				}

				public static class Street3
				{
					public const string _1033 = "Street 3";
				}

				public static class Address1Longitude
				{
					public const string _1033 = "Address 1: Longitude";
				}

				public static class Address1Name
				{
					public const string _1033 = "Address 1: Name";
				}

				public static class ZIPPostalCode
				{
					public const string _1033 = "ZIP/Postal Code";
				}

				public static class Address1PostOfficeBox
				{
					public const string _1033 = "Address 1: Post Office Box";
				}

				public static class Address1ShippingMethod
				{
					public const string _1033 = "Address 1: Shipping Method";
				}

				public static class StateProvince
				{
					public const string _1033 = "State/Province";
				}

				public static class MainPhone
				{
					public const string _1033 = "Main Phone";
				}

				public static class OtherPhone
				{
					public const string _1033 = "Other Phone";
				}

				public static class Pager
				{
					public const string _1033 = "Pager";
				}

				public static class Address1UPSZone
				{
					public const string _1033 = "Address 1: UPS Zone";
				}

				public static class Address1UTCOffset
				{
					public const string _1033 = "Address 1: UTC Offset";
				}

				public static class Address2ID
				{
					public const string _1033 = "Address 2: ID";
				}

				public static class Address2AddressType
				{
					public const string _1033 = "Address 2: Address Type";
				}

				public static class OtherCity
				{
					public const string _1033 = "Other City";
				}

				public static class OtherAddress
				{
					public const string _1033 = "Other Address";
				}

				public static class OtherCountryRegion
				{
					public const string _1033 = "Other Country/Region";
				}

				public static class Address2County
				{
					public const string _1033 = "Address 2: County";
				}

				public static class Address2Fax
				{
					public const string _1033 = "Address 2: Fax";
				}

				public static class Address2Latitude
				{
					public const string _1033 = "Address 2: Latitude";
				}

				public static class OtherStreet1
				{
					public const string _1033 = "Other Street 1";
				}

				public static class OtherStreet2
				{
					public const string _1033 = "Other Street 2";
				}

				public static class OtherStreet3
				{
					public const string _1033 = "Other Street 3";
				}

				public static class Address2Longitude
				{
					public const string _1033 = "Address 2: Longitude";
				}

				public static class Address2Name
				{
					public const string _1033 = "Address 2: Name";
				}

				public static class OtherZIPPostalCode
				{
					public const string _1033 = "Other ZIP/Postal Code";
				}

				public static class Address2PostOfficeBox
				{
					public const string _1033 = "Address 2: Post Office Box";
				}

				public static class Address2ShippingMethod
				{
					public const string _1033 = "Address 2: Shipping Method";
				}

				public static class OtherStateProvince
				{
					public const string _1033 = "Other State/Province";
				}

				public static class Address2Telephone1
				{
					public const string _1033 = "Address 2: Telephone 1";
				}

				public static class Address2Telephone2
				{
					public const string _1033 = "Address 2: Telephone 2";
				}

				public static class Address2Telephone3
				{
					public const string _1033 = "Address 2: Telephone 3";
				}

				public static class Address2UPSZone
				{
					public const string _1033 = "Address 2: UPS Zone";
				}

				public static class Address2UTCOffset
				{
					public const string _1033 = "Address 2: UTC Offset";
				}

				public static class ApplicationID
				{
					public const string _1033 = "Application ID";
				}

				public static class ApplicationIDURI
				{
					public const string _1033 = "Application ID URI";
				}

				public static class AzureADObjectID
				{
					public const string _1033 = "Azure AD Object ID";
				}

				public static class BusinessUnit
				{
					public const string _1033 = "Business Unit";
				}

				public static class Calendar
				{
					public const string _1033 = "Calendar";
				}

				public static class LicenseType
				{
					public const string _1033 = "License Type";
				}

				public static class CreatedBy
				{
					public const string _1033 = "Created By";
				}

				public static class CreatedOn
				{
					public const string _1033 = "Created On";
				}

				public static class CreatedByDelegate
				{
					public const string _1033 = "Created By (Delegate)";
				}

				public static class DefaultFiltersPopulated
				{
					public const string _1033 = "Default Filters Populated";
				}

				public static class Mailbox
				{
					public const string _1033 = "Mailbox";
				}

				public static class DefaultOneDriveforBusinessFolderName
				{
					public const string _1033 = "Default OneDrive for Business Folder Name";
				}

				public static class DisabledReason
				{
					public const string _1033 = "Disabled Reason";
				}

				public static class DisplayinServiceViews
				{
					public const string _1033 = "Display in Service Views";
				}

				public static class UserName
				{
					public const string _1033 = "User Name";
				}

				public static class PrimaryEmailStatus
				{
					public const string _1033 = "Primary Email Status";
				}

				public static class Employee
				{
					public const string _1033 = "Employee";
				}

				public static class EntityImageId
				{
					public const string _1033 = "Entity Image Id";
				}

				public static class ExchangeRate
				{
					public const string _1033 = "Exchange Rate";
				}

				public static class FirstName
				{
					public const string _1033 = "First Name";
				}

				public static class FullName
				{
					public const string _1033 = "Full Name";
				}

				public static class Government
				{
					public const string _1033 = "Government";
				}

				public static class HomePhone
				{
					public const string _1033 = "Home Phone";
				}

				public static class ImportSequenceNumber
				{
					public const string _1033 = "Import Sequence Number";
				}

				public static class IncomingEmailDeliveryMethod
				{
					public const string _1033 = "Incoming Email Delivery Method";
				}

				public static class PrimaryEmail
				{
					public const string _1033 = "Primary Email";
				}

				public static class InvitationStatus
				{
					public const string _1033 = "Invitation Status";
				}

				public static class Status
				{
					public const string _1033 = "Status";
				}

				public static class EmailAddressO365AdminApprovalStatus
				{
					public const string _1033 = "Email Address O365 Admin Approval Status";
				}

				public static class Integrationusermode
				{
					public const string _1033 = "Integration user mode";
				}

				public static class UserLicensed
				{
					public const string _1033 = "User Licensed";
				}

				public static class UserSynced
				{
					public const string _1033 = "User Synced";
				}

				public static class JobTitle
				{
					public const string _1033 = "Job Title";
				}

				public static class LastName
				{
					public const string _1033 = "Last Name";
				}

				public static class MiddleName
				{
					public const string _1033 = "Middle Name";
				}

				public static class MobileAlertEmail
				{
					public const string _1033 = "Mobile Alert Email";
				}

				public static class MobileOfflineProfile
				{
					public const string _1033 = "Mobile Offline Profile";
				}

				public static class MobilePhone
				{
					public const string _1033 = "Mobile Phone";
				}

				public static class ModifiedBy
				{
					public const string _1033 = "Modified By";
				}

				public static class ModifiedOn
				{
					public const string _1033 = "Modified On";
				}

				public static class ModifiedByDelegate
				{
					public const string _1033 = "Modified By (Delegate)";
				}

				public static class Team
				{
					public const string _1033 = "Team";
				}

				public static class Nickname
				{
					public const string _1033 = "Nickname";
				}

				public static class Organization
				{
					public const string _1033 = "Organization ";
				}

				public static class OutgoingEmailDeliveryMethod
				{
					public const string _1033 = "Outgoing Email Delivery Method";
				}

				public static class RecordCreatedOn
				{
					public const string _1033 = "Record Created On";
				}

				public static class Manager
				{
					public const string _1033 = "Manager";
				}

				public static class PassportHi
				{
					public const string _1033 = "Passport Hi";
				}

				public static class PassportLo
				{
					public const string _1033 = "Passport Lo";
				}

				public static class Email2
				{
					public const string _1033 = "Email 2";
				}

				public static class PhotoURL
				{
					public const string _1033 = "Photo URL";
				}

				public static class Position
				{
					public const string _1033 = "Position";
				}

				public static class PreferredAddress
				{
					public const string _1033 = "Preferred Address";
				}

				public static class PreferredEmail
				{
					public const string _1033 = "Preferred Email";
				}

				public static class PreferredPhone
				{
					public const string _1033 = "Preferred Phone";
				}

				public static class Process
				{
					public const string _1033 = "Process";
				}

				public static class DefaultQueue
				{
					public const string _1033 = "Default Queue";
				}

				public static class Salutation
				{
					public const string _1033 = "Salutation";
				}

				public static class RestrictedAccessMode
				{
					public const string _1033 = "Restricted Access Mode";
				}

				public static class SharePointEmailAddress
				{
					public const string _1033 = "SharePoint Email Address";
				}

				public static class Site
				{
					public const string _1033 = "Site";
				}

				public static class Skills
				{
					public const string _1033 = "Skills";
				}

				public static class ProcessStage
				{
					public const string _1033 = "Process Stage";
				}

				public static class UserId
				{
					public const string _1033 = "User";
				}

				public static class Territory
				{
					public const string _1033 = "Territory";
				}

				public static class TimeZoneRuleVersionNumber
				{
					public const string _1033 = "Time Zone Rule Version Number";
				}

				public static class Title
				{
					public const string _1033 = "Title";
				}

				public static class Currency
				{
					public const string _1033 = "Currency";
				}

				public static class TraversedPath
				{
					public const string _1033 = "Traversed Path";
				}

				public static class UserLicenseType
				{
					public const string _1033 = "User License Type";
				}

				public static class UTCConversionTimeZoneCode
				{
					public const string _1033 = "UTC Conversion Time Zone Code";
				}

				public static class Versionnumber
				{
					public const string _1033 = "Version number";
				}

				public static class WindowsLiveID
				{
					public const string _1033 = "Windows Live ID";
				}

				public static class YammerEmail
				{
					public const string _1033 = "Yammer Email";
				}

				public static class YammerUserID
				{
					public const string _1033 = "Yammer User ID";
				}

				public static class YomiFirstName
				{
					public const string _1033 = "Yomi First Name";
				}

				public static class YomiFullName
				{
					public const string _1033 = "Yomi Full Name";
				}

				public static class YomiLastName
				{
					public const string _1033 = "Yomi Last Name";
				}

				public static class YomiMiddleName
				{
					public const string _1033 = "Yomi Middle Name";
				}

			}

			#endregion
		}

		#endregion

		#region Relations

		public static class Relations
		{
			public static class OneToN
			{
				public const string OrganizationsOfCreatedByDelegate = "lk_organization_createdonbehalfby";
				public const string OrganizationsOfModifiedByDelegate = "lk_organization_modifiedonbehalfby";
				public const string OrganizationsOfCreatedBy = "lk_organizationbase_createdby";
				public const string OrganizationsOfModifiedBy = "lk_organizationbase_modifiedby";
				public const string UsersOfCreatedByDelegate = "lk_systemuser_createdonbehalfby";
				public const string UsersOfModifiedByDelegate = "lk_systemuser_modifiedonbehalfby";
				public const string UsersOfCreatedBy = "lk_systemuserbase_createdby";
				public const string UsersOfModifiedBy = "lk_systemuserbase_modifiedby";
				public const string ThemesOfCreatedBy = "lk_theme_createdby";
				public const string ThemesOfCreatedByDelegate = "lk_theme_createdonbehalfby";
				public const string ThemesOfModifiedBy = "lk_theme_modifiedby";
				public const string ThemesOfModifiedByDelegate = "lk_theme_modifiedonbehalfby";
				public const string UserSettingssOfCreatedByDelegate = "lk_usersettings_createdonbehalfby";
				public const string UserSettingssOfModifiedByDelegate = "lk_usersettings_modifiedonbehalfby";
				public const string UserSettingssOfCreatedBy = "lk_usersettingsbase_createdby";
				public const string UserSettingssOfModifiedBy = "lk_usersettingsbase_modifiedby";
				public const string ActivityPartysOfParty = "system_user_activity_parties";
				public const string UsersOfManager = "user_parent_user";
				public const string UserSettingssOfSystemUserId = "user_settings";
			}
			
			public static class NToOne
			{
				public const string UserAsCreatedByDelegate = "lk_systemuser_createdonbehalfby";
				public const string UserAsModifiedByDelegate = "lk_systemuser_modifiedonbehalfby";
				public const string UserAsCreatedBy = "lk_systemuserbase_createdby";
				public const string UserAsModifiedBy = "lk_systemuserbase_modifiedby";
				public const string OrganizationAsOrganization = "organization_system_users";
				public const string UserAsManager = "user_parent_user";

				public static class Lookups
				{
					public const string UserAsCreatedByDelegate = "createdonbehalfby";
					public const string UserAsModifiedByDelegate = "modifiedonbehalfby";
					public const string UserAsCreatedBy = "createdby";
					public const string UserAsModifiedBy = "modifiedby";
					public const string OrganizationAsOrganization = "organizationid";
					public const string UserAsManager = "parentsystemuserid";
				}
			}

			public static class NToN
			{

			}
		}

		#endregion

		#endregion
	}

	#region UserViewModel contract

	[DataContract, CrmEntityMapping("systemuser", "SystemUser", "User")]
	public partial class UserViewModel : EntityContract
	{
		[DataMember, CrmFieldMapping("systemuserid")] public Guid? Id;
		[DataMember, ReadOnlyField, CrmFieldMapping("fullname")] public string FullName;

		#region Relationships


		#endregion
	}

	#endregion

	#endregion

	#region SystemUserRoles

	/// <summary>
	/// 'SystemUserRoles'.<br />
	/// 
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract, EntityLogicalName("systemuserroles")]
	public partial class SystemUserRoles : GeneratedEntity<SystemUserRoles.RelationName>
	{
		
		public SystemUserRoles() : 
				base(EntityLogicalName)
		{
		}
		
		public const string DisplayName = null;
		public const string SchemaName = "SystemUserRoles";
		public const string EntityLogicalName = "systemuserroles";
		public const int EntityTypeCode = 15;
		
		public class RelationName : RelationNameBase
		{
			public RelationName(string name) : base(name)
			{}
		}


		#region Attributes

		[AttributeLogicalName("systemuserroleid"), DataMember]
		public override System.Guid Id
		{
			get
			{
				return (SystemUserRoleIdId == null || SystemUserRoleIdId == Guid.Empty) ? base.Id : SystemUserRoleIdId.GetValueOrDefault();
			}
			
			set
			{
                if (value == Guid.Empty) {
                    Attributes.Remove("systemuserroleid");
                    base.Id = value;
                } else {
				    SystemUserRoleIdId = value;
                }
			}
		}

		[AttributeLogicalName("roleid")]
		public Guid? RoleId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("roleid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("roleid"))
				    value = (Guid?) backupAttributeCollection["roleid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("RoleId");
					SetAttributeValue("roleid", value);
				OnPropertyChanged("RoleId");
			}
		}

		[AttributeLogicalName("systemuserid")]
		public Guid? SystemUserId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("systemuserid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("systemuserid"))
				    value = (Guid?) backupAttributeCollection["systemuserid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("SystemUserId");
					SetAttributeValue("systemuserid", value);
				OnPropertyChanged("SystemUserId");
			}
		}

        /// <summary>
        ///  
		/// 'SystemUserRoleId'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("systemuserroleid")]
		public Guid? SystemUserRoleIdId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("systemuserroleid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("systemuserroleid"))
				    value = (Guid?) backupAttributeCollection["systemuserroleid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("SystemUserRoleIdId");
                if (value != null)
					SetAttributeValue("systemuserroleid", value);
				if (value != null)
					base.Id = value.Value;
				else
					Id = System.Guid.Empty;
				OnPropertyChanged("SystemUserRoleIdId");
			}
		}

		[AttributeLogicalName("versionnumber")]
		public long? VersionNumber
		{
			get
			{
				var value = GetAttributeValue<long?>("versionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("versionnumber"))
				    value = (long?) backupAttributeCollection["versionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("VersionNumber");
					SetAttributeValue("versionnumber", value);
				OnPropertyChanged("VersionNumber");
			}
		}

		#endregion

		#region Relationships

		
		/// <summary>
		/// N:N, 'systemuserroles_association'
		/// </summary>
		[RelationshipSchemaName("systemuserroles_association")]
		public User[] UsersOfsystemuserroles_association

		{
			get
			{
				var enumerable = GetRelatedEntities<User>("systemuserroles_association", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("UsersOfsystemuserroles_association");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<User>("systemuserroles_association", null, value);
				OnPropertyChanged("UsersOfsystemuserroles_association");
			}
		}
		
		public static class RelationNames {
			public static RelationName UsersOfsystemuserroles_association = new RelationName("UsersOfsystemuserroles_association");
		}


		protected override IDictionary<string, object[]> RelationProperties { get {
			if (relationProperties != null) return relationProperties;
			relationProperties = new Dictionary<string, object[]>();
			relationProperties["UsersOfsystemuserroles_association"] = new object[] { "UsersOfsystemuserroles_association", "systemuser", "systemuserroles", "systemuserid", "systemuserid", "systemuserroleid", "roleid", "systemuserroles_association", typeof (User[]) };
			return relationProperties; } }


		#endregion

		/// <summary>
		/// Constructor for populating via LINQ queries given a LINQ anonymous type
		/// <param name="anonymousType">LINQ anonymous type.</param>
		/// </summary>
		public SystemUserRoles(object anonymousType) : 
				this()
		{
            foreach (var p in anonymousType.GetType().GetProperties())
            {
                var value = p.GetValue(anonymousType, null);
                if (p.PropertyType == typeof(System.Guid))
                {
                    // Type is Guid, must be Id
                    base.Id = (System.Guid)value;
                    Attributes["systemuserroleid"] = base.Id;
               }
                else if (p.Name == "FormattedValues")
                {
                    // Add Support for FormattedValues
                    FormattedValues.AddRange((FormattedValueCollection)value);
                }
                else
                {
                    Attributes[p.Name.ToLower()] = value;
                }
            }
		}


		#region Label/value pairs

		#endregion


		#region Metadata


		#region Enums

		public static class Enums
		{
			/// <summary>
			/// Gets the label corresponding to the option-set's value using its logical name,
			/// the value within, and the language code.
			/// </summary>
			/// <param name="logicalName">The logical name of the option-set in CRM</param>
			/// <param name="constant">The value from the option-set</param>
			/// <param name="languageCode">The language code from CRM</param>
			/// <returns></returns>
			public static string GetLabel(string logicalName, int constant, int languageCode = 1033)
			{
				return GeneratorHelpers.GetLabel(logicalName, constant, typeof(Enums), languageCode);
			}
			/// <summary>
			/// Gets the value corresponding to the option-set's label using its logical name,
			/// the value within, and the language code.
			/// </summary>
			/// <param name="logicalName">The logical name of the option-set in CRM</param>
			/// <param name="label">The label from the option-set</param>
			/// <param name="languageCode">The language code from CRM</param>
			/// <returns>The value corresponding to the label</returns>
			public static int GetValue(string logicalName, string label, int languageCode = 1033)
			{
				return GeneratorHelpers.GetValue(logicalName, label, typeof(Enums), languageCode);
			}

			#region Logical names

			public static class Names
			{
			}

			#endregion

			#region Labels

			public static class Labels
			{
			}

			#endregion
		}

		#endregion

		#region Fields

		public static class Fields
		{
			#region Logical names

			public const string RoleId = "roleid";
			public const string SystemUserId = "systemuserid";
			public const string SystemUserRoleIdId = "systemuserroleid";
			public const string VersionNumber = "versionnumber";

			#endregion

			#region Schema names

			public static class Schema
			{
				public const string RoleId = "RoleId";
				public const string SystemUserId = "SystemUserId";
				public const string SystemUserRoleIdId = "SystemUserRoleId";
				public const string VersionNumber = "VersionNumber";
			}

			#endregion

			#region Labels

			public static class Labels
			{
				public static class RoleId
				{
				}

				public static class SystemUserId
				{
				}

				public static class SystemUserRoleIdId
				{
				}

				public static class VersionNumber
				{
				}

			}

			#endregion
		}

		#endregion

		#region Relations

		public static class Relations
		{
			public static class OneToN
			{
			}
			
			public static class NToOne
			{

				public static class Lookups
				{
				}
			}

			public static class NToN
			{

				public const string UsersOfsystemuserroles_association = "systemuserroles_association";
			}
		}

		#endregion

		#endregion
	}

	#endregion

	#region Theme

	/// <summary>
	/// 'Theme'.<br />
	/// Information that's used to set custom visual theme options for client applications.
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract, EntityLogicalName("theme")]
	public partial class Theme : GeneratedEntity<Theme.RelationName>
	{
		
		public Theme() : 
				base(EntityLogicalName)
		{
		}
		
		public const string DisplayName = "Theme";
		public const string SchemaName = "Theme";
		public const string EntityLogicalName = "theme";
		public const int EntityTypeCode = 2015;
		
		public class RelationName : RelationNameBase
		{
			public RelationName(string name) : base(name)
			{}
		}


		#region Attributes

		[AttributeLogicalName("themeid"), DataMember]
		public override System.Guid Id
		{
			get
			{
				return (ThemeId == null || ThemeId == Guid.Empty) ? base.Id : ThemeId.GetValueOrDefault();
			}
			
			set
			{
                if (value == Guid.Empty) {
                    Attributes.Remove("themeid");
                    base.Id = value;
                } else {
				    ThemeId = value;
                }
			}
		}

        /// <summary>
        /// [MaximumLength=7] 
		/// 'BackgroundColor'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("backgroundcolor"), MaxLength(7)]
		public string BackgroundColor
		{
			get
			{
				var value = GetAttributeValue<string>("backgroundcolor");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("backgroundcolor"))
				    value = (string) backupAttributeCollection["backgroundcolor"];
			    return value;
			}
			set
			{
				OnPropertyChanging("BackgroundColor");
					SetAttributeValue("backgroundcolor", value);
				OnPropertyChanged("BackgroundColor");
			}
		}

        /// <summary>
        /// [MaximumLength=7] 
		/// 'ControlBorder'.<br />
        /// Choose the color that controls will use for borders
        /// </summary>
		[AttributeLogicalName("controlborder"), MaxLength(7)]
		public string ControlBorder
		{
			get
			{
				var value = GetAttributeValue<string>("controlborder");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("controlborder"))
				    value = (string) backupAttributeCollection["controlborder"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ControlBorder");
					SetAttributeValue("controlborder", value);
				OnPropertyChanged("ControlBorder");
			}
		}

        /// <summary>
        /// [MaximumLength=7] 
		/// 'ControlShade'.<br />
        /// Choose the color for controls to use to indicate when you hover over items
        /// </summary>
		[AttributeLogicalName("controlshade"), MaxLength(7)]
		public string ControlShade
		{
			get
			{
				var value = GetAttributeValue<string>("controlshade");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("controlshade"))
				    value = (string) backupAttributeCollection["controlshade"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ControlShade");
					SetAttributeValue("controlshade", value);
				OnPropertyChanged("ControlShade");
			}
		}

        /// <summary>
        ///  
		/// 'CreatedBy'.<br />
        /// Unique identifier of the user who created the record.
        /// </summary>
		[AttributeLogicalName("createdby")]
		public Guid? CreatedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdby"))
				    value = (EntityReference) backupAttributeCollection["createdby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CreatedBy");
                if (value != null)
				    SetAttributeValue("createdby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("createdby", value);
				OnPropertyChanged("CreatedBy");
			}
		}

        public string CreatedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdby"))
				    value = (EntityReference) backupAttributeCollection["createdby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'CreatedOn'.<br />
        /// Date and time when the record was created.
        /// </summary>
		[AttributeLogicalName("createdon")]
		public DateTime? CreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("createdon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdon"))
				    value = (DateTime?) backupAttributeCollection["createdon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CreatedOn");
					SetAttributeValue("createdon", value);
				OnPropertyChanged("CreatedOn");
			}
		}

        /// <summary>
        ///  
		/// 'CreatedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who created the record.
        /// </summary>
		[AttributeLogicalName("createdonbehalfby")]
		public Guid? CreatedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["createdonbehalfby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CreatedByDelegate");
                if (value != null)
				    SetAttributeValue("createdonbehalfby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("createdonbehalfby", value);
				OnPropertyChanged("CreatedByDelegate");
			}
		}

        public string CreatedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["createdonbehalfby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        /// [MaximumLength=7] 
		/// 'DefaultCustomEntityColor'.<br />
        /// Choose the default custom entity color if no color is assigned
        /// </summary>
		[AttributeLogicalName("defaultcustomentitycolor"), MaxLength(7)]
		public string DefaultCustomEntityColor
		{
			get
			{
				var value = GetAttributeValue<string>("defaultcustomentitycolor");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("defaultcustomentitycolor"))
				    value = (string) backupAttributeCollection["defaultcustomentitycolor"];
			    return value;
			}
			set
			{
				OnPropertyChanging("DefaultCustomEntityColor");
					SetAttributeValue("defaultcustomentitycolor", value);
				OnPropertyChanged("DefaultCustomEntityColor");
			}
		}

        /// <summary>
        /// [MaximumLength=7] 
		/// 'DefaultEntityColor'.<br />
        /// Choose the default color for system entities if no color is assigned
        /// </summary>
		[AttributeLogicalName("defaultentitycolor"), MaxLength(7)]
		public string DefaultEntityColor
		{
			get
			{
				var value = GetAttributeValue<string>("defaultentitycolor");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("defaultentitycolor"))
				    value = (string) backupAttributeCollection["defaultentitycolor"];
			    return value;
			}
			set
			{
				OnPropertyChanging("DefaultEntityColor");
					SetAttributeValue("defaultentitycolor", value);
				OnPropertyChanged("DefaultEntityColor");
			}
		}

        /// <summary>
        /// [Range(0.0000000001, 100000000000)] 
		/// 'ExchangeRate'.<br />
        /// Exchange rate for the currency associated with the Theme with respect to the base currency.
        /// </summary>
		[AttributeLogicalName("exchangerate"), InRange("0.0000000001", "100000000000", typeof(decimal))]
		public decimal? ExchangeRate
		{
			get
			{
				var value = GetAttributeValue<decimal?>("exchangerate");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("exchangerate"))
				    value = (decimal?) backupAttributeCollection["exchangerate"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ExchangeRate");
					SetAttributeValue("exchangerate", value);
				OnPropertyChanged("ExchangeRate");
			}
		}

        /// <summary>
        /// [MaximumLength=7] 
		/// 'GlobalLinkColor'.<br />
        /// Choose the color for links, such as email addresses or lookups
        /// </summary>
		[AttributeLogicalName("globallinkcolor"), MaxLength(7)]
		public string GlobalLinkColor
		{
			get
			{
				var value = GetAttributeValue<string>("globallinkcolor");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("globallinkcolor"))
				    value = (string) backupAttributeCollection["globallinkcolor"];
			    return value;
			}
			set
			{
				OnPropertyChanging("GlobalLinkColor");
					SetAttributeValue("globallinkcolor", value);
				OnPropertyChanged("GlobalLinkColor");
			}
		}

        /// <summary>
        /// [MaximumLength=7] 
		/// 'HeaderColor'.<br />
        /// Choose the color for header text, such as form tab labels
        /// </summary>
		[AttributeLogicalName("headercolor"), MaxLength(7)]
		public string HeaderColor
		{
			get
			{
				var value = GetAttributeValue<string>("headercolor");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("headercolor"))
				    value = (string) backupAttributeCollection["headercolor"];
			    return value;
			}
			set
			{
				OnPropertyChanging("HeaderColor");
					SetAttributeValue("headercolor", value);
				OnPropertyChanged("HeaderColor");
			}
		}

        /// <summary>
        /// [MaximumLength=7] 
		/// 'HoverLinkEffect'.<br />
        /// Choose the color that commands or lists will use when you hover over the items
        /// </summary>
		[AttributeLogicalName("hoverlinkeffect"), MaxLength(7)]
		public string HoverLinkEffect
		{
			get
			{
				var value = GetAttributeValue<string>("hoverlinkeffect");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("hoverlinkeffect"))
				    value = (string) backupAttributeCollection["hoverlinkeffect"];
			    return value;
			}
			set
			{
				OnPropertyChanging("HoverLinkEffect");
					SetAttributeValue("hoverlinkeffect", value);
				OnPropertyChanged("HoverLinkEffect");
			}
		}

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'ImportSequenceNumber'.<br />
        /// Sequence number of the import that created this record.
        /// </summary>
		[AttributeLogicalName("importsequencenumber"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? ImportSequenceNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("importsequencenumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("importsequencenumber"))
				    value = (int?) backupAttributeCollection["importsequencenumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ImportSequenceNumber");
					SetAttributeValue("importsequencenumber", value);
				OnPropertyChanged("ImportSequenceNumber");
			}
		}

        /// <summary>
        ///  
		/// 'IsDefaultTheme'.<br />
        /// Default status of theme.
        /// </summary>
		[AttributeLogicalName("isdefaulttheme")]
		public bool? DefaultTheme
		{
			get
			{
				var value = GetAttributeValue<bool?>("isdefaulttheme");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("isdefaulttheme"))
				    value = (bool?) backupAttributeCollection["isdefaulttheme"];
			    return value;
			}
			set
			{
				OnPropertyChanging("DefaultTheme");
					SetAttributeValue("isdefaulttheme", value);
				OnPropertyChanged("DefaultTheme");
			}
		}

        /// <summary>
        ///  
		/// 'LogoId'.<br />
        /// Upload a web resource to use as a logo. Recommended dimensions are a height of 50 pixels and a maximum width of 400 pixels.
        /// </summary>
		[AttributeLogicalName("logoid")]
		public Guid? Logo
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("logoid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("logoid"))
				    value = (EntityReference) backupAttributeCollection["logoid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("Logo");
                if (value != null)
				    SetAttributeValue("logoid", new EntityReference("webresource", value.Value));
                else
					SetAttributeValue("logoid", value);
				OnPropertyChanged("Logo");
			}
		}

        public string LogoName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("logoid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("logoid"))
				    value = (EntityReference) backupAttributeCollection["logoid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        /// [MaximumLength=80] 
		/// 'LogoToolTip'.<br />
        /// Enter text that will be used as the tooltip and alt text for the logo.
        /// </summary>
		[AttributeLogicalName("logotooltip"), MaxLength(80)]
		public string LogoTooltip
		{
			get
			{
				var value = GetAttributeValue<string>("logotooltip");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("logotooltip"))
				    value = (string) backupAttributeCollection["logotooltip"];
			    return value;
			}
			set
			{
				OnPropertyChanging("LogoTooltip");
					SetAttributeValue("logotooltip", value);
				OnPropertyChanged("LogoTooltip");
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedBy'.<br />
        /// Unique identifier of the user who modified the record.
        /// </summary>
		[AttributeLogicalName("modifiedby")]
		public Guid? ModifiedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedby"))
				    value = (EntityReference) backupAttributeCollection["modifiedby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ModifiedBy");
                if (value != null)
				    SetAttributeValue("modifiedby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("modifiedby", value);
				OnPropertyChanged("ModifiedBy");
			}
		}

        public string ModifiedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedby"))
				    value = (EntityReference) backupAttributeCollection["modifiedby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'ModifiedOn'.<br />
        /// Date and time when the record was modified.
        /// </summary>
		[AttributeLogicalName("modifiedon")]
		public DateTime? ModifiedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("modifiedon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedon"))
				    value = (DateTime?) backupAttributeCollection["modifiedon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ModifiedOn");
					SetAttributeValue("modifiedon", value);
				OnPropertyChanged("ModifiedOn");
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who modified the record.
        /// </summary>
		[AttributeLogicalName("modifiedonbehalfby")]
		public Guid? ModifiedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["modifiedonbehalfby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ModifiedByDelegate");
                if (value != null)
				    SetAttributeValue("modifiedonbehalfby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("modifiedonbehalfby", value);
				OnPropertyChanged("ModifiedByDelegate");
			}
		}

        public string ModifiedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["modifiedonbehalfby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        /// [MaximumLength=100] 
		/// 'Name'.<br />
        /// The name of the Theme Entity.
        /// </summary>
		[AttributeLogicalName("name"), MaxLength(100)]
		public string ThemeName
		{
			get
			{
				var value = GetAttributeValue<string>("name");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("name"))
				    value = (string) backupAttributeCollection["name"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ThemeName");
					SetAttributeValue("name", value);
				OnPropertyChanged("ThemeName");
			}
		}

        /// <summary>
        /// [MaximumLength=7] 
		/// 'NavBarBackgroundColor'.<br />
        /// Choose the primary Navigation Bar color
        /// </summary>
		[AttributeLogicalName("navbarbackgroundcolor"), MaxLength(7)]
		public string NavigationBarColor
		{
			get
			{
				var value = GetAttributeValue<string>("navbarbackgroundcolor");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("navbarbackgroundcolor"))
				    value = (string) backupAttributeCollection["navbarbackgroundcolor"];
			    return value;
			}
			set
			{
				OnPropertyChanging("NavigationBarColor");
					SetAttributeValue("navbarbackgroundcolor", value);
				OnPropertyChanged("NavigationBarColor");
			}
		}

        /// <summary>
        /// [MaximumLength=7] 
		/// 'NavBarShelfColor'.<br />
        /// Choose the secondary Navigation Bar color
        /// </summary>
		[AttributeLogicalName("navbarshelfcolor"), MaxLength(7)]
		public string NavigationBarShelfColor
		{
			get
			{
				var value = GetAttributeValue<string>("navbarshelfcolor");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("navbarshelfcolor"))
				    value = (string) backupAttributeCollection["navbarshelfcolor"];
			    return value;
			}
			set
			{
				OnPropertyChanging("NavigationBarShelfColor");
					SetAttributeValue("navbarshelfcolor", value);
				OnPropertyChanged("NavigationBarShelfColor");
			}
		}

        /// <summary>
        ///  
		/// 'OrganizationId'.<br />
        /// Unique identifier for the organization
        /// </summary>
		[AttributeLogicalName("organizationid")]
		public Guid? OrganizationId
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("organizationid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("organizationid"))
				    value = (EntityReference) backupAttributeCollection["organizationid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OrganizationId");
                if (value != null)
				    SetAttributeValue("organizationid", new EntityReference("organization", value.Value));
                else
					SetAttributeValue("organizationid", value);
				OnPropertyChanged("OrganizationId");
			}
		}

        public string OrganizationIdName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("organizationid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("organizationid"))
				    value = (EntityReference) backupAttributeCollection["organizationid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OverriddenCreatedOn'.<br />
        /// Date and time that the record was migrated.
        /// </summary>
		[AttributeLogicalName("overriddencreatedon")]
		public DateTime? RecordCreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("overriddencreatedon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("overriddencreatedon"))
				    value = (DateTime?) backupAttributeCollection["overriddencreatedon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("RecordCreatedOn");
					SetAttributeValue("overriddencreatedon", value);
				OnPropertyChanged("RecordCreatedOn");
			}
		}

        /// <summary>
        /// [MaximumLength=7] 
		/// 'ProcessControlColor'.<br />
        /// Choose the primary color for process controls
        /// </summary>
		[AttributeLogicalName("processcontrolcolor"), MaxLength(7)]
		public string AccentColorforMobileClient
		{
			get
			{
				var value = GetAttributeValue<string>("processcontrolcolor");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("processcontrolcolor"))
				    value = (string) backupAttributeCollection["processcontrolcolor"];
			    return value;
			}
			set
			{
				OnPropertyChanging("AccentColorforMobileClient");
					SetAttributeValue("processcontrolcolor", value);
				OnPropertyChanged("AccentColorforMobileClient");
			}
		}

        /// <summary>
        /// [MaximumLength=7] 
		/// 'SelectedLinkEffect'.<br />
        /// Choose the color that commands or lists will use to indicate selected items
        /// </summary>
		[AttributeLogicalName("selectedlinkeffect"), MaxLength(7)]
		public string SelectedLinkEffect
		{
			get
			{
				var value = GetAttributeValue<string>("selectedlinkeffect");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("selectedlinkeffect"))
				    value = (string) backupAttributeCollection["selectedlinkeffect"];
			    return value;
			}
			set
			{
				OnPropertyChanging("SelectedLinkEffect");
					SetAttributeValue("selectedlinkeffect", value);
				OnPropertyChanged("SelectedLinkEffect");
			}
		}

        /// <summary>
        ///  
		/// 'statecode'.<br />
        /// Status of the Theme
        /// </summary>
		[AttributeLogicalName("statecode")]
		public StatusEnum? Status
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("statecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("statecode"))
				    value = (OptionSetValue) backupAttributeCollection["statecode"];
                return value == null ? (StatusEnum?) null : (StatusEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("Status");
                if (value != null)
				    SetAttributeValue("statecode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("statecode", value);
				OnPropertyChanged("Status");
			}
		}

        /// <summary>
        ///  
		/// 'statuscode'.<br />
        /// Reason for the status of the Theme
        /// </summary>
		[AttributeLogicalName("statuscode")]
		public StatusReasonEnum? StatusReason
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("statuscode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("statuscode"))
				    value = (OptionSetValue) backupAttributeCollection["statuscode"];
                return value == null ? (StatusReasonEnum?) null : (StatusReasonEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("StatusReason");
                if (value != null)
				    SetAttributeValue("statuscode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("statuscode", value);
				OnPropertyChanged("StatusReason");
			}
		}

        /// <summary>
        ///  
		/// 'ThemeId'.<br />
        /// Unique identifier for entity instances
        /// </summary>
		[AttributeLogicalName("themeid")]
		public Guid? ThemeId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("themeid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("themeid"))
				    value = (Guid?) backupAttributeCollection["themeid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ThemeId");
                if (value != null)
					SetAttributeValue("themeid", value);
				if (value != null)
					base.Id = value.Value;
				else
					Id = System.Guid.Empty;
				OnPropertyChanged("ThemeId");
			}
		}

        /// <summary>
        /// [Range(-1, 2147483647)] 
		/// 'TimeZoneRuleVersionNumber'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("timezoneruleversionnumber"), InRange("-1", "2147483647", typeof(int))]
		public int? TimeZoneRuleVersionNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("timezoneruleversionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("timezoneruleversionnumber"))
				    value = (int?) backupAttributeCollection["timezoneruleversionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TimeZoneRuleVersionNumber");
					SetAttributeValue("timezoneruleversionnumber", value);
				OnPropertyChanged("TimeZoneRuleVersionNumber");
			}
		}

        /// <summary>
        ///  
		/// 'TransactionCurrencyId'.<br />
        /// Exchange rate for the currency associated with the Theme with respect to the base currency.
        /// </summary>
		[AttributeLogicalName("transactioncurrencyid")]
		public Guid? Currency
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("transactioncurrencyid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("transactioncurrencyid"))
				    value = (EntityReference) backupAttributeCollection["transactioncurrencyid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("Currency");
                if (value != null)
				    SetAttributeValue("transactioncurrencyid", new EntityReference("transactioncurrency", value.Value));
                else
					SetAttributeValue("transactioncurrencyid", value);
				OnPropertyChanged("Currency");
			}
		}

        public string CurrencyName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("transactioncurrencyid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("transactioncurrencyid"))
				    value = (EntityReference) backupAttributeCollection["transactioncurrencyid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'Type'.<br />
        /// Define type of theme.
        /// </summary>
		[AttributeLogicalName("type")]
		public bool? Type
		{
			get
			{
				var value = GetAttributeValue<bool?>("type");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("type"))
				    value = (bool?) backupAttributeCollection["type"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Type");
					SetAttributeValue("type", value);
				OnPropertyChanged("Type");
			}
		}

        /// <summary>
        /// [Range(-1, 2147483647)] 
		/// 'UTCConversionTimeZoneCode'.<br />
        /// Time zone code that was in use when the record was created.
        /// </summary>
		[AttributeLogicalName("utcconversiontimezonecode"), InRange("-1", "2147483647", typeof(int))]
		public int? UTCConversionTimeZoneCode
		{
			get
			{
				var value = GetAttributeValue<int?>("utcconversiontimezonecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("utcconversiontimezonecode"))
				    value = (int?) backupAttributeCollection["utcconversiontimezonecode"];
			    return value;
			}
			set
			{
				OnPropertyChanging("UTCConversionTimeZoneCode");
					SetAttributeValue("utcconversiontimezonecode", value);
				OnPropertyChanged("UTCConversionTimeZoneCode");
			}
		}

		[AttributeLogicalName("versionnumber")]
		public long? VersionNumber
		{
			get
			{
				var value = GetAttributeValue<long?>("versionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("versionnumber"))
				    value = (long?) backupAttributeCollection["versionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("VersionNumber");
					SetAttributeValue("versionnumber", value);
				OnPropertyChanged("VersionNumber");
			}
		}

		#endregion

		#region Relationships

		
		/// <summary>
		/// N:1, 'lk_theme_createdby'
		/// </summary>
		[RelationshipSchemaName("lk_theme_createdby"), AttributeLogicalName("createdby")]
		public User UserAsCreatedBy
		{
			get
			{
				return GetRelatedEntity<User>("lk_theme_createdby", null);
			}
			set
			{
				OnPropertyChanging("UserAsCreatedBy");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_theme_createdby", null, value);
				OnPropertyChanged("UserAsCreatedBy");
			}
		}
		
		/// <summary>
		/// N:1, 'lk_theme_createdonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_theme_createdonbehalfby"), AttributeLogicalName("createdonbehalfby")]
		public User UserAsCreatedByDelegate
		{
			get
			{
				return GetRelatedEntity<User>("lk_theme_createdonbehalfby", null);
			}
			set
			{
				OnPropertyChanging("UserAsCreatedByDelegate");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_theme_createdonbehalfby", null, value);
				OnPropertyChanged("UserAsCreatedByDelegate");
			}
		}
		
		/// <summary>
		/// N:1, 'lk_theme_modifiedby'
		/// </summary>
		[RelationshipSchemaName("lk_theme_modifiedby"), AttributeLogicalName("modifiedby")]
		public User UserAsModifiedBy
		{
			get
			{
				return GetRelatedEntity<User>("lk_theme_modifiedby", null);
			}
			set
			{
				OnPropertyChanging("UserAsModifiedBy");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_theme_modifiedby", null, value);
				OnPropertyChanged("UserAsModifiedBy");
			}
		}
		
		/// <summary>
		/// N:1, 'lk_theme_modifiedonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_theme_modifiedonbehalfby"), AttributeLogicalName("modifiedonbehalfby")]
		public User UserAsModifiedByDelegate
		{
			get
			{
				return GetRelatedEntity<User>("lk_theme_modifiedonbehalfby", null);
			}
			set
			{
				OnPropertyChanging("UserAsModifiedByDelegate");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_theme_modifiedonbehalfby", null, value);
				OnPropertyChanged("UserAsModifiedByDelegate");
			}
		}
		
		/// <summary>
		/// N:1, 'organization_theme'
		/// </summary>
		[RelationshipSchemaName("organization_theme"), AttributeLogicalName("organizationid")]
		public Organization OrganizationAsOrganizationId
		{
			get
			{
				return GetRelatedEntity<Organization>("organization_theme", null);
			}
			set
			{
				OnPropertyChanging("OrganizationAsOrganizationId");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<Organization>("organization_theme", null, value);
				OnPropertyChanged("OrganizationAsOrganizationId");
			}
		}
		
		public static class RelationNames {
			public static RelationName UserAsCreatedBy = new RelationName("UserAsCreatedBy");
			public static RelationName UserAsCreatedByDelegate = new RelationName("UserAsCreatedByDelegate");
			public static RelationName UserAsModifiedBy = new RelationName("UserAsModifiedBy");
			public static RelationName UserAsModifiedByDelegate = new RelationName("UserAsModifiedByDelegate");
			public static RelationName OrganizationAsOrganizationId = new RelationName("OrganizationAsOrganizationId");
		}


		protected override IDictionary<string, object[]> RelationProperties { get {
			if (relationProperties != null) return relationProperties;
			relationProperties = new Dictionary<string, object[]>();
			relationProperties["UserAsCreatedBy"] = new object[] { "UserAsCreatedBy", "systemuser", "theme", "systemuserid", "createdby", "themeid", "themeid", "lk_theme_createdby", typeof (User) };
			relationProperties["UserAsCreatedByDelegate"] = new object[] { "UserAsCreatedByDelegate", "systemuser", "theme", "systemuserid", "createdonbehalfby", "themeid", "themeid", "lk_theme_createdonbehalfby", typeof (User) };
			relationProperties["UserAsModifiedBy"] = new object[] { "UserAsModifiedBy", "systemuser", "theme", "systemuserid", "modifiedby", "themeid", "themeid", "lk_theme_modifiedby", typeof (User) };
			relationProperties["UserAsModifiedByDelegate"] = new object[] { "UserAsModifiedByDelegate", "systemuser", "theme", "systemuserid", "modifiedonbehalfby", "themeid", "themeid", "lk_theme_modifiedonbehalfby", typeof (User) };
			relationProperties["OrganizationAsOrganizationId"] = new object[] { "OrganizationAsOrganizationId", "organization", "theme", "organizationid", "organizationid", "themeid", "themeid", "organization_theme", typeof (Organization) };
			return relationProperties; } }


		#endregion

		/// <summary>
		/// Constructor for populating via LINQ queries given a LINQ anonymous type
		/// <param name="anonymousType">LINQ anonymous type.</param>
		/// </summary>
		public Theme(object anonymousType) : 
				this()
		{
            foreach (var p in anonymousType.GetType().GetProperties())
            {
                var value = p.GetValue(anonymousType, null);
                if (p.PropertyType == typeof(System.Guid))
                {
                    // Type is Guid, must be Id
                    base.Id = (System.Guid)value;
                    Attributes["themeid"] = base.Id;
               }
                else if (p.Name == "FormattedValues")
                {
                    // Add Support for FormattedValues
                    FormattedValues.AddRange((FormattedValueCollection)value);
                }
                else
                {
                    Attributes[p.Name.ToLower()] = value;
                }
            }
		}


		#region Label/value pairs

		#region DefaultTheme

		public enum DefaultThemeEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region Status

		public enum StatusEnum
		{
			[EnumMember]Custom = 0,
			[EnumMember]System = 1,
		}

		#endregion
	
		#region StatusReason

		public enum StatusReasonEnum
		{
			[EnumMember]Custom = 1,
			[EnumMember]System = 2,
		}

		#endregion
	
		#region Type

		public enum TypeEnum
		{
			[EnumMember]Custom = 1,
			[EnumMember]System = 0,
		}

		#endregion
	
		#endregion


		#region Metadata


		#region Enums

		public static class Enums
		{
			/// <summary>
			/// Gets the label corresponding to the option-set's value using its logical name,
			/// the value within, and the language code.
			/// </summary>
			/// <param name="logicalName">The logical name of the option-set in CRM</param>
			/// <param name="constant">The value from the option-set</param>
			/// <param name="languageCode">The language code from CRM</param>
			/// <returns></returns>
			public static string GetLabel(string logicalName, int constant, int languageCode = 1033)
			{
				return GeneratorHelpers.GetLabel(logicalName, constant, typeof(Enums), languageCode);
			}
			/// <summary>
			/// Gets the value corresponding to the option-set's label using its logical name,
			/// the value within, and the language code.
			/// </summary>
			/// <param name="logicalName">The logical name of the option-set in CRM</param>
			/// <param name="label">The label from the option-set</param>
			/// <param name="languageCode">The language code from CRM</param>
			/// <returns>The value corresponding to the label</returns>
			public static int GetValue(string logicalName, string label, int languageCode = 1033)
			{
				return GeneratorHelpers.GetValue(logicalName, label, typeof(Enums), languageCode);
			}

			#region Logical names

			public static class Names
			{
				public const string DefaultTheme = "isdefaulttheme";
				public const string Status = "statecode";
				public const string StatusReason = "statuscode";
				public const string Type = "type";
			}

			#endregion

			#region Labels

			public static class Labels
			{
				public static class DefaultTheme 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(DefaultTheme), label, languageCode);
					}
				}

				public static class Status 
				{
					public const string Custom_1033 = "Custom";
					public const string System_1033 = "System";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(Status), label, languageCode);
					}
				}

				public static class StatusReason 
				{
					public const string Custom_1033 = "Custom";
					public const string System_1033 = "System";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(StatusReason), label, languageCode);
					}
				}

				public static class Type 
				{
					public const string Custom_1033 = "Custom";
					public const string System_1033 = "System";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(Type), label, languageCode);
					}
				}

			}

			#endregion
		}

		#endregion

		#region Fields

		public static class Fields
		{
			#region Logical names

			public const string BackgroundColor = "backgroundcolor";
			public const string ControlBorder = "controlborder";
			public const string ControlShade = "controlshade";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedByDelegate = "createdonbehalfby";
			public const string DefaultCustomEntityColor = "defaultcustomentitycolor";
			public const string DefaultEntityColor = "defaultentitycolor";
			public const string ExchangeRate = "exchangerate";
			public const string GlobalLinkColor = "globallinkcolor";
			public const string HeaderColor = "headercolor";
			public const string HoverLinkEffect = "hoverlinkeffect";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string DefaultTheme = "isdefaulttheme";
			public const string Logo = "logoid";
			public const string LogoTooltip = "logotooltip";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedByDelegate = "modifiedonbehalfby";
			public const string ThemeName = "name";
			public const string NavigationBarColor = "navbarbackgroundcolor";
			public const string NavigationBarShelfColor = "navbarshelfcolor";
			public const string OrganizationId = "organizationid";
			public const string RecordCreatedOn = "overriddencreatedon";
			public const string AccentColorforMobileClient = "processcontrolcolor";
			public const string SelectedLinkEffect = "selectedlinkeffect";
			public const string Status = "statecode";
			public const string StatusReason = "statuscode";
			public const string ThemeId = "themeid";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string Currency = "transactioncurrencyid";
			public const string Type = "type";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";

			#endregion

			#region Schema names

			public static class Schema
			{
				public const string BackgroundColor = "BackgroundColor";
				public const string ControlBorder = "ControlBorder";
				public const string ControlShade = "ControlShade";
				public const string CreatedBy = "CreatedBy";
				public const string CreatedOn = "CreatedOn";
				public const string CreatedByDelegate = "CreatedOnBehalfBy";
				public const string DefaultCustomEntityColor = "DefaultCustomEntityColor";
				public const string DefaultEntityColor = "DefaultEntityColor";
				public const string ExchangeRate = "ExchangeRate";
				public const string GlobalLinkColor = "GlobalLinkColor";
				public const string HeaderColor = "HeaderColor";
				public const string HoverLinkEffect = "HoverLinkEffect";
				public const string ImportSequenceNumber = "ImportSequenceNumber";
				public const string DefaultTheme = "IsDefaultTheme";
				public const string Logo = "LogoId";
				public const string LogoTooltip = "LogoToolTip";
				public const string ModifiedBy = "ModifiedBy";
				public const string ModifiedOn = "ModifiedOn";
				public const string ModifiedByDelegate = "ModifiedOnBehalfBy";
				public const string ThemeName = "Name";
				public const string NavigationBarColor = "NavBarBackgroundColor";
				public const string NavigationBarShelfColor = "NavBarShelfColor";
				public const string OrganizationId = "OrganizationId";
				public const string RecordCreatedOn = "OverriddenCreatedOn";
				public const string AccentColorforMobileClient = "ProcessControlColor";
				public const string SelectedLinkEffect = "SelectedLinkEffect";
				public const string Status = "statecode";
				public const string StatusReason = "statuscode";
				public const string ThemeId = "ThemeId";
				public const string TimeZoneRuleVersionNumber = "TimeZoneRuleVersionNumber";
				public const string Currency = "TransactionCurrencyId";
				public const string Type = "Type";
				public const string UTCConversionTimeZoneCode = "UTCConversionTimeZoneCode";
				public const string VersionNumber = "VersionNumber";
			}

			#endregion

			#region Labels

			public static class Labels
			{
				public static class BackgroundColor
				{
					public const string _1033 = "Background Color";
				}

				public static class ControlBorder
				{
					public const string _1033 = "Control Border";
				}

				public static class ControlShade
				{
					public const string _1033 = "Control Shade";
				}

				public static class CreatedBy
				{
					public const string _1033 = "Created By";
				}

				public static class CreatedOn
				{
					public const string _1033 = "Created On";
				}

				public static class CreatedByDelegate
				{
					public const string _1033 = "Created By (Delegate)";
				}

				public static class DefaultCustomEntityColor
				{
					public const string _1033 = "Default Custom Entity Color";
				}

				public static class DefaultEntityColor
				{
					public const string _1033 = "Default Entity Color";
				}

				public static class ExchangeRate
				{
					public const string _1033 = "ExchangeRate";
				}

				public static class GlobalLinkColor
				{
					public const string _1033 = "Global Link Color";
				}

				public static class HeaderColor
				{
					public const string _1033 = "Header Color";
				}

				public static class HoverLinkEffect
				{
					public const string _1033 = "Hover Link Effect";
				}

				public static class ImportSequenceNumber
				{
					public const string _1033 = "Import Sequence Number";
				}

				public static class DefaultTheme
				{
					public const string _1033 = "Default Theme";
				}

				public static class Logo
				{
					public const string _1033 = "Logo";
				}

				public static class LogoTooltip
				{
					public const string _1033 = "Logo Tooltip";
				}

				public static class ModifiedBy
				{
					public const string _1033 = "Modified By";
				}

				public static class ModifiedOn
				{
					public const string _1033 = "Modified On";
				}

				public static class ModifiedByDelegate
				{
					public const string _1033 = "Modified By (Delegate)";
				}

				public static class ThemeName
				{
					public const string _1033 = "Theme Name";
				}

				public static class NavigationBarColor
				{
					public const string _1033 = "Navigation Bar Color";
				}

				public static class NavigationBarShelfColor
				{
					public const string _1033 = "Navigation Bar Shelf Color";
				}

				public static class OrganizationId
				{
					public const string _1033 = "Organization Id";
				}

				public static class RecordCreatedOn
				{
					public const string _1033 = "Record Created On";
				}

				public static class AccentColorforMobileClient
				{
					public const string _1033 = "Accent Color for Mobile Client";
				}

				public static class SelectedLinkEffect
				{
					public const string _1033 = "Selected Link Effect";
				}

				public static class Status
				{
					public const string _1033 = "Status";
				}

				public static class StatusReason
				{
					public const string _1033 = "Status Reason";
				}

				public static class ThemeId
				{
					public const string _1033 = "Theme";
				}

				public static class TimeZoneRuleVersionNumber
				{
					public const string _1033 = "Time Zone Rule Version Number";
				}

				public static class Currency
				{
					public const string _1033 = "Currency";
				}

				public static class Type
				{
					public const string _1033 = "Type";
				}

				public static class UTCConversionTimeZoneCode
				{
					public const string _1033 = "UTC Conversion Time Zone Code";
				}

				public static class VersionNumber
				{
				}

			}

			#endregion
		}

		#endregion

		#region Relations

		public static class Relations
		{
			public static class OneToN
			{
			}
			
			public static class NToOne
			{
				public const string UserAsCreatedBy = "lk_theme_createdby";
				public const string UserAsCreatedByDelegate = "lk_theme_createdonbehalfby";
				public const string UserAsModifiedBy = "lk_theme_modifiedby";
				public const string UserAsModifiedByDelegate = "lk_theme_modifiedonbehalfby";
				public const string OrganizationAsOrganizationId = "organization_theme";

				public static class Lookups
				{
					public const string UserAsCreatedBy = "createdby";
					public const string UserAsCreatedByDelegate = "createdonbehalfby";
					public const string UserAsModifiedBy = "modifiedby";
					public const string UserAsModifiedByDelegate = "modifiedonbehalfby";
					public const string OrganizationAsOrganizationId = "organizationid";
				}
			}

			public static class NToN
			{

			}
		}

		#endregion

		#endregion
	}

	#endregion

	#region UserSettings

	/// <summary>
	/// 'UserSettings'.<br />
	/// User's preferred settings.
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract, EntityLogicalName("usersettings")]
	public partial class UserSettings : GeneratedEntity<UserSettings.RelationName>
	{
		
		public UserSettings() : 
				base(EntityLogicalName)
		{
		}
		
		public const string DisplayName = "User Settings";
		public const string SchemaName = "UserSettings";
		public const string EntityLogicalName = "usersettings";
		public const int EntityTypeCode = 150;
		
		public class RelationName : RelationNameBase
		{
			public RelationName(string name) : base(name)
			{}
		}


		#region Attributes

		[AttributeLogicalName("systemuserid"), DataMember]
		public override System.Guid Id
		{
			get
			{
				return (SystemUserIdId == null || SystemUserIdId == Guid.Empty) ? base.Id : SystemUserIdId.GetValueOrDefault();
			}
			
			set
			{
                if (value == Guid.Empty) {
                    Attributes.Remove("systemuserid");
                    base.Id = value;
                } else {
				    SystemUserIdId = value;
                }
			}
		}

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'AddressBookSyncInterval'.<br />
        /// Normal polling frequency used for address book synchronization in Microsoft Office Outlook.
        /// </summary>
		[AttributeLogicalName("addressbooksyncinterval"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? AddressBookSyncInterval
		{
			get
			{
				var value = GetAttributeValue<int?>("addressbooksyncinterval");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("addressbooksyncinterval"))
				    value = (int?) backupAttributeCollection["addressbooksyncinterval"];
			    return value;
			}
			set
			{
				OnPropertyChanging("AddressBookSyncInterval");
					SetAttributeValue("addressbooksyncinterval", value);
				OnPropertyChanged("AddressBookSyncInterval");
			}
		}

        /// <summary>
        ///  
		/// 'AdvancedFindStartupMode'.<br />
        /// Default mode, such as simple or detailed, for advanced find.
        /// </summary>
		[AttributeLogicalName("advancedfindstartupmode")]
		public int? AdvancedFindStartupMode
		{
			get
			{
				var value = GetAttributeValue<int?>("advancedfindstartupmode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("advancedfindstartupmode"))
				    value = (int?) backupAttributeCollection["advancedfindstartupmode"];
			    return value;
			}
			set
			{
				OnPropertyChanging("AdvancedFindStartupMode");
					SetAttributeValue("advancedfindstartupmode", value);
				OnPropertyChanged("AdvancedFindStartupMode");
			}
		}

        /// <summary>
        ///  
		/// 'AllowEmailCredentials'.<br />
        /// This attribute is no longer used. The data is now in the Mailbox.AllowEmailConnectorToUseCredentials attribute.
        /// </summary>
		[AttributeLogicalName("allowemailcredentials")]
		[Obsolete]
		public bool? AllowEmailCredentials
		{
			get
			{
				var value = GetAttributeValue<bool?>("allowemailcredentials");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("allowemailcredentials"))
				    value = (bool?) backupAttributeCollection["allowemailcredentials"];
			    return value;
			}
			set
			{
				OnPropertyChanging("AllowEmailCredentials");
					SetAttributeValue("allowemailcredentials", value);
				OnPropertyChanged("AllowEmailCredentials");
			}
		}

        /// <summary>
        /// [MaximumLength=25] 
		/// 'AMDesignator'.<br />
        /// AM designator to use in Microsoft Dynamics 365.
        /// </summary>
		[AttributeLogicalName("amdesignator"), MaxLength(25)]
		public string AMDesignator
		{
			get
			{
				var value = GetAttributeValue<string>("amdesignator");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("amdesignator"))
				    value = (string) backupAttributeCollection["amdesignator"];
			    return value;
			}
			set
			{
				OnPropertyChanging("AMDesignator");
					SetAttributeValue("amdesignator", value);
				OnPropertyChanged("AMDesignator");
			}
		}

        /// <summary>
        ///  
		/// 'AutoCreateContactOnPromote'.<br />
        /// Auto-create contact on client promote
        /// </summary>
		[AttributeLogicalName("autocreatecontactonpromote")]
		public int? AutoCreateContactOnPromote
		{
			get
			{
				var value = GetAttributeValue<int?>("autocreatecontactonpromote");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("autocreatecontactonpromote"))
				    value = (int?) backupAttributeCollection["autocreatecontactonpromote"];
			    return value;
			}
			set
			{
				OnPropertyChanging("AutoCreateContactOnPromote");
					SetAttributeValue("autocreatecontactonpromote", value);
				OnPropertyChanged("AutoCreateContactOnPromote");
			}
		}

        /// <summary>
        ///  
		/// 'BusinessUnitId'.<br />
        /// Unique identifier of the business unit with which the user is associated.
        /// </summary>
		[AttributeLogicalName("businessunitid")]
		public Guid? BusinessUnitId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("businessunitid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("businessunitid"))
				    value = (Guid?) backupAttributeCollection["businessunitid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("BusinessUnitId");
					SetAttributeValue("businessunitid", value);
				OnPropertyChanged("BusinessUnitId");
			}
		}

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'CalendarType'.<br />
        /// Calendar type for the system. Set to Gregorian US by default.
        /// </summary>
		[AttributeLogicalName("calendartype"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? CalendarType
		{
			get
			{
				var value = GetAttributeValue<int?>("calendartype");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("calendartype"))
				    value = (int?) backupAttributeCollection["calendartype"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CalendarType");
					SetAttributeValue("calendartype", value);
				OnPropertyChanged("CalendarType");
			}
		}

        /// <summary>
        ///  
		/// 'CreatedBy'.<br />
        /// Unique identifier of the user who created the user settings.
        /// </summary>
		[AttributeLogicalName("createdby")]
		public Guid? CreatedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdby"))
				    value = (EntityReference) backupAttributeCollection["createdby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CreatedBy");
                if (value != null)
				    SetAttributeValue("createdby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("createdby", value);
				OnPropertyChanged("CreatedBy");
			}
		}

        public string CreatedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdby"))
				    value = (EntityReference) backupAttributeCollection["createdby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'CreatedOn'.<br />
        /// Date and time when the user settings object was created.
        /// </summary>
		[AttributeLogicalName("createdon")]
		public DateTime? CreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("createdon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdon"))
				    value = (DateTime?) backupAttributeCollection["createdon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CreatedOn");
					SetAttributeValue("createdon", value);
				OnPropertyChanged("CreatedOn");
			}
		}

        /// <summary>
        ///  
		/// 'CreatedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who created the usersettings.
        /// </summary>
		[AttributeLogicalName("createdonbehalfby")]
		public Guid? CreatedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["createdonbehalfby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CreatedByDelegate");
                if (value != null)
				    SetAttributeValue("createdonbehalfby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("createdonbehalfby", value);
				OnPropertyChanged("CreatedByDelegate");
			}
		}

        public string CreatedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["createdonbehalfby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        /// [Required][Range(-2147483648, 2147483647)] 
		/// 'CurrencyDecimalPrecision'.<br />
        /// Number of decimal places that can be used for currency.
        /// </summary>
		[AttributeLogicalName("currencydecimalprecision"), Required, InRange("-2147483648", "2147483647", typeof(int))]
		[Obsolete]
		public int? CurrencyDecimalPrecision
		{
			get
			{
				var value = GetAttributeValue<int?>("currencydecimalprecision");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("currencydecimalprecision"))
				    value = (int?) backupAttributeCollection["currencydecimalprecision"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CurrencyDecimalPrecision");
					SetAttributeValue("currencydecimalprecision", value);
				OnPropertyChanged("CurrencyDecimalPrecision");
			}
		}

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'CurrencyFormatCode'.<br />
        /// Information about how currency symbols are placed in Microsoft Dynamics 365.
        /// </summary>
		[AttributeLogicalName("currencyformatcode"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? CurrencyFormatCode
		{
			get
			{
				var value = GetAttributeValue<int?>("currencyformatcode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("currencyformatcode"))
				    value = (int?) backupAttributeCollection["currencyformatcode"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CurrencyFormatCode");
					SetAttributeValue("currencyformatcode", value);
				OnPropertyChanged("CurrencyFormatCode");
			}
		}

        /// <summary>
        /// [MaximumLength=13] 
		/// 'CurrencySymbol'.<br />
        /// Symbol used for currency in Microsoft Dynamics 365.
        /// </summary>
		[AttributeLogicalName("currencysymbol"), MaxLength(13)]
		public string CurrencySymbol
		{
			get
			{
				var value = GetAttributeValue<string>("currencysymbol");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("currencysymbol"))
				    value = (string) backupAttributeCollection["currencysymbol"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CurrencySymbol");
					SetAttributeValue("currencysymbol", value);
				OnPropertyChanged("CurrencySymbol");
			}
		}

        /// <summary>
        ///  
		/// 'DataValidationModeForExportToExcel'.<br />
        /// Information that specifies the level of data validation in excel worksheets exported in a format suitable for import.
        /// </summary>
		[AttributeLogicalName("datavalidationmodeforexporttoexcel")]
		public DataValidationModeForExportToExcelEnum? DataValidationModeForExportToExcel
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("datavalidationmodeforexporttoexcel");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("datavalidationmodeforexporttoexcel"))
				    value = (OptionSetValue) backupAttributeCollection["datavalidationmodeforexporttoexcel"];
                return value == null ? (DataValidationModeForExportToExcelEnum?) null : (DataValidationModeForExportToExcelEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("DataValidationModeForExportToExcel");
                if (value != null)
				    SetAttributeValue("datavalidationmodeforexporttoexcel", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("datavalidationmodeforexporttoexcel", value);
				OnPropertyChanged("DataValidationModeForExportToExcel");
			}
		}

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'DateFormatCode'.<br />
        /// Information about how the date is displayed in Microsoft Dynamics 365.
        /// </summary>
		[AttributeLogicalName("dateformatcode"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? DateFormatCode
		{
			get
			{
				var value = GetAttributeValue<int?>("dateformatcode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("dateformatcode"))
				    value = (int?) backupAttributeCollection["dateformatcode"];
			    return value;
			}
			set
			{
				OnPropertyChanging("DateFormatCode");
					SetAttributeValue("dateformatcode", value);
				OnPropertyChanged("DateFormatCode");
			}
		}

        /// <summary>
        /// [MaximumLength=255] 
		/// 'DateFormatString'.<br />
        /// String showing how the date is displayed throughout Microsoft 365.
        /// </summary>
		[AttributeLogicalName("dateformatstring"), MaxLength(255)]
		public string DateFormatString
		{
			get
			{
				var value = GetAttributeValue<string>("dateformatstring");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("dateformatstring"))
				    value = (string) backupAttributeCollection["dateformatstring"];
			    return value;
			}
			set
			{
				OnPropertyChanging("DateFormatString");
					SetAttributeValue("dateformatstring", value);
				OnPropertyChanged("DateFormatString");
			}
		}

        /// <summary>
        /// [MaximumLength=5] 
		/// 'DateSeparator'.<br />
        /// Character used to separate the month, the day, and the year in dates in Microsoft Dynamics 365.
        /// </summary>
		[AttributeLogicalName("dateseparator"), MaxLength(5)]
		public string DateSeparator
		{
			get
			{
				var value = GetAttributeValue<string>("dateseparator");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("dateseparator"))
				    value = (string) backupAttributeCollection["dateseparator"];
			    return value;
			}
			set
			{
				OnPropertyChanging("DateSeparator");
					SetAttributeValue("dateseparator", value);
				OnPropertyChanged("DateSeparator");
			}
		}

        /// <summary>
        /// [MaximumLength=5] 
		/// 'DecimalSymbol'.<br />
        /// Symbol used for decimal in Microsoft Dynamics 365.
        /// </summary>
		[AttributeLogicalName("decimalsymbol"), MaxLength(5)]
		public string DecimalSymbol
		{
			get
			{
				var value = GetAttributeValue<string>("decimalsymbol");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("decimalsymbol"))
				    value = (string) backupAttributeCollection["decimalsymbol"];
			    return value;
			}
			set
			{
				OnPropertyChanging("DecimalSymbol");
					SetAttributeValue("decimalsymbol", value);
				OnPropertyChanged("DecimalSymbol");
			}
		}

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'DefaultCalendarView'.<br />
        /// Default calendar view for the user.
        /// </summary>
		[AttributeLogicalName("defaultcalendarview"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? DefaultCalendarView
		{
			get
			{
				var value = GetAttributeValue<int?>("defaultcalendarview");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("defaultcalendarview"))
				    value = (int?) backupAttributeCollection["defaultcalendarview"];
			    return value;
			}
			set
			{
				OnPropertyChanging("DefaultCalendarView");
					SetAttributeValue("defaultcalendarview", value);
				OnPropertyChanged("DefaultCalendarView");
			}
		}

        /// <summary>
        /// [MaximumLength=30] 
		/// 'DefaultCountryCode'.<br />
        /// Text area to enter default country code.
        /// </summary>
		[AttributeLogicalName("defaultcountrycode"), MaxLength(30)]
		public string DefaultCountryCode
		{
			get
			{
				var value = GetAttributeValue<string>("defaultcountrycode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("defaultcountrycode"))
				    value = (string) backupAttributeCollection["defaultcountrycode"];
			    return value;
			}
			set
			{
				OnPropertyChanging("DefaultCountryCode");
					SetAttributeValue("defaultcountrycode", value);
				OnPropertyChanged("DefaultCountryCode");
			}
		}

        /// <summary>
        ///  
		/// 'DefaultDashboardId'.<br />
        /// Unique identifier of the default dashboard.
        /// </summary>
		[AttributeLogicalName("defaultdashboardid")]
		public Guid? DefaultDashboardId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("defaultdashboardid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("defaultdashboardid"))
				    value = (Guid?) backupAttributeCollection["defaultdashboardid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("DefaultDashboardId");
					SetAttributeValue("defaultdashboardid", value);
				OnPropertyChanged("DefaultDashboardId");
			}
		}

        /// <summary>
        ///  
		/// 'DefaultSearchExperience'.<br />
        /// Default search experience for the user.
        /// </summary>
		[AttributeLogicalName("defaultsearchexperience")]
		public DefaultSearchExperienceEnum? DefaultSearchExperience
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("defaultsearchexperience");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("defaultsearchexperience"))
				    value = (OptionSetValue) backupAttributeCollection["defaultsearchexperience"];
                return value == null ? (DefaultSearchExperienceEnum?) null : (DefaultSearchExperienceEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("DefaultSearchExperience");
                if (value != null)
				    SetAttributeValue("defaultsearchexperience", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("defaultsearchexperience", value);
				OnPropertyChanged("DefaultSearchExperience");
			}
		}

        /// <summary>
        /// [MaximumLength=200] 
		/// 'EmailPassword'.<br />
        /// This attribute is no longer used. The data is now in the Mailbox.Password attribute.
        /// </summary>
		[AttributeLogicalName("emailpassword"), MaxLength(200)]
		[Obsolete]
		public string EmailPassword
		{
			get
			{
				var value = GetAttributeValue<string>("emailpassword");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("emailpassword"))
				    value = (string) backupAttributeCollection["emailpassword"];
			    return value;
			}
			set
			{
				OnPropertyChanging("EmailPassword");
					SetAttributeValue("emailpassword", value);
				OnPropertyChanged("EmailPassword");
			}
		}

        /// <summary>
        /// [MaximumLength=200] 
		/// 'EmailUsername'.<br />
        /// This attribute is no longer used. The data is now in the Mailbox.UserName attribute.
        /// </summary>
		[AttributeLogicalName("emailusername"), MaxLength(200)]
		[Obsolete]
		public string EmailUsername
		{
			get
			{
				var value = GetAttributeValue<string>("emailusername");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("emailusername"))
				    value = (string) backupAttributeCollection["emailusername"];
			    return value;
			}
			set
			{
				OnPropertyChanging("EmailUsername");
					SetAttributeValue("emailusername", value);
				OnPropertyChanged("EmailUsername");
			}
		}

        /// <summary>
        ///  
		/// 'EntityFormMode'.<br />
        /// Indicates the form mode to be used.
        /// </summary>
		[AttributeLogicalName("entityformmode")]
		public FormModeEnum? FormMode
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("entityformmode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("entityformmode"))
				    value = (OptionSetValue) backupAttributeCollection["entityformmode"];
                return value == null ? (FormModeEnum?) null : (FormModeEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("FormMode");
                if (value != null)
				    SetAttributeValue("entityformmode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("entityformmode", value);
				OnPropertyChanged("FormMode");
			}
		}

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'FullNameConventionCode'.<br />
        /// Order in which names are to be displayed in Microsoft Dynamics 365.
        /// </summary>
		[AttributeLogicalName("fullnameconventioncode"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? FullNameConventionCode
		{
			get
			{
				var value = GetAttributeValue<int?>("fullnameconventioncode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("fullnameconventioncode"))
				    value = (int?) backupAttributeCollection["fullnameconventioncode"];
			    return value;
			}
			set
			{
				OnPropertyChanging("FullNameConventionCode");
					SetAttributeValue("fullnameconventioncode", value);
				OnPropertyChanged("FullNameConventionCode");
			}
		}

        /// <summary>
        ///  
		/// 'GetStartedPaneContentEnabled'.<br />
        /// Information that specifies whether the Get Started pane in lists is enabled.
        /// </summary>
		[AttributeLogicalName("getstartedpanecontentenabled")]
		public bool? GetStartedPaneContentEnabled
		{
			get
			{
				var value = GetAttributeValue<bool?>("getstartedpanecontentenabled");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("getstartedpanecontentenabled"))
				    value = (bool?) backupAttributeCollection["getstartedpanecontentenabled"];
			    return value;
			}
			set
			{
				OnPropertyChanging("GetStartedPaneContentEnabled");
					SetAttributeValue("getstartedpanecontentenabled", value);
				OnPropertyChanged("GetStartedPaneContentEnabled");
			}
		}

        /// <summary>
        /// [Required][Range(0, 2147483647)] 
		/// 'HelpLanguageId'.<br />
        /// Unique identifier of the Help language.
        /// </summary>
		[AttributeLogicalName("helplanguageid"), Required, InRange("0", "2147483647", typeof(int))]
		public int? HelpLanguageId
		{
			get
			{
				var value = GetAttributeValue<int?>("helplanguageid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("helplanguageid"))
				    value = (int?) backupAttributeCollection["helplanguageid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("HelpLanguageId");
					SetAttributeValue("helplanguageid", value);
				OnPropertyChanged("HelpLanguageId");
			}
		}

        /// <summary>
        /// [MaximumLength=200] 
		/// 'HomepageArea'.<br />
        /// Web site home page for the user.
        /// </summary>
		[AttributeLogicalName("homepagearea"), MaxLength(200)]
		public string HomepageArea
		{
			get
			{
				var value = GetAttributeValue<string>("homepagearea");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("homepagearea"))
				    value = (string) backupAttributeCollection["homepagearea"];
			    return value;
			}
			set
			{
				OnPropertyChanging("HomepageArea");
					SetAttributeValue("homepagearea", value);
				OnPropertyChanged("HomepageArea");
			}
		}

        /// <summary>
        /// [MaximumLength=2000] 
		/// 'HomepageLayout'.<br />
        /// Configuration of the home page layout.
        /// </summary>
		[AttributeLogicalName("homepagelayout"), MaxLength(2000)]
		public string HomepageLayout
		{
			get
			{
				var value = GetAttributeValue<string>("homepagelayout");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("homepagelayout"))
				    value = (string) backupAttributeCollection["homepagelayout"];
			    return value;
			}
			set
			{
				OnPropertyChanging("HomepageLayout");
					SetAttributeValue("homepagelayout", value);
				OnPropertyChanged("HomepageLayout");
			}
		}

        /// <summary>
        /// [MaximumLength=200] 
		/// 'HomepageSubarea'.<br />
        /// Web site page for the user.
        /// </summary>
		[AttributeLogicalName("homepagesubarea"), MaxLength(200)]
		public string HomepageSubarea
		{
			get
			{
				var value = GetAttributeValue<string>("homepagesubarea");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("homepagesubarea"))
				    value = (string) backupAttributeCollection["homepagesubarea"];
			    return value;
			}
			set
			{
				OnPropertyChanging("HomepageSubarea");
					SetAttributeValue("homepagesubarea", value);
				OnPropertyChanged("HomepageSubarea");
			}
		}

        /// <summary>
        ///  
		/// 'IgnoreUnsolicitedEmail'.<br />
        /// Information that specifies whether a user account is to ignore unsolicited email (deprecated).
        /// </summary>
		[AttributeLogicalName("ignoreunsolicitedemail")]
		public bool? IgnoreUnsolicitedEmail
		{
			get
			{
				var value = GetAttributeValue<bool?>("ignoreunsolicitedemail");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ignoreunsolicitedemail"))
				    value = (bool?) backupAttributeCollection["ignoreunsolicitedemail"];
			    return value;
			}
			set
			{
				OnPropertyChanging("IgnoreUnsolicitedEmail");
					SetAttributeValue("ignoreunsolicitedemail", value);
				OnPropertyChanged("IgnoreUnsolicitedEmail");
			}
		}

        /// <summary>
        ///  
		/// 'IncomingEmailFilteringMethod'.<br />
        /// Incoming email filtering method.
        /// </summary>
		[AttributeLogicalName("incomingemailfilteringmethod")]
		public IncomingEmailFilteringMethodEnum? IncomingEmailFilteringMethod
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("incomingemailfilteringmethod");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("incomingemailfilteringmethod"))
				    value = (OptionSetValue) backupAttributeCollection["incomingemailfilteringmethod"];
                return value == null ? (IncomingEmailFilteringMethodEnum?) null : (IncomingEmailFilteringMethodEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("IncomingEmailFilteringMethod");
                if (value != null)
				    SetAttributeValue("incomingemailfilteringmethod", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("incomingemailfilteringmethod", value);
				OnPropertyChanged("IncomingEmailFilteringMethod");
			}
		}

        /// <summary>
        ///  
		/// 'IsAppsForCrmAlertDismissed'.<br />
        /// Show or dismiss alert for Apps for 365.
        /// </summary>
		[AttributeLogicalName("isappsforcrmalertdismissed")]
		public bool? ShowalertforAppsfor365
		{
			get
			{
				var value = GetAttributeValue<bool?>("isappsforcrmalertdismissed");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("isappsforcrmalertdismissed"))
				    value = (bool?) backupAttributeCollection["isappsforcrmalertdismissed"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ShowalertforAppsfor365");
					SetAttributeValue("isappsforcrmalertdismissed", value);
				OnPropertyChanged("ShowalertforAppsfor365");
			}
		}

        /// <summary>
        ///  
		/// 'IsAutoDataCaptureEnabled'.<br />
        /// Indicates whether to use the Auto Capture feature enabled or not.
        /// </summary>
		[AttributeLogicalName("isautodatacaptureenabled")]
		public bool? IsAutoDataCaptureEnabled
		{
			get
			{
				var value = GetAttributeValue<bool?>("isautodatacaptureenabled");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("isautodatacaptureenabled"))
				    value = (bool?) backupAttributeCollection["isautodatacaptureenabled"];
			    return value;
			}
			set
			{
				OnPropertyChanging("IsAutoDataCaptureEnabled");
					SetAttributeValue("isautodatacaptureenabled", value);
				OnPropertyChanged("IsAutoDataCaptureEnabled");
			}
		}

        /// <summary>
        ///  
		/// 'IsDefaultCountryCodeCheckEnabled'.<br />
        /// Enable or disable country code selection .
        /// </summary>
		[AttributeLogicalName("isdefaultcountrycodecheckenabled")]
		public bool? EnableDefaultCountryCode
		{
			get
			{
				var value = GetAttributeValue<bool?>("isdefaultcountrycodecheckenabled");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("isdefaultcountrycodecheckenabled"))
				    value = (bool?) backupAttributeCollection["isdefaultcountrycodecheckenabled"];
			    return value;
			}
			set
			{
				OnPropertyChanging("EnableDefaultCountryCode");
					SetAttributeValue("isdefaultcountrycodecheckenabled", value);
				OnPropertyChanged("EnableDefaultCountryCode");
			}
		}

        /// <summary>
        ///  
		/// 'IsDuplicateDetectionEnabledWhenGoingOnline'.<br />
        /// Indicates if duplicate detection is enabled when going online.
        /// </summary>
		[AttributeLogicalName("isduplicatedetectionenabledwhengoingonline")]
		public bool? IsDuplicateDetectionEnabledWhenGoingOnline
		{
			get
			{
				var value = GetAttributeValue<bool?>("isduplicatedetectionenabledwhengoingonline");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("isduplicatedetectionenabledwhengoingonline"))
				    value = (bool?) backupAttributeCollection["isduplicatedetectionenabledwhengoingonline"];
			    return value;
			}
			set
			{
				OnPropertyChanging("IsDuplicateDetectionEnabledWhenGoingOnline");
					SetAttributeValue("isduplicatedetectionenabledwhengoingonline", value);
				OnPropertyChanged("IsDuplicateDetectionEnabledWhenGoingOnline");
			}
		}

        /// <summary>
        ///  
		/// 'IsGuidedHelpEnabled'.<br />
        /// Enable or disable guided help.
        /// </summary>
		[AttributeLogicalName("isguidedhelpenabled")]
		public bool? EnableDefaultGuidedHelp
		{
			get
			{
				var value = GetAttributeValue<bool?>("isguidedhelpenabled");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("isguidedhelpenabled"))
				    value = (bool?) backupAttributeCollection["isguidedhelpenabled"];
			    return value;
			}
			set
			{
				OnPropertyChanging("EnableDefaultGuidedHelp");
					SetAttributeValue("isguidedhelpenabled", value);
				OnPropertyChanged("EnableDefaultGuidedHelp");
			}
		}

        /// <summary>
        ///  
		/// 'IsResourceBookingExchangeSyncEnabled'.<br />
        /// Indicates if the synchronization of user resource booking with Exchange is enabled at user level.
        /// </summary>
		[AttributeLogicalName("isresourcebookingexchangesyncenabled")]
		public bool? Resourcebookingsynchronizationenabled
		{
			get
			{
				var value = GetAttributeValue<bool?>("isresourcebookingexchangesyncenabled");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("isresourcebookingexchangesyncenabled"))
				    value = (bool?) backupAttributeCollection["isresourcebookingexchangesyncenabled"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Resourcebookingsynchronizationenabled");
					SetAttributeValue("isresourcebookingexchangesyncenabled", value);
				OnPropertyChanged("Resourcebookingsynchronizationenabled");
			}
		}

        /// <summary>
        ///  
		/// 'IsSendAsAllowed'.<br />
        /// Indicates if send as other user privilege is enabled or not.
        /// </summary>
		[AttributeLogicalName("issendasallowed")]
		public bool? IsSendAsAllowed
		{
			get
			{
				var value = GetAttributeValue<bool?>("issendasallowed");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("issendasallowed"))
				    value = (bool?) backupAttributeCollection["issendasallowed"];
			    return value;
			}
			set
			{
				OnPropertyChanging("IsSendAsAllowed");
					SetAttributeValue("issendasallowed", value);
				OnPropertyChanged("IsSendAsAllowed");
			}
		}

        /// <summary>
        ///  
		/// 'LastAlertsViewedTime'.<br />
        /// Shows the last time when the traces were read from the database.
        /// </summary>
		[AttributeLogicalName("lastalertsviewedtime")]
		public DateTime? LastAlertsViewedTime
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("lastalertsviewedtime");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("lastalertsviewedtime"))
				    value = (DateTime?) backupAttributeCollection["lastalertsviewedtime"];
			    return value;
			}
			set
			{
				OnPropertyChanging("LastAlertsViewedTime");
					SetAttributeValue("lastalertsviewedtime", value);
				OnPropertyChanged("LastAlertsViewedTime");
			}
		}

        /// <summary>
        /// [Required][Range(-2147483648, 2147483647)] 
		/// 'LocaleId'.<br />
        /// Unique identifier of the user locale.
        /// </summary>
		[AttributeLogicalName("localeid"), Required, InRange("-2147483648", "2147483647", typeof(int))]
		public int? LocaleId
		{
			get
			{
				var value = GetAttributeValue<int?>("localeid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("localeid"))
				    value = (int?) backupAttributeCollection["localeid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("LocaleId");
					SetAttributeValue("localeid", value);
				OnPropertyChanged("LocaleId");
			}
		}

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'LongDateFormatCode'.<br />
        /// Information that specifies how Long Date is displayed throughout Microsoft 365.
        /// </summary>
		[AttributeLogicalName("longdateformatcode"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? LongDateFormatCode
		{
			get
			{
				var value = GetAttributeValue<int?>("longdateformatcode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("longdateformatcode"))
				    value = (int?) backupAttributeCollection["longdateformatcode"];
			    return value;
			}
			set
			{
				OnPropertyChanging("LongDateFormatCode");
					SetAttributeValue("longdateformatcode", value);
				OnPropertyChanged("LongDateFormatCode");
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedBy'.<br />
        /// Unique identifier of the user who last modified the user settings.
        /// </summary>
		[AttributeLogicalName("modifiedby")]
		public Guid? ModifiedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedby"))
				    value = (EntityReference) backupAttributeCollection["modifiedby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ModifiedBy");
                if (value != null)
				    SetAttributeValue("modifiedby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("modifiedby", value);
				OnPropertyChanged("ModifiedBy");
			}
		}

        public string ModifiedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedby"))
				    value = (EntityReference) backupAttributeCollection["modifiedby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'ModifiedOn'.<br />
        /// Date and time when the user settings object was last modified.
        /// </summary>
		[AttributeLogicalName("modifiedon")]
		public DateTime? ModifiedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("modifiedon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedon"))
				    value = (DateTime?) backupAttributeCollection["modifiedon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ModifiedOn");
					SetAttributeValue("modifiedon", value);
				OnPropertyChanged("ModifiedOn");
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who last modified the usersettings.
        /// </summary>
		[AttributeLogicalName("modifiedonbehalfby")]
		public Guid? ModifiedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["modifiedonbehalfby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ModifiedByDelegate");
                if (value != null)
				    SetAttributeValue("modifiedonbehalfby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("modifiedonbehalfby", value);
				OnPropertyChanged("ModifiedByDelegate");
			}
		}

        public string ModifiedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["modifiedonbehalfby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        /// [Range(0, 15)] 
		/// 'NegativeCurrencyFormatCode'.<br />
        /// Information that specifies how negative currency numbers are displayed in Microsoft Dynamics 365.
        /// </summary>
		[AttributeLogicalName("negativecurrencyformatcode"), InRange("0", "15", typeof(int))]
		public int? NegativeCurrencyFormatCode
		{
			get
			{
				var value = GetAttributeValue<int?>("negativecurrencyformatcode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("negativecurrencyformatcode"))
				    value = (int?) backupAttributeCollection["negativecurrencyformatcode"];
			    return value;
			}
			set
			{
				OnPropertyChanging("NegativeCurrencyFormatCode");
					SetAttributeValue("negativecurrencyformatcode", value);
				OnPropertyChanged("NegativeCurrencyFormatCode");
			}
		}

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'NegativeFormatCode'.<br />
        /// Information that specifies how negative numbers are displayed in Microsoft Dynamics 365.
        /// </summary>
		[AttributeLogicalName("negativeformatcode"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? NegativeFormatCode
		{
			get
			{
				var value = GetAttributeValue<int?>("negativeformatcode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("negativeformatcode"))
				    value = (int?) backupAttributeCollection["negativeformatcode"];
			    return value;
			}
			set
			{
				OnPropertyChanging("NegativeFormatCode");
					SetAttributeValue("negativeformatcode", value);
				OnPropertyChanged("NegativeFormatCode");
			}
		}

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'NextTrackingNumber'.<br />
        /// Next tracking number.
        /// </summary>
		[AttributeLogicalName("nexttrackingnumber"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? NextTrackingNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("nexttrackingnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("nexttrackingnumber"))
				    value = (int?) backupAttributeCollection["nexttrackingnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("NextTrackingNumber");
					SetAttributeValue("nexttrackingnumber", value);
				OnPropertyChanged("NextTrackingNumber");
			}
		}

        /// <summary>
        /// [MaximumLength=25] 
		/// 'NumberGroupFormat'.<br />
        /// Information that specifies how numbers are grouped in Microsoft Dynamics 365.
        /// </summary>
		[AttributeLogicalName("numbergroupformat"), MaxLength(25)]
		public string NumberGroupFormat
		{
			get
			{
				var value = GetAttributeValue<string>("numbergroupformat");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("numbergroupformat"))
				    value = (string) backupAttributeCollection["numbergroupformat"];
			    return value;
			}
			set
			{
				OnPropertyChanging("NumberGroupFormat");
					SetAttributeValue("numbergroupformat", value);
				OnPropertyChanged("NumberGroupFormat");
			}
		}

        /// <summary>
        /// [MaximumLength=5] 
		/// 'NumberSeparator'.<br />
        /// Symbol used for number separation in Microsoft Dynamics 365.
        /// </summary>
		[AttributeLogicalName("numberseparator"), MaxLength(5)]
		public string NumberSeparator
		{
			get
			{
				var value = GetAttributeValue<string>("numberseparator");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("numberseparator"))
				    value = (string) backupAttributeCollection["numberseparator"];
			    return value;
			}
			set
			{
				OnPropertyChanging("NumberSeparator");
					SetAttributeValue("numberseparator", value);
				OnPropertyChanged("NumberSeparator");
			}
		}

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'OfflineSyncInterval'.<br />
        /// Normal polling frequency used for background offline synchronization in Microsoft Office Outlook.
        /// </summary>
		[AttributeLogicalName("offlinesyncinterval"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? OfflineSyncInterval
		{
			get
			{
				var value = GetAttributeValue<int?>("offlinesyncinterval");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("offlinesyncinterval"))
				    value = (int?) backupAttributeCollection["offlinesyncinterval"];
			    return value;
			}
			set
			{
				OnPropertyChanging("OfflineSyncInterval");
					SetAttributeValue("offlinesyncinterval", value);
				OnPropertyChanged("OfflineSyncInterval");
			}
		}

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'OutlookSyncInterval'.<br />
        /// Normal polling frequency used for record synchronization in Microsoft Office Outlook.
        /// </summary>
		[AttributeLogicalName("outlooksyncinterval"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? OutlookSyncInterval
		{
			get
			{
				var value = GetAttributeValue<int?>("outlooksyncinterval");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("outlooksyncinterval"))
				    value = (int?) backupAttributeCollection["outlooksyncinterval"];
			    return value;
			}
			set
			{
				OnPropertyChanging("OutlookSyncInterval");
					SetAttributeValue("outlooksyncinterval", value);
				OnPropertyChanged("OutlookSyncInterval");
			}
		}

        /// <summary>
        /// [Range(0, 2147483647)] 
		/// 'PagingLimit'.<br />
        /// Information that specifies how many items to list on a page in list views.
        /// </summary>
		[AttributeLogicalName("paginglimit"), InRange("0", "2147483647", typeof(int))]
		public int? PagingLimit
		{
			get
			{
				var value = GetAttributeValue<int?>("paginglimit");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("paginglimit"))
				    value = (int?) backupAttributeCollection["paginglimit"];
			    return value;
			}
			set
			{
				OnPropertyChanging("PagingLimit");
					SetAttributeValue("paginglimit", value);
				OnPropertyChanged("PagingLimit");
			}
		}

        /// <summary>
        /// [MaximumLength=1073741823] 
		/// 'PersonalizationSettings'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("personalizationsettings"), MaxLength(1073741823)]
		public string PersonalizationSettings
		{
			get
			{
				var value = GetAttributeValue<string>("personalizationsettings");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("personalizationsettings"))
				    value = (string) backupAttributeCollection["personalizationsettings"];
			    return value;
			}
			set
			{
				OnPropertyChanging("PersonalizationSettings");
					SetAttributeValue("personalizationsettings", value);
				OnPropertyChanged("PersonalizationSettings");
			}
		}

        /// <summary>
        /// [MaximumLength=25] 
		/// 'PMDesignator'.<br />
        /// PM designator to use in Microsoft Dynamics 365.
        /// </summary>
		[AttributeLogicalName("pmdesignator"), MaxLength(25)]
		public string PMDesignator
		{
			get
			{
				var value = GetAttributeValue<string>("pmdesignator");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("pmdesignator"))
				    value = (string) backupAttributeCollection["pmdesignator"];
			    return value;
			}
			set
			{
				OnPropertyChanging("PMDesignator");
					SetAttributeValue("pmdesignator", value);
				OnPropertyChanged("PMDesignator");
			}
		}

        /// <summary>
        /// [Required][Range(-2147483648, 2147483647)] 
		/// 'PricingDecimalPrecision'.<br />
        /// Number of decimal places that can be used for prices.
        /// </summary>
		[AttributeLogicalName("pricingdecimalprecision"), Required, InRange("-2147483648", "2147483647", typeof(int))]
		[Obsolete]
		public int? PricingDecimalPrecision
		{
			get
			{
				var value = GetAttributeValue<int?>("pricingdecimalprecision");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("pricingdecimalprecision"))
				    value = (int?) backupAttributeCollection["pricingdecimalprecision"];
			    return value;
			}
			set
			{
				OnPropertyChanging("PricingDecimalPrecision");
					SetAttributeValue("pricingdecimalprecision", value);
				OnPropertyChanged("PricingDecimalPrecision");
			}
		}

        /// <summary>
        ///  
		/// 'ReportScriptErrors'.<br />
        /// Picklist for selecting the user preference for reporting scripting errors.
        /// </summary>
		[AttributeLogicalName("reportscripterrors")]
		public ReportScriptErrorsEnum? ReportScriptErrors
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("reportscripterrors");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("reportscripterrors"))
				    value = (OptionSetValue) backupAttributeCollection["reportscripterrors"];
                return value == null ? (ReportScriptErrorsEnum?) null : (ReportScriptErrorsEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("ReportScriptErrors");
                if (value != null)
				    SetAttributeValue("reportscripterrors", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("reportscripterrors", value);
				OnPropertyChanged("ReportScriptErrors");
			}
		}

        /// <summary>
        ///  
		/// 'ResourceBookingExchangeSyncVersion'.<br />
        /// The version number for resource booking synchronization with Exchange.
        /// </summary>
		[AttributeLogicalName("resourcebookingexchangesyncversion")]
		public long? Userresourcebookingsynchronizationversion
		{
			get
			{
				var value = GetAttributeValue<long?>("resourcebookingexchangesyncversion");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("resourcebookingexchangesyncversion"))
				    value = (long?) backupAttributeCollection["resourcebookingexchangesyncversion"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Userresourcebookingsynchronizationversion");
					SetAttributeValue("resourcebookingexchangesyncversion", value);
				OnPropertyChanged("Userresourcebookingsynchronizationversion");
			}
		}

        /// <summary>
        ///  
		/// 'ShowWeekNumber'.<br />
        /// Information that specifies whether to display the week number in calendar displays in Microsoft Dynamics 365.
        /// </summary>
		[AttributeLogicalName("showweeknumber")]
		public bool? ShowWeekNumber
		{
			get
			{
				var value = GetAttributeValue<bool?>("showweeknumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("showweeknumber"))
				    value = (bool?) backupAttributeCollection["showweeknumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ShowWeekNumber");
					SetAttributeValue("showweeknumber", value);
				OnPropertyChanged("ShowWeekNumber");
			}
		}

        /// <summary>
        ///  
		/// 'SplitViewState'.<br />
        /// For Internal use only
        /// </summary>
		[AttributeLogicalName("splitviewstate")]
		public bool? SplitViewState
		{
			get
			{
				var value = GetAttributeValue<bool?>("splitviewstate");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("splitviewstate"))
				    value = (bool?) backupAttributeCollection["splitviewstate"];
			    return value;
			}
			set
			{
				OnPropertyChanging("SplitViewState");
					SetAttributeValue("splitviewstate", value);
				OnPropertyChanged("SplitViewState");
			}
		}

        /// <summary>
        ///  
		/// 'SyncContactCompany'.<br />
        /// Indicates if the company field in Microsoft Office Outlook items are set during Outlook synchronization.
        /// </summary>
		[AttributeLogicalName("synccontactcompany")]
		public bool? SyncContactCompany
		{
			get
			{
				var value = GetAttributeValue<bool?>("synccontactcompany");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("synccontactcompany"))
				    value = (bool?) backupAttributeCollection["synccontactcompany"];
			    return value;
			}
			set
			{
				OnPropertyChanging("SyncContactCompany");
					SetAttributeValue("synccontactcompany", value);
				OnPropertyChanged("SyncContactCompany");
			}
		}

        /// <summary>
        ///  
		/// 'SystemUserId'.<br />
        /// Unique identifier of the user.
        /// </summary>
		[AttributeLogicalName("systemuserid")]
		public Guid? SystemUserIdId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("systemuserid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("systemuserid"))
				    value = (Guid?) backupAttributeCollection["systemuserid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("SystemUserIdId");
                if (value != null)
					SetAttributeValue("systemuserid", value);
				if (value != null)
					base.Id = value.Value;
				else
					Id = System.Guid.Empty;
				OnPropertyChanged("SystemUserIdId");
			}
		}

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'TimeFormatCode'.<br />
        /// Information that specifies how the time is displayed in Microsoft Dynamics 365.
        /// </summary>
		[AttributeLogicalName("timeformatcode"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? TimeFormatCode
		{
			get
			{
				var value = GetAttributeValue<int?>("timeformatcode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("timeformatcode"))
				    value = (int?) backupAttributeCollection["timeformatcode"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TimeFormatCode");
					SetAttributeValue("timeformatcode", value);
				OnPropertyChanged("TimeFormatCode");
			}
		}

        /// <summary>
        /// [MaximumLength=255] 
		/// 'TimeFormatString'.<br />
        /// Text for how time is displayed in Microsoft Dynamics 365.
        /// </summary>
		[AttributeLogicalName("timeformatstring"), MaxLength(255)]
		public string TimeFormatString
		{
			get
			{
				var value = GetAttributeValue<string>("timeformatstring");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("timeformatstring"))
				    value = (string) backupAttributeCollection["timeformatstring"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TimeFormatString");
					SetAttributeValue("timeformatstring", value);
				OnPropertyChanged("TimeFormatString");
			}
		}

        /// <summary>
        /// [MaximumLength=5] 
		/// 'TimeSeparator'.<br />
        /// Text for how time is displayed in Microsoft Dynamics 365.
        /// </summary>
		[AttributeLogicalName("timeseparator"), MaxLength(5)]
		public string TimeSeparator
		{
			get
			{
				var value = GetAttributeValue<string>("timeseparator");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("timeseparator"))
				    value = (string) backupAttributeCollection["timeseparator"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TimeSeparator");
					SetAttributeValue("timeseparator", value);
				OnPropertyChanged("TimeSeparator");
			}
		}

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'TimeZoneBias'.<br />
        /// Local time zone adjustment for the user. System calculated based on the time zone selected.
        /// </summary>
		[AttributeLogicalName("timezonebias"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? TimeZoneBias
		{
			get
			{
				var value = GetAttributeValue<int?>("timezonebias");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("timezonebias"))
				    value = (int?) backupAttributeCollection["timezonebias"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TimeZoneBias");
					SetAttributeValue("timezonebias", value);
				OnPropertyChanged("TimeZoneBias");
			}
		}

        /// <summary>
        ///  
		/// 'TimeZoneCode'.<br />
        /// Local time zone for the user.
        /// </summary>
		[AttributeLogicalName("timezonecode")]
		public int? TimeZoneCode
		{
			get
			{
				var value = GetAttributeValue<int?>("timezonecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("timezonecode"))
				    value = (int?) backupAttributeCollection["timezonecode"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TimeZoneCode");
					SetAttributeValue("timezonecode", value);
				OnPropertyChanged("TimeZoneCode");
			}
		}

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'TimeZoneDaylightBias'.<br />
        /// Local time zone daylight adjustment for the user. System calculated based on the time zone selected.
        /// </summary>
		[AttributeLogicalName("timezonedaylightbias"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? TimeZoneDaylightBias
		{
			get
			{
				var value = GetAttributeValue<int?>("timezonedaylightbias");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("timezonedaylightbias"))
				    value = (int?) backupAttributeCollection["timezonedaylightbias"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TimeZoneDaylightBias");
					SetAttributeValue("timezonedaylightbias", value);
				OnPropertyChanged("TimeZoneDaylightBias");
			}
		}

        /// <summary>
        ///  
		/// 'TimeZoneDaylightDay'.<br />
        /// Local time zone daylight day for the user. System calculated based on the time zone selected.
        /// </summary>
		[AttributeLogicalName("timezonedaylightday")]
		public int? TimeZoneDaylightDay
		{
			get
			{
				var value = GetAttributeValue<int?>("timezonedaylightday");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("timezonedaylightday"))
				    value = (int?) backupAttributeCollection["timezonedaylightday"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TimeZoneDaylightDay");
					SetAttributeValue("timezonedaylightday", value);
				OnPropertyChanged("TimeZoneDaylightDay");
			}
		}

        /// <summary>
        ///  
		/// 'TimeZoneDaylightDayOfWeek'.<br />
        /// Local time zone daylight day of week for the user. System calculated based on the time zone selected in Options.
        /// </summary>
		[AttributeLogicalName("timezonedaylightdayofweek")]
		public int? TimeZoneDaylightDayOfWeek
		{
			get
			{
				var value = GetAttributeValue<int?>("timezonedaylightdayofweek");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("timezonedaylightdayofweek"))
				    value = (int?) backupAttributeCollection["timezonedaylightdayofweek"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TimeZoneDaylightDayOfWeek");
					SetAttributeValue("timezonedaylightdayofweek", value);
				OnPropertyChanged("TimeZoneDaylightDayOfWeek");
			}
		}

        /// <summary>
        ///  
		/// 'TimeZoneDaylightHour'.<br />
        /// Local time zone daylight hour for the user. System calculated based on the time zone selected.
        /// </summary>
		[AttributeLogicalName("timezonedaylighthour")]
		public int? TimeZoneDaylightHour
		{
			get
			{
				var value = GetAttributeValue<int?>("timezonedaylighthour");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("timezonedaylighthour"))
				    value = (int?) backupAttributeCollection["timezonedaylighthour"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TimeZoneDaylightHour");
					SetAttributeValue("timezonedaylighthour", value);
				OnPropertyChanged("TimeZoneDaylightHour");
			}
		}

        /// <summary>
        ///  
		/// 'TimeZoneDaylightMinute'.<br />
        /// Local time zone daylight minute for the user. System calculated based on the time zone selected.
        /// </summary>
		[AttributeLogicalName("timezonedaylightminute")]
		public int? TimeZoneDaylightMinute
		{
			get
			{
				var value = GetAttributeValue<int?>("timezonedaylightminute");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("timezonedaylightminute"))
				    value = (int?) backupAttributeCollection["timezonedaylightminute"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TimeZoneDaylightMinute");
					SetAttributeValue("timezonedaylightminute", value);
				OnPropertyChanged("TimeZoneDaylightMinute");
			}
		}

        /// <summary>
        ///  
		/// 'TimeZoneDaylightMonth'.<br />
        /// Local time zone daylight month for the user. System calculated based on the time zone selected.
        /// </summary>
		[AttributeLogicalName("timezonedaylightmonth")]
		public int? TimeZoneDaylightMonth
		{
			get
			{
				var value = GetAttributeValue<int?>("timezonedaylightmonth");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("timezonedaylightmonth"))
				    value = (int?) backupAttributeCollection["timezonedaylightmonth"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TimeZoneDaylightMonth");
					SetAttributeValue("timezonedaylightmonth", value);
				OnPropertyChanged("TimeZoneDaylightMonth");
			}
		}

        /// <summary>
        ///  
		/// 'TimeZoneDaylightSecond'.<br />
        /// Local time zone daylight second for the user. System calculated based on the time zone selected.
        /// </summary>
		[AttributeLogicalName("timezonedaylightsecond")]
		public int? TimeZoneDaylightSecond
		{
			get
			{
				var value = GetAttributeValue<int?>("timezonedaylightsecond");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("timezonedaylightsecond"))
				    value = (int?) backupAttributeCollection["timezonedaylightsecond"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TimeZoneDaylightSecond");
					SetAttributeValue("timezonedaylightsecond", value);
				OnPropertyChanged("TimeZoneDaylightSecond");
			}
		}

        /// <summary>
        ///  
		/// 'TimeZoneDaylightYear'.<br />
        /// Local time zone daylight year for the user. System calculated based on the time zone selected.
        /// </summary>
		[AttributeLogicalName("timezonedaylightyear")]
		public int? TimeZoneDaylightYear
		{
			get
			{
				var value = GetAttributeValue<int?>("timezonedaylightyear");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("timezonedaylightyear"))
				    value = (int?) backupAttributeCollection["timezonedaylightyear"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TimeZoneDaylightYear");
					SetAttributeValue("timezonedaylightyear", value);
				OnPropertyChanged("TimeZoneDaylightYear");
			}
		}

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'TimeZoneStandardBias'.<br />
        /// Local time zone standard time bias for the user. System calculated based on the time zone selected.
        /// </summary>
		[AttributeLogicalName("timezonestandardbias"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? TimeZoneStandardBias
		{
			get
			{
				var value = GetAttributeValue<int?>("timezonestandardbias");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("timezonestandardbias"))
				    value = (int?) backupAttributeCollection["timezonestandardbias"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TimeZoneStandardBias");
					SetAttributeValue("timezonestandardbias", value);
				OnPropertyChanged("TimeZoneStandardBias");
			}
		}

        /// <summary>
        ///  
		/// 'TimeZoneStandardDay'.<br />
        /// Local time zone standard day for the user. System calculated based on the time zone selected.
        /// </summary>
		[AttributeLogicalName("timezonestandardday")]
		public int? TimeZoneStandardDay
		{
			get
			{
				var value = GetAttributeValue<int?>("timezonestandardday");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("timezonestandardday"))
				    value = (int?) backupAttributeCollection["timezonestandardday"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TimeZoneStandardDay");
					SetAttributeValue("timezonestandardday", value);
				OnPropertyChanged("TimeZoneStandardDay");
			}
		}

        /// <summary>
        ///  
		/// 'TimeZoneStandardDayOfWeek'.<br />
        /// Local time zone standard day of week for the user. System calculated based on the time zone selected.
        /// </summary>
		[AttributeLogicalName("timezonestandarddayofweek")]
		public int? TimeZoneStandardDayOfWeek
		{
			get
			{
				var value = GetAttributeValue<int?>("timezonestandarddayofweek");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("timezonestandarddayofweek"))
				    value = (int?) backupAttributeCollection["timezonestandarddayofweek"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TimeZoneStandardDayOfWeek");
					SetAttributeValue("timezonestandarddayofweek", value);
				OnPropertyChanged("TimeZoneStandardDayOfWeek");
			}
		}

        /// <summary>
        ///  
		/// 'TimeZoneStandardHour'.<br />
        /// Local time zone standard hour for the user. System calculated based on the time zone selected.
        /// </summary>
		[AttributeLogicalName("timezonestandardhour")]
		public int? TimeZoneStandardHour
		{
			get
			{
				var value = GetAttributeValue<int?>("timezonestandardhour");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("timezonestandardhour"))
				    value = (int?) backupAttributeCollection["timezonestandardhour"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TimeZoneStandardHour");
					SetAttributeValue("timezonestandardhour", value);
				OnPropertyChanged("TimeZoneStandardHour");
			}
		}

        /// <summary>
        ///  
		/// 'TimeZoneStandardMinute'.<br />
        /// Local time zone standard minute for the user. System calculated based on the time zone selected.
        /// </summary>
		[AttributeLogicalName("timezonestandardminute")]
		public int? TimeZoneStandardMinute
		{
			get
			{
				var value = GetAttributeValue<int?>("timezonestandardminute");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("timezonestandardminute"))
				    value = (int?) backupAttributeCollection["timezonestandardminute"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TimeZoneStandardMinute");
					SetAttributeValue("timezonestandardminute", value);
				OnPropertyChanged("TimeZoneStandardMinute");
			}
		}

        /// <summary>
        ///  
		/// 'TimeZoneStandardMonth'.<br />
        /// Local time zone standard month for the user. System calculated based on the time zone selected.
        /// </summary>
		[AttributeLogicalName("timezonestandardmonth")]
		public int? TimeZoneStandardMonth
		{
			get
			{
				var value = GetAttributeValue<int?>("timezonestandardmonth");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("timezonestandardmonth"))
				    value = (int?) backupAttributeCollection["timezonestandardmonth"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TimeZoneStandardMonth");
					SetAttributeValue("timezonestandardmonth", value);
				OnPropertyChanged("TimeZoneStandardMonth");
			}
		}

        /// <summary>
        ///  
		/// 'TimeZoneStandardSecond'.<br />
        /// Local time zone standard second for the user. System calculated based on the time zone selected.
        /// </summary>
		[AttributeLogicalName("timezonestandardsecond")]
		public int? TimeZoneStandardSecond
		{
			get
			{
				var value = GetAttributeValue<int?>("timezonestandardsecond");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("timezonestandardsecond"))
				    value = (int?) backupAttributeCollection["timezonestandardsecond"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TimeZoneStandardSecond");
					SetAttributeValue("timezonestandardsecond", value);
				OnPropertyChanged("TimeZoneStandardSecond");
			}
		}

        /// <summary>
        ///  
		/// 'TimeZoneStandardYear'.<br />
        /// Local time zone standard year for the user. System calculated based on the time zone selected.
        /// </summary>
		[AttributeLogicalName("timezonestandardyear")]
		public int? TimeZoneStandardYear
		{
			get
			{
				var value = GetAttributeValue<int?>("timezonestandardyear");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("timezonestandardyear"))
				    value = (int?) backupAttributeCollection["timezonestandardyear"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TimeZoneStandardYear");
					SetAttributeValue("timezonestandardyear", value);
				OnPropertyChanged("TimeZoneStandardYear");
			}
		}

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'TrackingTokenId'.<br />
        /// Tracking token ID.
        /// </summary>
		[AttributeLogicalName("trackingtokenid"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? TrackingTokenId
		{
			get
			{
				var value = GetAttributeValue<int?>("trackingtokenid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("trackingtokenid"))
				    value = (int?) backupAttributeCollection["trackingtokenid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TrackingTokenId");
					SetAttributeValue("trackingtokenid", value);
				OnPropertyChanged("TrackingTokenId");
			}
		}

        /// <summary>
        ///  
		/// 'TransactionCurrencyId'.<br />
        /// Unique identifier of the default currency of the user.
        /// </summary>
		[AttributeLogicalName("transactioncurrencyid")]
		public Guid? Currency
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("transactioncurrencyid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("transactioncurrencyid"))
				    value = (EntityReference) backupAttributeCollection["transactioncurrencyid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("Currency");
                if (value != null)
				    SetAttributeValue("transactioncurrencyid", new EntityReference("transactioncurrency", value.Value));
                else
					SetAttributeValue("transactioncurrencyid", value);
				OnPropertyChanged("Currency");
			}
		}

        public string CurrencyName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("transactioncurrencyid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("transactioncurrencyid"))
				    value = (EntityReference) backupAttributeCollection["transactioncurrencyid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        /// [Range(0, 2147483647)] 
		/// 'UILanguageId'.<br />
        /// Unique identifier of the language in which to view the user interface (UI).
        /// </summary>
		[AttributeLogicalName("uilanguageid"), InRange("0", "2147483647", typeof(int))]
		public int? UILanguageId
		{
			get
			{
				var value = GetAttributeValue<int?>("uilanguageid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("uilanguageid"))
				    value = (int?) backupAttributeCollection["uilanguageid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("UILanguageId");
					SetAttributeValue("uilanguageid", value);
				OnPropertyChanged("UILanguageId");
			}
		}

        /// <summary>
        ///  
		/// 'UseCrmFormForAppointment'.<br />
        /// Indicates whether to use the Microsoft Dynamics 365 appointment form within Microsoft Office Outlook for creating new appointments.
        /// </summary>
		[AttributeLogicalName("usecrmformforappointment")]
		public bool? UseCrmFormForAppointment
		{
			get
			{
				var value = GetAttributeValue<bool?>("usecrmformforappointment");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("usecrmformforappointment"))
				    value = (bool?) backupAttributeCollection["usecrmformforappointment"];
			    return value;
			}
			set
			{
				OnPropertyChanging("UseCrmFormForAppointment");
					SetAttributeValue("usecrmformforappointment", value);
				OnPropertyChanged("UseCrmFormForAppointment");
			}
		}

        /// <summary>
        ///  
		/// 'UseCrmFormForContact'.<br />
        /// Indicates whether to use the Microsoft Dynamics 365 contact form within Microsoft Office Outlook for creating new contacts.
        /// </summary>
		[AttributeLogicalName("usecrmformforcontact")]
		public bool? UseCrmFormForContact
		{
			get
			{
				var value = GetAttributeValue<bool?>("usecrmformforcontact");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("usecrmformforcontact"))
				    value = (bool?) backupAttributeCollection["usecrmformforcontact"];
			    return value;
			}
			set
			{
				OnPropertyChanging("UseCrmFormForContact");
					SetAttributeValue("usecrmformforcontact", value);
				OnPropertyChanged("UseCrmFormForContact");
			}
		}

        /// <summary>
        ///  
		/// 'UseCrmFormForEmail'.<br />
        /// Indicates whether to use the Microsoft Dynamics 365 email form within Microsoft Office Outlook for creating new emails.
        /// </summary>
		[AttributeLogicalName("usecrmformforemail")]
		public bool? UseCrmFormForEmail
		{
			get
			{
				var value = GetAttributeValue<bool?>("usecrmformforemail");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("usecrmformforemail"))
				    value = (bool?) backupAttributeCollection["usecrmformforemail"];
			    return value;
			}
			set
			{
				OnPropertyChanging("UseCrmFormForEmail");
					SetAttributeValue("usecrmformforemail", value);
				OnPropertyChanged("UseCrmFormForEmail");
			}
		}

        /// <summary>
        ///  
		/// 'UseCrmFormForTask'.<br />
        /// Indicates whether to use the Microsoft Dynamics 365 task form within Microsoft Office Outlook for creating new tasks.
        /// </summary>
		[AttributeLogicalName("usecrmformfortask")]
		public bool? UseCrmFormForTask
		{
			get
			{
				var value = GetAttributeValue<bool?>("usecrmformfortask");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("usecrmformfortask"))
				    value = (bool?) backupAttributeCollection["usecrmformfortask"];
			    return value;
			}
			set
			{
				OnPropertyChanging("UseCrmFormForTask");
					SetAttributeValue("usecrmformfortask", value);
				OnPropertyChanged("UseCrmFormForTask");
			}
		}

        /// <summary>
        ///  
		/// 'UseImageStrips'.<br />
        /// Indicates whether image strips are used to render images.
        /// </summary>
		[AttributeLogicalName("useimagestrips")]
		public bool? UseImageStrips
		{
			get
			{
				var value = GetAttributeValue<bool?>("useimagestrips");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("useimagestrips"))
				    value = (bool?) backupAttributeCollection["useimagestrips"];
			    return value;
			}
			set
			{
				OnPropertyChanging("UseImageStrips");
					SetAttributeValue("useimagestrips", value);
				OnPropertyChanged("UseImageStrips");
			}
		}

        /// <summary>
        /// [MaximumLength=1024] 
		/// 'UserProfile'.<br />
        /// Specifies user profile ids in comma separated list.
        /// </summary>
		[AttributeLogicalName("userprofile"), MaxLength(1024)]
		public string UserProfile
		{
			get
			{
				var value = GetAttributeValue<string>("userprofile");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("userprofile"))
				    value = (string) backupAttributeCollection["userprofile"];
			    return value;
			}
			set
			{
				OnPropertyChanging("UserProfile");
					SetAttributeValue("userprofile", value);
				OnPropertyChanged("UserProfile");
			}
		}

		[AttributeLogicalName("versionnumber")]
		public long? VersionNumber
		{
			get
			{
				var value = GetAttributeValue<long?>("versionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("versionnumber"))
				    value = (long?) backupAttributeCollection["versionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("VersionNumber");
					SetAttributeValue("versionnumber", value);
				OnPropertyChanged("VersionNumber");
			}
		}

        /// <summary>
        ///  
		/// 'VisualizationPaneLayout'.<br />
        /// The layout of the visualization pane.
        /// </summary>
		[AttributeLogicalName("visualizationpanelayout")]
		public VisualizationPaneLayoutEnum? VisualizationPaneLayout
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("visualizationpanelayout");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("visualizationpanelayout"))
				    value = (OptionSetValue) backupAttributeCollection["visualizationpanelayout"];
                return value == null ? (VisualizationPaneLayoutEnum?) null : (VisualizationPaneLayoutEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("VisualizationPaneLayout");
                if (value != null)
				    SetAttributeValue("visualizationpanelayout", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("visualizationpanelayout", value);
				OnPropertyChanged("VisualizationPaneLayout");
			}
		}

        /// <summary>
        /// [MaximumLength=5] 
		/// 'WorkdayStartTime'.<br />
        /// Workday start time for the user.
        /// </summary>
		[AttributeLogicalName("workdaystarttime"), MaxLength(5)]
		public string WorkdayStartTime
		{
			get
			{
				var value = GetAttributeValue<string>("workdaystarttime");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("workdaystarttime"))
				    value = (string) backupAttributeCollection["workdaystarttime"];
			    return value;
			}
			set
			{
				OnPropertyChanging("WorkdayStartTime");
					SetAttributeValue("workdaystarttime", value);
				OnPropertyChanged("WorkdayStartTime");
			}
		}

        /// <summary>
        /// [MaximumLength=5] 
		/// 'WorkdayStopTime'.<br />
        /// Workday stop time for the user.
        /// </summary>
		[AttributeLogicalName("workdaystoptime"), MaxLength(5)]
		public string WorkdayStopTime
		{
			get
			{
				var value = GetAttributeValue<string>("workdaystoptime");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("workdaystoptime"))
				    value = (string) backupAttributeCollection["workdaystoptime"];
			    return value;
			}
			set
			{
				OnPropertyChanging("WorkdayStopTime");
					SetAttributeValue("workdaystoptime", value);
				OnPropertyChanged("WorkdayStopTime");
			}
		}

		#endregion

		#region Relationships

		
		/// <summary>
		/// N:1, 'lk_usersettings_createdonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_usersettings_createdonbehalfby"), AttributeLogicalName("createdonbehalfby")]
		public User UserAsCreatedByDelegate
		{
			get
			{
				return GetRelatedEntity<User>("lk_usersettings_createdonbehalfby", null);
			}
			set
			{
				OnPropertyChanging("UserAsCreatedByDelegate");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_usersettings_createdonbehalfby", null, value);
				OnPropertyChanged("UserAsCreatedByDelegate");
			}
		}
		
		/// <summary>
		/// N:1, 'lk_usersettings_modifiedonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_usersettings_modifiedonbehalfby"), AttributeLogicalName("modifiedonbehalfby")]
		public User UserAsModifiedByDelegate
		{
			get
			{
				return GetRelatedEntity<User>("lk_usersettings_modifiedonbehalfby", null);
			}
			set
			{
				OnPropertyChanging("UserAsModifiedByDelegate");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_usersettings_modifiedonbehalfby", null, value);
				OnPropertyChanged("UserAsModifiedByDelegate");
			}
		}
		
		/// <summary>
		/// N:1, 'lk_usersettingsbase_createdby'
		/// </summary>
		[RelationshipSchemaName("lk_usersettingsbase_createdby"), AttributeLogicalName("createdby")]
		public User UserAsCreatedBy
		{
			get
			{
				return GetRelatedEntity<User>("lk_usersettingsbase_createdby", null);
			}
			set
			{
				OnPropertyChanging("UserAsCreatedBy");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_usersettingsbase_createdby", null, value);
				OnPropertyChanged("UserAsCreatedBy");
			}
		}
		
		/// <summary>
		/// N:1, 'lk_usersettingsbase_modifiedby'
		/// </summary>
		[RelationshipSchemaName("lk_usersettingsbase_modifiedby"), AttributeLogicalName("modifiedby")]
		public User UserAsModifiedBy
		{
			get
			{
				return GetRelatedEntity<User>("lk_usersettingsbase_modifiedby", null);
			}
			set
			{
				OnPropertyChanging("UserAsModifiedBy");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_usersettingsbase_modifiedby", null, value);
				OnPropertyChanged("UserAsModifiedBy");
			}
		}
		
		/// <summary>
		/// N:1, 'user_settings'
		/// </summary>
		[RelationshipSchemaName("user_settings"), AttributeLogicalName("systemuserid")]
		public User UserAsSystemUserId
		{
			get
			{
				return GetRelatedEntity<User>("user_settings", null);
			}
			set
			{
				OnPropertyChanging("UserAsSystemUserId");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("user_settings", null, value);
				OnPropertyChanged("UserAsSystemUserId");
			}
		}
		
		public static class RelationNames {
			public static RelationName UserAsCreatedByDelegate = new RelationName("UserAsCreatedByDelegate");
			public static RelationName UserAsModifiedByDelegate = new RelationName("UserAsModifiedByDelegate");
			public static RelationName UserAsCreatedBy = new RelationName("UserAsCreatedBy");
			public static RelationName UserAsModifiedBy = new RelationName("UserAsModifiedBy");
			public static RelationName UserAsSystemUserId = new RelationName("UserAsSystemUserId");
		}


		protected override IDictionary<string, object[]> RelationProperties { get {
			if (relationProperties != null) return relationProperties;
			relationProperties = new Dictionary<string, object[]>();
			relationProperties["UserAsCreatedByDelegate"] = new object[] { "UserAsCreatedByDelegate", "systemuser", "usersettings", "systemuserid", "createdonbehalfby", "systemuserid", "systemuserid", "lk_usersettings_createdonbehalfby", typeof (User) };
			relationProperties["UserAsModifiedByDelegate"] = new object[] { "UserAsModifiedByDelegate", "systemuser", "usersettings", "systemuserid", "modifiedonbehalfby", "systemuserid", "systemuserid", "lk_usersettings_modifiedonbehalfby", typeof (User) };
			relationProperties["UserAsCreatedBy"] = new object[] { "UserAsCreatedBy", "systemuser", "usersettings", "systemuserid", "createdby", "systemuserid", "systemuserid", "lk_usersettingsbase_createdby", typeof (User) };
			relationProperties["UserAsModifiedBy"] = new object[] { "UserAsModifiedBy", "systemuser", "usersettings", "systemuserid", "modifiedby", "systemuserid", "systemuserid", "lk_usersettingsbase_modifiedby", typeof (User) };
			relationProperties["UserAsSystemUserId"] = new object[] { "UserAsSystemUserId", "systemuser", "usersettings", "systemuserid", "systemuserid", "systemuserid", "systemuserid", "user_settings", typeof (User) };
			return relationProperties; } }


		#endregion

		/// <summary>
		/// Constructor for populating via LINQ queries given a LINQ anonymous type
		/// <param name="anonymousType">LINQ anonymous type.</param>
		/// </summary>
		public UserSettings(object anonymousType) : 
				this()
		{
            foreach (var p in anonymousType.GetType().GetProperties())
            {
                var value = p.GetValue(anonymousType, null);
                if (p.PropertyType == typeof(System.Guid))
                {
                    // Type is Guid, must be Id
                    base.Id = (System.Guid)value;
                    Attributes["systemuserid"] = base.Id;
               }
                else if (p.Name == "FormattedValues")
                {
                    // Add Support for FormattedValues
                    FormattedValues.AddRange((FormattedValueCollection)value);
                }
                else
                {
                    Attributes[p.Name.ToLower()] = value;
                }
            }
		}


		#region Label/value pairs

		#region AllowEmailCredentials

		public enum AllowEmailCredentialsEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region DataValidationModeForExportToExcel

		public enum DataValidationModeForExportToExcelEnum
		{
			[EnumMember]Full = 0,
			[EnumMember]None = 1,
		}

		#endregion
	
		#region DefaultSearchExperience

		public enum DefaultSearchExperienceEnum
		{
			[EnumMember]Relevancesearch = 0,
			[EnumMember]Categorizedsearch = 1,
			[EnumMember]Uselastsearch = 2,
		}

		#endregion
	
		#region FormMode

		public enum FormModeEnum
		{
			[EnumMember]Organizationdefault = 0,
			[EnumMember]Readoptimized = 1,
			[EnumMember]Edit = 2,
		}

		#endregion
	
		#region GetStartedPaneContentEnabled

		public enum GetStartedPaneContentEnabledEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region IgnoreUnsolicitedEmail

		public enum IgnoreUnsolicitedEmailEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region IncomingEmailFilteringMethod

		public enum IncomingEmailFilteringMethodEnum
		{
			[EnumMember]Allemailmessages = 0,
			[EnumMember]EmailmessagesinresponsetoDynamics365email = 1,
			[EnumMember]EmailmessagesfromDynamics365LeadsContactsandAccounts = 2,
			[EnumMember]EmailmessagesfromDynamics365recordsthatareemailenabled = 3,
		}

		#endregion
	
		#region ShowalertforAppsfor365

		public enum ShowalertforAppsfor365Enum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region IsAutoDataCaptureEnabled

		public enum IsAutoDataCaptureEnabledEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region EnableDefaultCountryCode

		public enum EnableDefaultCountryCodeEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region IsDuplicateDetectionEnabledWhenGoingOnline

		public enum IsDuplicateDetectionEnabledWhenGoingOnlineEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region EnableDefaultGuidedHelp

		public enum EnableDefaultGuidedHelpEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region Resourcebookingsynchronizationenabled

		public enum ResourcebookingsynchronizationenabledEnum
		{
			[EnumMember]Enabled = 1,
			[EnumMember]Disabled = 0,
		}

		#endregion
	
		#region IsSendAsAllowed

		public enum IsSendAsAllowedEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region ReportScriptErrors

		public enum ReportScriptErrorsEnum
		{
			[EnumMember]AskmeforpermissiontosendanerrorreporttoMicrosoft = 1,
			[EnumMember]AutomaticallysendanerrorreporttoMicrosoftwithoutaskingmeforpermission = 2,
			[EnumMember]NeversendanerrorreporttoMicrosoftaboutMicrosoftDynamics365 = 3,
		}

		#endregion
	
		#region ShowWeekNumber

		public enum ShowWeekNumberEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region SplitViewState

		public enum SplitViewStateEnum
		{
			[EnumMember]Expanded = 1,
			[EnumMember]Collapsed = 0,
		}

		#endregion
	
		#region SyncContactCompany

		public enum SyncContactCompanyEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region UseCrmFormForAppointment

		public enum UseCrmFormForAppointmentEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region UseCrmFormForContact

		public enum UseCrmFormForContactEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region UseCrmFormForEmail

		public enum UseCrmFormForEmailEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region UseCrmFormForTask

		public enum UseCrmFormForTaskEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region UseImageStrips

		public enum UseImageStripsEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region VisualizationPaneLayout

		public enum VisualizationPaneLayoutEnum
		{
			[EnumMember]Topbottom = 0,
			[EnumMember]Sidebyside = 1,
		}

		#endregion
	
		#endregion


		#region Metadata


		#region Enums

		public static class Enums
		{
			/// <summary>
			/// Gets the label corresponding to the option-set's value using its logical name,
			/// the value within, and the language code.
			/// </summary>
			/// <param name="logicalName">The logical name of the option-set in CRM</param>
			/// <param name="constant">The value from the option-set</param>
			/// <param name="languageCode">The language code from CRM</param>
			/// <returns></returns>
			public static string GetLabel(string logicalName, int constant, int languageCode = 1033)
			{
				return GeneratorHelpers.GetLabel(logicalName, constant, typeof(Enums), languageCode);
			}
			/// <summary>
			/// Gets the value corresponding to the option-set's label using its logical name,
			/// the value within, and the language code.
			/// </summary>
			/// <param name="logicalName">The logical name of the option-set in CRM</param>
			/// <param name="label">The label from the option-set</param>
			/// <param name="languageCode">The language code from CRM</param>
			/// <returns>The value corresponding to the label</returns>
			public static int GetValue(string logicalName, string label, int languageCode = 1033)
			{
				return GeneratorHelpers.GetValue(logicalName, label, typeof(Enums), languageCode);
			}

			#region Logical names

			public static class Names
			{
				public const string AllowEmailCredentials = "allowemailcredentials";
				public const string DataValidationModeForExportToExcel = "datavalidationmodeforexporttoexcel";
				public const string DefaultSearchExperience = "defaultsearchexperience";
				public const string FormMode = "entityformmode";
				public const string GetStartedPaneContentEnabled = "getstartedpanecontentenabled";
				public const string IgnoreUnsolicitedEmail = "ignoreunsolicitedemail";
				public const string IncomingEmailFilteringMethod = "incomingemailfilteringmethod";
				public const string ShowalertforAppsfor365 = "isappsforcrmalertdismissed";
				public const string IsAutoDataCaptureEnabled = "isautodatacaptureenabled";
				public const string EnableDefaultCountryCode = "isdefaultcountrycodecheckenabled";
				public const string IsDuplicateDetectionEnabledWhenGoingOnline = "isduplicatedetectionenabledwhengoingonline";
				public const string EnableDefaultGuidedHelp = "isguidedhelpenabled";
				public const string Resourcebookingsynchronizationenabled = "isresourcebookingexchangesyncenabled";
				public const string IsSendAsAllowed = "issendasallowed";
				public const string ReportScriptErrors = "reportscripterrors";
				public const string ShowWeekNumber = "showweeknumber";
				public const string SplitViewState = "splitviewstate";
				public const string SyncContactCompany = "synccontactcompany";
				public const string UseCrmFormForAppointment = "usecrmformforappointment";
				public const string UseCrmFormForContact = "usecrmformforcontact";
				public const string UseCrmFormForEmail = "usecrmformforemail";
				public const string UseCrmFormForTask = "usecrmformfortask";
				public const string UseImageStrips = "useimagestrips";
				public const string VisualizationPaneLayout = "visualizationpanelayout";
			}

			#endregion

			#region Labels

			public static class Labels
			{
				public static class AllowEmailCredentials 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(AllowEmailCredentials), label, languageCode);
					}
				}

				public static class DataValidationModeForExportToExcel 
				{
					public const string Full_1033 = "Full";
					public const string None_1033 = "None";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(DataValidationModeForExportToExcel), label, languageCode);
					}
				}

				public static class DefaultSearchExperience 
				{
					public const string Relevancesearch_1033 = "Relevance search";
					public const string Categorizedsearch_1033 = "Categorized search";
					public const string Uselastsearch_1033 = "Use last search";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(DefaultSearchExperience), label, languageCode);
					}
				}

				public static class FormMode 
				{
					public const string Organizationdefault_1033 = "Organization default";
					public const string Readoptimized_1033 = "Read-optimized";
					public const string Edit_1033 = "Edit";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(FormMode), label, languageCode);
					}
				}

				public static class GetStartedPaneContentEnabled 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(GetStartedPaneContentEnabled), label, languageCode);
					}
				}

				public static class IgnoreUnsolicitedEmail 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(IgnoreUnsolicitedEmail), label, languageCode);
					}
				}

				public static class IncomingEmailFilteringMethod 
				{
					public const string Allemailmessages_1033 = "All email messages";
					public const string EmailmessagesinresponsetoDynamics365email_1033 = "Email messages in response to Dynamics 365 email";
					public const string EmailmessagesfromDynamics365LeadsContactsandAccounts_1033 = "Email messages from Dynamics 365 Leads, Contacts and Accounts";
					public const string EmailmessagesfromDynamics365recordsthatareemailenabled_1033 = "Email messages from Dynamics 365 records that are email enabled";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(IncomingEmailFilteringMethod), label, languageCode);
					}
				}

				public static class ShowalertforAppsfor365 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(ShowalertforAppsfor365), label, languageCode);
					}
				}

				public static class IsAutoDataCaptureEnabled 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(IsAutoDataCaptureEnabled), label, languageCode);
					}
				}

				public static class EnableDefaultCountryCode 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(EnableDefaultCountryCode), label, languageCode);
					}
				}

				public static class IsDuplicateDetectionEnabledWhenGoingOnline 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(IsDuplicateDetectionEnabledWhenGoingOnline), label, languageCode);
					}
				}

				public static class EnableDefaultGuidedHelp 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(EnableDefaultGuidedHelp), label, languageCode);
					}
				}

				public static class Resourcebookingsynchronizationenabled 
				{
					public const string Enabled_1033 = "Enabled";
					public const string Disabled_1033 = "Disabled";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(Resourcebookingsynchronizationenabled), label, languageCode);
					}
				}

				public static class IsSendAsAllowed 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(IsSendAsAllowed), label, languageCode);
					}
				}

				public static class ReportScriptErrors 
				{
					public const string AskmeforpermissiontosendanerrorreporttoMicrosoft_1033 = "Ask me for permission to send an error report to Microsoft";
					public const string AutomaticallysendanerrorreporttoMicrosoftwithoutaskingmeforpermission_1033 = "Automatically send an error report to Microsoft without asking me for permission";
					public const string NeversendanerrorreporttoMicrosoftaboutMicrosoftDynamics365_1033 = "Never send an error report to Microsoft about Microsoft Dynamics 365";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(ReportScriptErrors), label, languageCode);
					}
				}

				public static class ShowWeekNumber 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(ShowWeekNumber), label, languageCode);
					}
				}

				public static class SplitViewState 
				{
					public const string Expanded_1033 = "Expanded";
					public const string Collapsed_1033 = "Collapsed";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(SplitViewState), label, languageCode);
					}
				}

				public static class SyncContactCompany 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(SyncContactCompany), label, languageCode);
					}
				}

				public static class UseCrmFormForAppointment 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(UseCrmFormForAppointment), label, languageCode);
					}
				}

				public static class UseCrmFormForContact 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(UseCrmFormForContact), label, languageCode);
					}
				}

				public static class UseCrmFormForEmail 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(UseCrmFormForEmail), label, languageCode);
					}
				}

				public static class UseCrmFormForTask 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(UseCrmFormForTask), label, languageCode);
					}
				}

				public static class UseImageStrips 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(UseImageStrips), label, languageCode);
					}
				}

				public static class VisualizationPaneLayout 
				{
					public const string Topbottom_1033 = "Top-bottom";
					public const string Sidebyside_1033 = "Side-by-side";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(VisualizationPaneLayout), label, languageCode);
					}
				}

			}

			#endregion
		}

		#endregion

		#region Fields

		public static class Fields
		{
			#region Logical names

			public const string AddressBookSyncInterval = "addressbooksyncinterval";
			public const string AdvancedFindStartupMode = "advancedfindstartupmode";
			public const string AllowEmailCredentials = "allowemailcredentials";
			public const string AMDesignator = "amdesignator";
			public const string AutoCreateContactOnPromote = "autocreatecontactonpromote";
			public const string BusinessUnitId = "businessunitid";
			public const string CalendarType = "calendartype";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedByDelegate = "createdonbehalfby";
			public const string CurrencyDecimalPrecision = "currencydecimalprecision";
			public const string CurrencyFormatCode = "currencyformatcode";
			public const string CurrencySymbol = "currencysymbol";
			public const string DataValidationModeForExportToExcel = "datavalidationmodeforexporttoexcel";
			public const string DateFormatCode = "dateformatcode";
			public const string DateFormatString = "dateformatstring";
			public const string DateSeparator = "dateseparator";
			public const string DecimalSymbol = "decimalsymbol";
			public const string DefaultCalendarView = "defaultcalendarview";
			public const string DefaultCountryCode = "defaultcountrycode";
			public const string DefaultDashboardId = "defaultdashboardid";
			public const string DefaultSearchExperience = "defaultsearchexperience";
			public const string EmailPassword = "emailpassword";
			public const string EmailUsername = "emailusername";
			public const string FormMode = "entityformmode";
			public const string FullNameConventionCode = "fullnameconventioncode";
			public const string GetStartedPaneContentEnabled = "getstartedpanecontentenabled";
			public const string HelpLanguageId = "helplanguageid";
			public const string HomepageArea = "homepagearea";
			public const string HomepageLayout = "homepagelayout";
			public const string HomepageSubarea = "homepagesubarea";
			public const string IgnoreUnsolicitedEmail = "ignoreunsolicitedemail";
			public const string IncomingEmailFilteringMethod = "incomingemailfilteringmethod";
			public const string ShowalertforAppsfor365 = "isappsforcrmalertdismissed";
			public const string IsAutoDataCaptureEnabled = "isautodatacaptureenabled";
			public const string EnableDefaultCountryCode = "isdefaultcountrycodecheckenabled";
			public const string IsDuplicateDetectionEnabledWhenGoingOnline = "isduplicatedetectionenabledwhengoingonline";
			public const string EnableDefaultGuidedHelp = "isguidedhelpenabled";
			public const string Resourcebookingsynchronizationenabled = "isresourcebookingexchangesyncenabled";
			public const string IsSendAsAllowed = "issendasallowed";
			public const string LastAlertsViewedTime = "lastalertsviewedtime";
			public const string LocaleId = "localeid";
			public const string LongDateFormatCode = "longdateformatcode";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedByDelegate = "modifiedonbehalfby";
			public const string NegativeCurrencyFormatCode = "negativecurrencyformatcode";
			public const string NegativeFormatCode = "negativeformatcode";
			public const string NextTrackingNumber = "nexttrackingnumber";
			public const string NumberGroupFormat = "numbergroupformat";
			public const string NumberSeparator = "numberseparator";
			public const string OfflineSyncInterval = "offlinesyncinterval";
			public const string OutlookSyncInterval = "outlooksyncinterval";
			public const string PagingLimit = "paginglimit";
			public const string PersonalizationSettings = "personalizationsettings";
			public const string PMDesignator = "pmdesignator";
			public const string PricingDecimalPrecision = "pricingdecimalprecision";
			public const string ReportScriptErrors = "reportscripterrors";
			public const string Userresourcebookingsynchronizationversion = "resourcebookingexchangesyncversion";
			public const string ShowWeekNumber = "showweeknumber";
			public const string SplitViewState = "splitviewstate";
			public const string SyncContactCompany = "synccontactcompany";
			public const string SystemUserIdId = "systemuserid";
			public const string TimeFormatCode = "timeformatcode";
			public const string TimeFormatString = "timeformatstring";
			public const string TimeSeparator = "timeseparator";
			public const string TimeZoneBias = "timezonebias";
			public const string TimeZoneCode = "timezonecode";
			public const string TimeZoneDaylightBias = "timezonedaylightbias";
			public const string TimeZoneDaylightDay = "timezonedaylightday";
			public const string TimeZoneDaylightDayOfWeek = "timezonedaylightdayofweek";
			public const string TimeZoneDaylightHour = "timezonedaylighthour";
			public const string TimeZoneDaylightMinute = "timezonedaylightminute";
			public const string TimeZoneDaylightMonth = "timezonedaylightmonth";
			public const string TimeZoneDaylightSecond = "timezonedaylightsecond";
			public const string TimeZoneDaylightYear = "timezonedaylightyear";
			public const string TimeZoneStandardBias = "timezonestandardbias";
			public const string TimeZoneStandardDay = "timezonestandardday";
			public const string TimeZoneStandardDayOfWeek = "timezonestandarddayofweek";
			public const string TimeZoneStandardHour = "timezonestandardhour";
			public const string TimeZoneStandardMinute = "timezonestandardminute";
			public const string TimeZoneStandardMonth = "timezonestandardmonth";
			public const string TimeZoneStandardSecond = "timezonestandardsecond";
			public const string TimeZoneStandardYear = "timezonestandardyear";
			public const string TrackingTokenId = "trackingtokenid";
			public const string Currency = "transactioncurrencyid";
			public const string UILanguageId = "uilanguageid";
			public const string UseCrmFormForAppointment = "usecrmformforappointment";
			public const string UseCrmFormForContact = "usecrmformforcontact";
			public const string UseCrmFormForEmail = "usecrmformforemail";
			public const string UseCrmFormForTask = "usecrmformfortask";
			public const string UseImageStrips = "useimagestrips";
			public const string UserProfile = "userprofile";
			public const string VersionNumber = "versionnumber";
			public const string VisualizationPaneLayout = "visualizationpanelayout";
			public const string WorkdayStartTime = "workdaystarttime";
			public const string WorkdayStopTime = "workdaystoptime";

			#endregion

			#region Schema names

			public static class Schema
			{
				public const string AddressBookSyncInterval = "AddressBookSyncInterval";
				public const string AdvancedFindStartupMode = "AdvancedFindStartupMode";
				public const string AllowEmailCredentials = "AllowEmailCredentials";
				public const string AMDesignator = "AMDesignator";
				public const string AutoCreateContactOnPromote = "AutoCreateContactOnPromote";
				public const string BusinessUnitId = "BusinessUnitId";
				public const string CalendarType = "CalendarType";
				public const string CreatedBy = "CreatedBy";
				public const string CreatedOn = "CreatedOn";
				public const string CreatedByDelegate = "CreatedOnBehalfBy";
				public const string CurrencyDecimalPrecision = "CurrencyDecimalPrecision";
				public const string CurrencyFormatCode = "CurrencyFormatCode";
				public const string CurrencySymbol = "CurrencySymbol";
				public const string DataValidationModeForExportToExcel = "DataValidationModeForExportToExcel";
				public const string DateFormatCode = "DateFormatCode";
				public const string DateFormatString = "DateFormatString";
				public const string DateSeparator = "DateSeparator";
				public const string DecimalSymbol = "DecimalSymbol";
				public const string DefaultCalendarView = "DefaultCalendarView";
				public const string DefaultCountryCode = "DefaultCountryCode";
				public const string DefaultDashboardId = "DefaultDashboardId";
				public const string DefaultSearchExperience = "DefaultSearchExperience";
				public const string EmailPassword = "EmailPassword";
				public const string EmailUsername = "EmailUsername";
				public const string FormMode = "EntityFormMode";
				public const string FullNameConventionCode = "FullNameConventionCode";
				public const string GetStartedPaneContentEnabled = "GetStartedPaneContentEnabled";
				public const string HelpLanguageId = "HelpLanguageId";
				public const string HomepageArea = "HomepageArea";
				public const string HomepageLayout = "HomepageLayout";
				public const string HomepageSubarea = "HomepageSubarea";
				public const string IgnoreUnsolicitedEmail = "IgnoreUnsolicitedEmail";
				public const string IncomingEmailFilteringMethod = "IncomingEmailFilteringMethod";
				public const string ShowalertforAppsfor365 = "IsAppsForCrmAlertDismissed";
				public const string IsAutoDataCaptureEnabled = "IsAutoDataCaptureEnabled";
				public const string EnableDefaultCountryCode = "IsDefaultCountryCodeCheckEnabled";
				public const string IsDuplicateDetectionEnabledWhenGoingOnline = "IsDuplicateDetectionEnabledWhenGoingOnline";
				public const string EnableDefaultGuidedHelp = "IsGuidedHelpEnabled";
				public const string Resourcebookingsynchronizationenabled = "IsResourceBookingExchangeSyncEnabled";
				public const string IsSendAsAllowed = "IsSendAsAllowed";
				public const string LastAlertsViewedTime = "LastAlertsViewedTime";
				public const string LocaleId = "LocaleId";
				public const string LongDateFormatCode = "LongDateFormatCode";
				public const string ModifiedBy = "ModifiedBy";
				public const string ModifiedOn = "ModifiedOn";
				public const string ModifiedByDelegate = "ModifiedOnBehalfBy";
				public const string NegativeCurrencyFormatCode = "NegativeCurrencyFormatCode";
				public const string NegativeFormatCode = "NegativeFormatCode";
				public const string NextTrackingNumber = "NextTrackingNumber";
				public const string NumberGroupFormat = "NumberGroupFormat";
				public const string NumberSeparator = "NumberSeparator";
				public const string OfflineSyncInterval = "OfflineSyncInterval";
				public const string OutlookSyncInterval = "OutlookSyncInterval";
				public const string PagingLimit = "PagingLimit";
				public const string PersonalizationSettings = "PersonalizationSettings";
				public const string PMDesignator = "PMDesignator";
				public const string PricingDecimalPrecision = "PricingDecimalPrecision";
				public const string ReportScriptErrors = "ReportScriptErrors";
				public const string Userresourcebookingsynchronizationversion = "ResourceBookingExchangeSyncVersion";
				public const string ShowWeekNumber = "ShowWeekNumber";
				public const string SplitViewState = "SplitViewState";
				public const string SyncContactCompany = "SyncContactCompany";
				public const string SystemUserIdId = "SystemUserId";
				public const string TimeFormatCode = "TimeFormatCode";
				public const string TimeFormatString = "TimeFormatString";
				public const string TimeSeparator = "TimeSeparator";
				public const string TimeZoneBias = "TimeZoneBias";
				public const string TimeZoneCode = "TimeZoneCode";
				public const string TimeZoneDaylightBias = "TimeZoneDaylightBias";
				public const string TimeZoneDaylightDay = "TimeZoneDaylightDay";
				public const string TimeZoneDaylightDayOfWeek = "TimeZoneDaylightDayOfWeek";
				public const string TimeZoneDaylightHour = "TimeZoneDaylightHour";
				public const string TimeZoneDaylightMinute = "TimeZoneDaylightMinute";
				public const string TimeZoneDaylightMonth = "TimeZoneDaylightMonth";
				public const string TimeZoneDaylightSecond = "TimeZoneDaylightSecond";
				public const string TimeZoneDaylightYear = "TimeZoneDaylightYear";
				public const string TimeZoneStandardBias = "TimeZoneStandardBias";
				public const string TimeZoneStandardDay = "TimeZoneStandardDay";
				public const string TimeZoneStandardDayOfWeek = "TimeZoneStandardDayOfWeek";
				public const string TimeZoneStandardHour = "TimeZoneStandardHour";
				public const string TimeZoneStandardMinute = "TimeZoneStandardMinute";
				public const string TimeZoneStandardMonth = "TimeZoneStandardMonth";
				public const string TimeZoneStandardSecond = "TimeZoneStandardSecond";
				public const string TimeZoneStandardYear = "TimeZoneStandardYear";
				public const string TrackingTokenId = "TrackingTokenId";
				public const string Currency = "TransactionCurrencyId";
				public const string UILanguageId = "UILanguageId";
				public const string UseCrmFormForAppointment = "UseCrmFormForAppointment";
				public const string UseCrmFormForContact = "UseCrmFormForContact";
				public const string UseCrmFormForEmail = "UseCrmFormForEmail";
				public const string UseCrmFormForTask = "UseCrmFormForTask";
				public const string UseImageStrips = "UseImageStrips";
				public const string UserProfile = "UserProfile";
				public const string VersionNumber = "VersionNumber";
				public const string VisualizationPaneLayout = "VisualizationPaneLayout";
				public const string WorkdayStartTime = "WorkdayStartTime";
				public const string WorkdayStopTime = "WorkdayStopTime";
			}

			#endregion

			#region Labels

			public static class Labels
			{
				public static class AddressBookSyncInterval
				{
				}

				public static class AdvancedFindStartupMode
				{
				}

				public static class AllowEmailCredentials
				{
				}

				public static class AMDesignator
				{
				}

				public static class AutoCreateContactOnPromote
				{
				}

				public static class BusinessUnitId
				{
				}

				public static class CalendarType
				{
				}

				public static class CreatedBy
				{
				}

				public static class CreatedOn
				{
				}

				public static class CreatedByDelegate
				{
					public const string _1033 = "Created By (Delegate)";
				}

				public static class CurrencyDecimalPrecision
				{
				}

				public static class CurrencyFormatCode
				{
				}

				public static class CurrencySymbol
				{
				}

				public static class DataValidationModeForExportToExcel
				{
					public const string _1033 = "Data Validation Mode For Export To Excel";
				}

				public static class DateFormatCode
				{
				}

				public static class DateFormatString
				{
				}

				public static class DateSeparator
				{
				}

				public static class DecimalSymbol
				{
				}

				public static class DefaultCalendarView
				{
				}

				public static class DefaultCountryCode
				{
					public const string _1033 = "Default Country Code";
				}

				public static class DefaultDashboardId
				{
				}

				public static class DefaultSearchExperience
				{
					public const string _1033 = "Default Search Experience";
				}

				public static class EmailPassword
				{
				}

				public static class EmailUsername
				{
				}

				public static class FormMode
				{
					public const string _1033 = "Form Mode";
				}

				public static class FullNameConventionCode
				{
				}

				public static class GetStartedPaneContentEnabled
				{
				}

				public static class HelpLanguageId
				{
				}

				public static class HomepageArea
				{
				}

				public static class HomepageLayout
				{
				}

				public static class HomepageSubarea
				{
				}

				public static class IgnoreUnsolicitedEmail
				{
				}

				public static class IncomingEmailFilteringMethod
				{
					public const string _1033 = "Incoming Email Filtering Method";
				}

				public static class ShowalertforAppsfor365
				{
					public const string _1033 = "Show alert for Apps for 365.";
				}

				public static class IsAutoDataCaptureEnabled
				{
				}

				public static class EnableDefaultCountryCode
				{
					public const string _1033 = "Enable Default Country Code";
				}

				public static class IsDuplicateDetectionEnabledWhenGoingOnline
				{
				}

				public static class EnableDefaultGuidedHelp
				{
					public const string _1033 = "Enable Default Guided Help";
				}

				public static class Resourcebookingsynchronizationenabled
				{
					public const string _1033 = "Resource booking synchronization enabled";
				}

				public static class IsSendAsAllowed
				{
				}

				public static class LastAlertsViewedTime
				{
				}

				public static class LocaleId
				{
				}

				public static class LongDateFormatCode
				{
				}

				public static class ModifiedBy
				{
				}

				public static class ModifiedOn
				{
				}

				public static class ModifiedByDelegate
				{
					public const string _1033 = "Modified By (Delegate)";
				}

				public static class NegativeCurrencyFormatCode
				{
				}

				public static class NegativeFormatCode
				{
				}

				public static class NextTrackingNumber
				{
				}

				public static class NumberGroupFormat
				{
				}

				public static class NumberSeparator
				{
				}

				public static class OfflineSyncInterval
				{
				}

				public static class OutlookSyncInterval
				{
				}

				public static class PagingLimit
				{
				}

				public static class PersonalizationSettings
				{
				}

				public static class PMDesignator
				{
				}

				public static class PricingDecimalPrecision
				{
				}

				public static class ReportScriptErrors
				{
					public const string _1033 = "Report Script Errors";
				}

				public static class Userresourcebookingsynchronizationversion
				{
					public const string _1033 = "User resource booking synchronization version";
				}

				public static class ShowWeekNumber
				{
				}

				public static class SplitViewState
				{
				}

				public static class SyncContactCompany
				{
				}

				public static class SystemUserIdId
				{
				}

				public static class TimeFormatCode
				{
				}

				public static class TimeFormatString
				{
				}

				public static class TimeSeparator
				{
				}

				public static class TimeZoneBias
				{
				}

				public static class TimeZoneCode
				{
				}

				public static class TimeZoneDaylightBias
				{
				}

				public static class TimeZoneDaylightDay
				{
				}

				public static class TimeZoneDaylightDayOfWeek
				{
				}

				public static class TimeZoneDaylightHour
				{
				}

				public static class TimeZoneDaylightMinute
				{
				}

				public static class TimeZoneDaylightMonth
				{
				}

				public static class TimeZoneDaylightSecond
				{
				}

				public static class TimeZoneDaylightYear
				{
				}

				public static class TimeZoneStandardBias
				{
				}

				public static class TimeZoneStandardDay
				{
				}

				public static class TimeZoneStandardDayOfWeek
				{
				}

				public static class TimeZoneStandardHour
				{
				}

				public static class TimeZoneStandardMinute
				{
				}

				public static class TimeZoneStandardMonth
				{
				}

				public static class TimeZoneStandardSecond
				{
				}

				public static class TimeZoneStandardYear
				{
				}

				public static class TrackingTokenId
				{
				}

				public static class Currency
				{
					public const string _1033 = "Currency";
				}

				public static class UILanguageId
				{
				}

				public static class UseCrmFormForAppointment
				{
				}

				public static class UseCrmFormForContact
				{
				}

				public static class UseCrmFormForEmail
				{
				}

				public static class UseCrmFormForTask
				{
				}

				public static class UseImageStrips
				{
				}

				public static class UserProfile
				{
				}

				public static class VersionNumber
				{
				}

				public static class VisualizationPaneLayout
				{
					public const string _1033 = "Visualization Pane Layout.";
				}

				public static class WorkdayStartTime
				{
				}

				public static class WorkdayStopTime
				{
				}

			}

			#endregion
		}

		#endregion

		#region Relations

		public static class Relations
		{
			public static class OneToN
			{
			}
			
			public static class NToOne
			{
				public const string UserAsCreatedByDelegate = "lk_usersettings_createdonbehalfby";
				public const string UserAsModifiedByDelegate = "lk_usersettings_modifiedonbehalfby";
				public const string UserAsCreatedBy = "lk_usersettingsbase_createdby";
				public const string UserAsModifiedBy = "lk_usersettingsbase_modifiedby";
				public const string UserAsSystemUserId = "user_settings";

				public static class Lookups
				{
					public const string UserAsCreatedByDelegate = "createdonbehalfby";
					public const string UserAsModifiedByDelegate = "modifiedonbehalfby";
					public const string UserAsCreatedBy = "createdby";
					public const string UserAsModifiedBy = "modifiedby";
					public const string UserAsSystemUserId = "systemuserid";
				}
			}

			public static class NToN
			{

			}
		}

		#endregion

		#endregion
	}

	#endregion

	#endregion

}

